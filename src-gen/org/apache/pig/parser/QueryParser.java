// $ANTLR 3.4 /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g 2014-11-19 11:26:28

package org.apache.pig.parser;

import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.pig.parser.PigMacro;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.base.Joiner;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/**
 * Parser file for Pig Parser
 *
 * NOTE: THIS FILE IS THE BASE FOR A FEW TREE PARSER FILES, such as AstValidator.g,
 *       SO IF YOU CHANGE THIS FILE, YOU WILL PROBABLY NEED TO MAKE CORRESPONDING CHANGES TO
 *       THOSE FILES AS WELL.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class QueryParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "AMPERSAND", "AND", "ARROBA", "AS", "ASC", "BAG", "BIGDECIMAL", "BIGDECIMALNUMBER", "BIGINTEGER", "BIGINTEGERNUMBER", "BOOLEAN", "BY", "BYTEARRAY", "CACHE", "CASE", "CHARARRAY", "COGROUP", "COLON", "COMMA", "CROSS", "CUBE", "DATETIME", "DCOLON", "DEFINE", "DENSE", "DESC", "DIGIT", "DISTINCT", "DIV", "DOLLAR", "DOLLARVAR", "DOUBLE", "DOUBLENUMBER", "DOUBLE_PERIOD", "ELSE", "END", "EQUAL", "EXECCOMMAND", "FALSE", "FAT_ARROW", "FILTER", "FLATTEN", "FLOAT", "FLOATINGPOINT", "FLOATNUMBER", "FOREACH", "FULL", "GENERATE", "GROUP", "ID", "IDENTIFIER", "IF", "IMPORT", "IN", "INNER", "INPUT", "INT", "INTEGER", "INTO", "INVOKE", "IS", "JOIN", "LEFT", "LEFT_BRACKET", "LEFT_CURLY", "LEFT_PAREN", "LETTER", "LIMIT", "LOAD", "LONG", "LONGINTEGER", "MAP", "MAPREDUCE", "MINUS", "ML_COMMENT", "MULTILINE_QUOTEDSTRING", "NOT", "NULL", "NUM_OP_EQ", "NUM_OP_GT", "NUM_OP_GTE", "NUM_OP_LT", "NUM_OP_LTE", "NUM_OP_NE", "ONSCHEMA", "OR", "ORDER", "OTHERWISE", "OUTER", "OUTPUT", "PARALLEL", "PARTITION", "PERCENT", "PERIOD", "PLUS", "POUND", "QMARK", "QUOTEDSTRING", "RANK", "RETURNS", "RIGHT", "RIGHT_BRACKET", "RIGHT_CURLY", "RIGHT_PAREN", "ROLLUP", "SAMPLE", "SEMI_COLON", "SHIP", "SL_COMMENT", "SPECIALCHAR", "SPLIT", "STAR", "STDERROR", "STDIN", "STDOUT", "STORE", "STREAM", "STR_OP_EQ", "STR_OP_GT", "STR_OP_GTE", "STR_OP_LT", "STR_OP_LTE", "STR_OP_MATCHES", "STR_OP_NE", "THEN", "THROUGH", "TRUE", "TUPLE", "UNION", "USING", "VOID", "WHEN", "WS", "ANY", "BAG_TYPE", "BAG_TYPE_CAST", "BAG_VAL", "BIN_EXPR", "BOOL", "BOOL_COND", "CASE_COND", "CASE_EXPR", "CAST_EXPR", "COL_RANGE", "EXPR_IN_PAREN", "FIELD_DEF", "FIELD_DEF_WITHOUT_IDENTIFIER", "FOREACH_PLAN_COMPLEX", "FOREACH_PLAN_SIMPLE", "FUNC", "FUNC_EVAL", "FUNC_REF", "INVOKER_FUNC_EVAL", "JOIN_ITEM", "KEY_VAL_PAIR", "MACRO_BODY", "MACRO_DEF", "MACRO_INLINE", "MAP_TYPE", "MAP_VAL", "NEG", "NESTED_CMD", "NESTED_CMD_ASSI", "NESTED_PROJ", "PARAMS", "QUERY", "REALIAS", "RETURN_VAL", "SPLIT_BRANCH", "STATEMENT", "TOBAG", "TOMAP", "TOTUPLE", "TUPLE_TYPE", "TUPLE_TYPE_CAST", "TUPLE_VAL"
    };

    public static final int EOF=-1;
    public static final int ALL=4;
    public static final int AMPERSAND=5;
    public static final int AND=6;
    public static final int ARROBA=7;
    public static final int AS=8;
    public static final int ASC=9;
    public static final int BAG=10;
    public static final int BIGDECIMAL=11;
    public static final int BIGDECIMALNUMBER=12;
    public static final int BIGINTEGER=13;
    public static final int BIGINTEGERNUMBER=14;
    public static final int BOOLEAN=15;
    public static final int BY=16;
    public static final int BYTEARRAY=17;
    public static final int CACHE=18;
    public static final int CASE=19;
    public static final int CHARARRAY=20;
    public static final int COGROUP=21;
    public static final int COLON=22;
    public static final int COMMA=23;
    public static final int CROSS=24;
    public static final int CUBE=25;
    public static final int DATETIME=26;
    public static final int DCOLON=27;
    public static final int DEFINE=28;
    public static final int DENSE=29;
    public static final int DESC=30;
    public static final int DIGIT=31;
    public static final int DISTINCT=32;
    public static final int DIV=33;
    public static final int DOLLAR=34;
    public static final int DOLLARVAR=35;
    public static final int DOUBLE=36;
    public static final int DOUBLENUMBER=37;
    public static final int DOUBLE_PERIOD=38;
    public static final int ELSE=39;
    public static final int END=40;
    public static final int EQUAL=41;
    public static final int EXECCOMMAND=42;
    public static final int FALSE=43;
    public static final int FAT_ARROW=44;
    public static final int FILTER=45;
    public static final int FLATTEN=46;
    public static final int FLOAT=47;
    public static final int FLOATINGPOINT=48;
    public static final int FLOATNUMBER=49;
    public static final int FOREACH=50;
    public static final int FULL=51;
    public static final int GENERATE=52;
    public static final int GROUP=53;
    public static final int ID=54;
    public static final int IDENTIFIER=55;
    public static final int IF=56;
    public static final int IMPORT=57;
    public static final int IN=58;
    public static final int INNER=59;
    public static final int INPUT=60;
    public static final int INT=61;
    public static final int INTEGER=62;
    public static final int INTO=63;
    public static final int INVOKE=64;
    public static final int IS=65;
    public static final int JOIN=66;
    public static final int LEFT=67;
    public static final int LEFT_BRACKET=68;
    public static final int LEFT_CURLY=69;
    public static final int LEFT_PAREN=70;
    public static final int LETTER=71;
    public static final int LIMIT=72;
    public static final int LOAD=73;
    public static final int LONG=74;
    public static final int LONGINTEGER=75;
    public static final int MAP=76;
    public static final int MAPREDUCE=77;
    public static final int MINUS=78;
    public static final int ML_COMMENT=79;
    public static final int MULTILINE_QUOTEDSTRING=80;
    public static final int NOT=81;
    public static final int NULL=82;
    public static final int NUM_OP_EQ=83;
    public static final int NUM_OP_GT=84;
    public static final int NUM_OP_GTE=85;
    public static final int NUM_OP_LT=86;
    public static final int NUM_OP_LTE=87;
    public static final int NUM_OP_NE=88;
    public static final int ONSCHEMA=89;
    public static final int OR=90;
    public static final int ORDER=91;
    public static final int OTHERWISE=92;
    public static final int OUTER=93;
    public static final int OUTPUT=94;
    public static final int PARALLEL=95;
    public static final int PARTITION=96;
    public static final int PERCENT=97;
    public static final int PERIOD=98;
    public static final int PLUS=99;
    public static final int POUND=100;
    public static final int QMARK=101;
    public static final int QUOTEDSTRING=102;
    public static final int RANK=103;
    public static final int RETURNS=104;
    public static final int RIGHT=105;
    public static final int RIGHT_BRACKET=106;
    public static final int RIGHT_CURLY=107;
    public static final int RIGHT_PAREN=108;
    public static final int ROLLUP=109;
    public static final int SAMPLE=110;
    public static final int SEMI_COLON=111;
    public static final int SHIP=112;
    public static final int SL_COMMENT=113;
    public static final int SPECIALCHAR=114;
    public static final int SPLIT=115;
    public static final int STAR=116;
    public static final int STDERROR=117;
    public static final int STDIN=118;
    public static final int STDOUT=119;
    public static final int STORE=120;
    public static final int STREAM=121;
    public static final int STR_OP_EQ=122;
    public static final int STR_OP_GT=123;
    public static final int STR_OP_GTE=124;
    public static final int STR_OP_LT=125;
    public static final int STR_OP_LTE=126;
    public static final int STR_OP_MATCHES=127;
    public static final int STR_OP_NE=128;
    public static final int THEN=129;
    public static final int THROUGH=130;
    public static final int TRUE=131;
    public static final int TUPLE=132;
    public static final int UNION=133;
    public static final int USING=134;
    public static final int VOID=135;
    public static final int WHEN=136;
    public static final int WS=137;
    public static final int ANY=138;
    public static final int BAG_TYPE=139;
    public static final int BAG_TYPE_CAST=140;
    public static final int BAG_VAL=141;
    public static final int BIN_EXPR=142;
    public static final int BOOL=143;
    public static final int BOOL_COND=144;
    public static final int CASE_COND=145;
    public static final int CASE_EXPR=146;
    public static final int CAST_EXPR=147;
    public static final int COL_RANGE=148;
    public static final int EXPR_IN_PAREN=149;
    public static final int FIELD_DEF=150;
    public static final int FIELD_DEF_WITHOUT_IDENTIFIER=151;
    public static final int FOREACH_PLAN_COMPLEX=152;
    public static final int FOREACH_PLAN_SIMPLE=153;
    public static final int FUNC=154;
    public static final int FUNC_EVAL=155;
    public static final int FUNC_REF=156;
    public static final int INVOKER_FUNC_EVAL=157;
    public static final int JOIN_ITEM=158;
    public static final int KEY_VAL_PAIR=159;
    public static final int MACRO_BODY=160;
    public static final int MACRO_DEF=161;
    public static final int MACRO_INLINE=162;
    public static final int MAP_TYPE=163;
    public static final int MAP_VAL=164;
    public static final int NEG=165;
    public static final int NESTED_CMD=166;
    public static final int NESTED_CMD_ASSI=167;
    public static final int NESTED_PROJ=168;
    public static final int PARAMS=169;
    public static final int QUERY=170;
    public static final int REALIAS=171;
    public static final int RETURN_VAL=172;
    public static final int SPLIT_BRANCH=173;
    public static final int STATEMENT=174;
    public static final int TOBAG=175;
    public static final int TOMAP=176;
    public static final int TOTUPLE=177;
    public static final int TUPLE_TYPE=178;
    public static final int TUPLE_TYPE_CAST=179;
    public static final int TUPLE_VAL=180;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public QueryParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public QueryParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return QueryParser.tokenNames; }
    public String getGrammarFileName() { return "/home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g"; }


    private static Log log = LogFactory.getLog( QueryParser.class );

    private Set<String> memory = new HashSet<String>();

    // Make a deep copy of the given node
    private static Tree deepCopy(Tree tree) {
        Tree copy = tree.dupNode();
        for (int i = 0; i < tree.getChildCount(); i++) {
            Tree child = deepCopy(tree.getChild(i));
            child.setParent(copy);
            copy.addChild(child);
        }
        return copy;
    }

    @Override
    protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow)
    throws RecognitionException {
        throw new MismatchedTokenException( ttype, input );
    }

    @Override
    public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
    throws RecognitionException {
        throw e;
    }

    @Override
    public String getErrorMessage(RecognitionException e, String[] tokenNames ) {
        if( !log.isDebugEnabled() ) {
            if( e instanceof NoViableAltException ) {
                return "Syntax error, unexpected symbol at or near " + getTokenErrorDisplay( e.token );
            } else {
                return super.getErrorMessage( e, tokenNames );
            }
        }

        List stack =  getRuleInvocationStack( e, this.getClass().getName() );
        String msg = null;
        if( e instanceof NoViableAltException ) {
            NoViableAltException nvae = (NoViableAltException)e;
            msg = " no viable alt; token = " + e.token + " (decision=" + nvae.decisionNumber + " state " + nvae.stateNumber + ")" +
                " decision=<<" + nvae.grammarDecisionDescription + ">>";
        } else {
            msg =  super.getErrorMessage( e, tokenNames );
        }
        return stack + " " + msg;
    }

    @Override
    public String getTokenErrorDisplay(Token t) {
        return "'" + t.getText() + "'";
    }

    @Override
    public String getErrorHeader(RecognitionException ex) {
    	return QueryParserUtils.generateErrorHeader( ex, this.getSourceName() );
    }

    private static final Map<Integer, Integer> FUNC_TO_LITERAL = ImmutableMap.of(
        TOBAG, BAG_VAL,
        TOMAP, MAP_VAL,
        TOTUPLE, TUPLE_VAL);

    private static final Set<Integer> BOOLEAN_TOKENS = ImmutableSet.of(
        STR_OP_EQ,
        STR_OP_NE,
        STR_OP_GT,
        STR_OP_LT,
        STR_OP_GTE,
        STR_OP_LTE,
        STR_OP_MATCHES,
        AND,
        OR,
        NOT,
        NULL,
        NUM_OP_EQ,
        NUM_OP_NE,
        NUM_OP_GT,
        NUM_OP_GTE,
        NUM_OP_LT,
        NUM_OP_LTE);

    private static final Set<Integer> LITERAL_TOKENS = ImmutableSet.of(
        INTEGER,
        LONGINTEGER,
        FLOATNUMBER,
        DOUBLENUMBER,
        QUOTEDSTRING,
        NULL,
        TRUE,
        FALSE,
        MAP_VAL,
        BAG_VAL,
        TUPLE_VAL,
        PERIOD,
        POUND);



    public static class query_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:208:1: query : ( statement )* EOF -> ^( QUERY ( statement )* ) ;
    public final QueryParser.query_return query() throws RecognitionException {
        QueryParser.query_return retval = new QueryParser.query_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EOF2=null;
        QueryParser.statement_return statement1 =null;


        Object EOF2_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:208:7: ( ( statement )* EOF -> ^( QUERY ( statement )* ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:208:9: ( statement )* EOF
            {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:208:9: ( statement )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CACHE||LA1_0==COGROUP||(LA1_0 >= CROSS && LA1_0 <= CUBE)||LA1_0==DEFINE||LA1_0==DISTINCT||(LA1_0 >= ELSE && LA1_0 <= END)||(LA1_0 >= FAT_ARROW && LA1_0 <= FILTER)||LA1_0==FOREACH||LA1_0==GROUP||LA1_0==IDENTIFIER||(LA1_0 >= IMPORT && LA1_0 <= IN)||LA1_0==JOIN||LA1_0==LEFT_PAREN||(LA1_0 >= LIMIT && LA1_0 <= LOAD)||LA1_0==MAPREDUCE||LA1_0==ORDER||LA1_0==RANK||(LA1_0 >= SAMPLE && LA1_0 <= SEMI_COLON)||LA1_0==SPLIT||(LA1_0 >= STORE && LA1_0 <= STREAM)||LA1_0==THEN||LA1_0==UNION||LA1_0==WHEN) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:208:9: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_query398);
            	    statement1=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_query401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF2);


            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 208:24: -> ^( QUERY ( statement )* )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:208:27: ^( QUERY ( statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUERY, "QUERY")
                , root_1);

                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:208:36: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query"


    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:213:1: statement : ( SEMI_COLON !| general_statement SEMI_COLON !| split_clause SEMI_COLON !| inline_clause SEMI_COLON !| import_clause SEMI_COLON !| realias_clause SEMI_COLON !| rel_cache_clause SEMI_COLON !| foreach_statement );
    public final QueryParser.statement_return statement() throws RecognitionException {
        QueryParser.statement_return retval = new QueryParser.statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON3=null;
        Token SEMI_COLON5=null;
        Token SEMI_COLON7=null;
        Token SEMI_COLON9=null;
        Token SEMI_COLON11=null;
        Token SEMI_COLON13=null;
        Token SEMI_COLON15=null;
        QueryParser.general_statement_return general_statement4 =null;

        QueryParser.split_clause_return split_clause6 =null;

        QueryParser.inline_clause_return inline_clause8 =null;

        QueryParser.import_clause_return import_clause10 =null;

        QueryParser.realias_clause_return realias_clause12 =null;

        QueryParser.rel_cache_clause_return rel_cache_clause14 =null;

        QueryParser.foreach_statement_return foreach_statement16 =null;


        Object SEMI_COLON3_tree=null;
        Object SEMI_COLON5_tree=null;
        Object SEMI_COLON7_tree=null;
        Object SEMI_COLON9_tree=null;
        Object SEMI_COLON11_tree=null;
        Object SEMI_COLON13_tree=null;
        Object SEMI_COLON15_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:213:11: ( SEMI_COLON !| general_statement SEMI_COLON !| split_clause SEMI_COLON !| inline_clause SEMI_COLON !| import_clause SEMI_COLON !| realias_clause SEMI_COLON !| rel_cache_clause SEMI_COLON !| foreach_statement )
            int alt2=8;
            switch ( input.LA(1) ) {
            case SEMI_COLON:
                {
                alt2=1;
                }
                break;
            case FAT_ARROW:
                {
                int LA2_2 = input.LA(2);

                if ( (LA2_2==FOREACH) ) {
                    alt2=8;
                }
                else if ( (LA2_2==COGROUP||(LA2_2 >= CROSS && LA2_2 <= CUBE)||LA2_2==DEFINE||LA2_2==DISTINCT||LA2_2==FILTER||LA2_2==GROUP||LA2_2==JOIN||LA2_2==LEFT_PAREN||(LA2_2 >= LIMIT && LA2_2 <= LOAD)||LA2_2==MAPREDUCE||LA2_2==ORDER||LA2_2==RANK||LA2_2==SAMPLE||(LA2_2 >= STORE && LA2_2 <= STREAM)||LA2_2==UNION) ) {
                    alt2=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA2_3 = input.LA(2);

                if ( (LA2_3==EQUAL) ) {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LEFT_PAREN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case CUBE:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_14 = input.LA(5);

                            if ( (LA2_14==COGROUP||(LA2_14 >= CROSS && LA2_14 <= CUBE)||LA2_14==DEFINE||LA2_14==DISTINCT||LA2_14==FILTER||LA2_14==FOREACH||LA2_14==GROUP||LA2_14==JOIN||(LA2_14 >= LIMIT && LA2_14 <= LOAD)||LA2_14==MAPREDUCE||LA2_14==ORDER||LA2_14==RANK||LA2_14==SAMPLE||(LA2_14 >= STORE && LA2_14 <= STREAM)||LA2_14==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_14==BIGDECIMALNUMBER||LA2_14==BIGINTEGERNUMBER||LA2_14==DOLLARVAR||LA2_14==DOUBLENUMBER||LA2_14==IDENTIFIER||LA2_14==INTEGER||LA2_14==QUOTEDSTRING||LA2_14==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 14, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 16, input);

                            throw nvae;

                        }

                        }
                        break;
                    case RANK:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_15 = input.LA(5);

                            if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 15, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 17, input);

                            throw nvae;

                        }

                        }
                        break;
                    case IDENTIFIER:
                        {
                        int LA2_18 = input.LA(4);

                        if ( (LA2_18==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_18==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 18, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ELSE:
                    case END:
                    case IN:
                    case THEN:
                    case WHEN:
                        {
                        int LA2_19 = input.LA(4);

                        if ( (LA2_19==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_19==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=8;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 12, input);

                        throw nvae;

                    }

                }
                else if ( (LA2_3==COMMA||LA2_3==LEFT_PAREN) ) {
                    alt2=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 3, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
                {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LEFT_PAREN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case CUBE:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_14 = input.LA(5);

                            if ( (LA2_14==COGROUP||(LA2_14 >= CROSS && LA2_14 <= CUBE)||LA2_14==DEFINE||LA2_14==DISTINCT||LA2_14==FILTER||LA2_14==FOREACH||LA2_14==GROUP||LA2_14==JOIN||(LA2_14 >= LIMIT && LA2_14 <= LOAD)||LA2_14==MAPREDUCE||LA2_14==ORDER||LA2_14==RANK||LA2_14==SAMPLE||(LA2_14 >= STORE && LA2_14 <= STREAM)||LA2_14==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_14==BIGDECIMALNUMBER||LA2_14==BIGINTEGERNUMBER||LA2_14==DOLLARVAR||LA2_14==DOUBLENUMBER||LA2_14==IDENTIFIER||LA2_14==INTEGER||LA2_14==QUOTEDSTRING||LA2_14==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 14, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 16, input);

                            throw nvae;

                        }

                        }
                        break;
                    case RANK:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_15 = input.LA(5);

                            if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 15, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 17, input);

                            throw nvae;

                        }

                        }
                        break;
                    case IDENTIFIER:
                        {
                        int LA2_18 = input.LA(4);

                        if ( (LA2_18==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_18==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 18, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ELSE:
                    case END:
                    case IN:
                    case THEN:
                    case WHEN:
                        {
                        int LA2_19 = input.LA(4);

                        if ( (LA2_19==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_19==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=8;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 12, input);

                        throw nvae;

                    }

                    }
                    break;
                case ARROBA:
                case CUBE:
                case ELSE:
                case END:
                case IDENTIFIER:
                case IN:
                case RANK:
                case THEN:
                case WHEN:
                    {
                    alt2=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    int LA2_14 = input.LA(3);

                    if ( (LA2_14==COGROUP||(LA2_14 >= CROSS && LA2_14 <= CUBE)||LA2_14==DEFINE||LA2_14==DISTINCT||LA2_14==FILTER||LA2_14==FOREACH||LA2_14==GROUP||LA2_14==JOIN||(LA2_14 >= LIMIT && LA2_14 <= LOAD)||LA2_14==MAPREDUCE||LA2_14==ORDER||LA2_14==RANK||LA2_14==SAMPLE||(LA2_14 >= STORE && LA2_14 <= STREAM)||LA2_14==UNION) ) {
                        alt2=2;
                    }
                    else if ( (LA2_14==BIGDECIMALNUMBER||LA2_14==BIGINTEGERNUMBER||LA2_14==DOLLARVAR||LA2_14==DOUBLENUMBER||LA2_14==IDENTIFIER||LA2_14==INTEGER||LA2_14==QUOTEDSTRING||LA2_14==RIGHT_PAREN) ) {
                        alt2=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 14, input);

                        throw nvae;

                    }
                    }
                    break;
                case COMMA:
                    {
                    alt2=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 4, input);

                    throw nvae;

                }

                }
                break;
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DISTINCT:
            case FILTER:
            case GROUP:
            case JOIN:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case MAPREDUCE:
            case ORDER:
            case SAMPLE:
            case STORE:
            case STREAM:
            case UNION:
                {
                alt2=2;
                }
                break;
            case RANK:
                {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LEFT_PAREN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case CUBE:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_14 = input.LA(5);

                            if ( (LA2_14==COGROUP||(LA2_14 >= CROSS && LA2_14 <= CUBE)||LA2_14==DEFINE||LA2_14==DISTINCT||LA2_14==FILTER||LA2_14==FOREACH||LA2_14==GROUP||LA2_14==JOIN||(LA2_14 >= LIMIT && LA2_14 <= LOAD)||LA2_14==MAPREDUCE||LA2_14==ORDER||LA2_14==RANK||LA2_14==SAMPLE||(LA2_14 >= STORE && LA2_14 <= STREAM)||LA2_14==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_14==BIGDECIMALNUMBER||LA2_14==BIGINTEGERNUMBER||LA2_14==DOLLARVAR||LA2_14==DOUBLENUMBER||LA2_14==IDENTIFIER||LA2_14==INTEGER||LA2_14==QUOTEDSTRING||LA2_14==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 14, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 16, input);

                            throw nvae;

                        }

                        }
                        break;
                    case RANK:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_15 = input.LA(5);

                            if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 15, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 17, input);

                            throw nvae;

                        }

                        }
                        break;
                    case IDENTIFIER:
                        {
                        int LA2_18 = input.LA(4);

                        if ( (LA2_18==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_18==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 18, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ELSE:
                    case END:
                    case IN:
                    case THEN:
                    case WHEN:
                        {
                        int LA2_19 = input.LA(4);

                        if ( (LA2_19==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_19==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=8;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 12, input);

                        throw nvae;

                    }

                    }
                    break;
                case ARROBA:
                case CUBE:
                case ELSE:
                case END:
                case IDENTIFIER:
                case IN:
                case RANK:
                case THEN:
                case WHEN:
                    {
                    alt2=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    int LA2_15 = input.LA(3);

                    if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                        alt2=2;
                    }
                    else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                        alt2=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 15, input);

                        throw nvae;

                    }
                    }
                    break;
                case COMMA:
                    {
                    alt2=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 6, input);

                    throw nvae;

                }

                }
                break;
            case ELSE:
            case END:
            case IN:
            case THEN:
            case WHEN:
                {
                int LA2_7 = input.LA(2);

                if ( (LA2_7==EQUAL) ) {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LEFT_PAREN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case CUBE:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_14 = input.LA(5);

                            if ( (LA2_14==COGROUP||(LA2_14 >= CROSS && LA2_14 <= CUBE)||LA2_14==DEFINE||LA2_14==DISTINCT||LA2_14==FILTER||LA2_14==FOREACH||LA2_14==GROUP||LA2_14==JOIN||(LA2_14 >= LIMIT && LA2_14 <= LOAD)||LA2_14==MAPREDUCE||LA2_14==ORDER||LA2_14==RANK||LA2_14==SAMPLE||(LA2_14 >= STORE && LA2_14 <= STREAM)||LA2_14==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_14==BIGDECIMALNUMBER||LA2_14==BIGINTEGERNUMBER||LA2_14==DOLLARVAR||LA2_14==DOUBLENUMBER||LA2_14==IDENTIFIER||LA2_14==INTEGER||LA2_14==QUOTEDSTRING||LA2_14==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 14, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 16, input);

                            throw nvae;

                        }

                        }
                        break;
                    case RANK:
                        {
                        switch ( input.LA(4) ) {
                        case ARROBA:
                        case CUBE:
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case RANK:
                        case THEN:
                        case WHEN:
                            {
                            alt2=2;
                            }
                            break;
                        case LEFT_PAREN:
                            {
                            int LA2_15 = input.LA(5);

                            if ( (LA2_15==COGROUP||(LA2_15 >= CROSS && LA2_15 <= CUBE)||LA2_15==DEFINE||LA2_15==DISTINCT||LA2_15==FILTER||LA2_15==FOREACH||LA2_15==GROUP||LA2_15==JOIN||(LA2_15 >= LIMIT && LA2_15 <= LOAD)||LA2_15==MAPREDUCE||LA2_15==ORDER||LA2_15==RANK||LA2_15==SAMPLE||(LA2_15 >= STORE && LA2_15 <= STREAM)||LA2_15==UNION) ) {
                                alt2=2;
                            }
                            else if ( (LA2_15==BIGDECIMALNUMBER||LA2_15==BIGINTEGERNUMBER||LA2_15==DOLLARVAR||LA2_15==DOUBLENUMBER||LA2_15==IDENTIFIER||LA2_15==INTEGER||LA2_15==QUOTEDSTRING||LA2_15==RIGHT_PAREN) ) {
                                alt2=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 15, input);

                                throw nvae;

                            }
                            }
                            break;
                        case SEMI_COLON:
                            {
                            alt2=6;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 17, input);

                            throw nvae;

                        }

                        }
                        break;
                    case IDENTIFIER:
                        {
                        int LA2_18 = input.LA(4);

                        if ( (LA2_18==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_18==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 18, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ELSE:
                    case END:
                    case IN:
                    case THEN:
                    case WHEN:
                        {
                        int LA2_19 = input.LA(4);

                        if ( (LA2_19==LEFT_PAREN) ) {
                            alt2=4;
                        }
                        else if ( (LA2_19==SEMI_COLON) ) {
                            alt2=6;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=8;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 12, input);

                        throw nvae;

                    }

                }
                else if ( (LA2_7==COMMA||LA2_7==LEFT_PAREN) ) {
                    alt2=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 7, input);

                    throw nvae;

                }
                }
                break;
            case SPLIT:
                {
                alt2=3;
                }
                break;
            case IMPORT:
                {
                alt2=5;
                }
                break;
            case CACHE:
                {
                alt2=7;
                }
                break;
            case FOREACH:
                {
                alt2=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }

            switch (alt2) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:213:13: SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMI_COLON3=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement423); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:214:13: general_statement SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_general_statement_in_statement438);
                    general_statement4=general_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, general_statement4.getTree());

                    SEMI_COLON5=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement440); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:215:13: split_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_split_clause_in_statement455);
                    split_clause6=split_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, split_clause6.getTree());

                    SEMI_COLON7=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement457); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:216:13: inline_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_clause_in_statement472);
                    inline_clause8=inline_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inline_clause8.getTree());

                    SEMI_COLON9=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement474); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:217:13: import_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_clause_in_statement489);
                    import_clause10=import_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_clause10.getTree());

                    SEMI_COLON11=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement491); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:218:13: realias_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_realias_clause_in_statement506);
                    realias_clause12=realias_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, realias_clause12.getTree());

                    SEMI_COLON13=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement508); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:219:13: rel_cache_clause SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_cache_clause_in_statement523);
                    rel_cache_clause14=rel_cache_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_cache_clause14.getTree());

                    SEMI_COLON15=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement525); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:223:13: foreach_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_foreach_statement_in_statement573);
                    foreach_statement16=foreach_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_statement16.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class nested_op_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:226:1: nested_op_clause : ( LEFT_PAREN ! op_clause ( parallel_clause )? RIGHT_PAREN !| LEFT_PAREN FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? ) ) RIGHT_PAREN -> ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? );
    public final QueryParser.nested_op_clause_return nested_op_clause() throws RecognitionException {
        QueryParser.nested_op_clause_return retval = new QueryParser.nested_op_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN17=null;
        Token RIGHT_PAREN20=null;
        Token LEFT_PAREN21=null;
        Token FOREACH22=null;
        Token RIGHT_PAREN27=null;
        QueryParser.op_clause_return op_clause18 =null;

        QueryParser.parallel_clause_return parallel_clause19 =null;

        QueryParser.rel_return rel23 =null;

        QueryParser.foreach_plan_complex_return foreach_plan_complex24 =null;

        QueryParser.foreach_plan_simple_return foreach_plan_simple25 =null;

        QueryParser.parallel_clause_return parallel_clause26 =null;


        Object LEFT_PAREN17_tree=null;
        Object RIGHT_PAREN20_tree=null;
        Object LEFT_PAREN21_tree=null;
        Object FOREACH22_tree=null;
        Object RIGHT_PAREN27_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_FOREACH=new RewriteRuleTokenStream(adaptor,"token FOREACH");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_foreach_plan_simple=new RewriteRuleSubtreeStream(adaptor,"rule foreach_plan_simple");
        RewriteRuleSubtreeStream stream_foreach_plan_complex=new RewriteRuleSubtreeStream(adaptor,"rule foreach_plan_complex");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:226:18: ( LEFT_PAREN ! op_clause ( parallel_clause )? RIGHT_PAREN !| LEFT_PAREN FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? ) ) RIGHT_PAREN -> ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LEFT_PAREN) ) {
                int LA6_1 = input.LA(2);

                if ( (LA6_1==FOREACH) ) {
                    alt6=2;
                }
                else if ( (LA6_1==COGROUP||(LA6_1 >= CROSS && LA6_1 <= CUBE)||LA6_1==DEFINE||LA6_1==DISTINCT||LA6_1==FILTER||LA6_1==GROUP||LA6_1==JOIN||(LA6_1 >= LIMIT && LA6_1 <= LOAD)||LA6_1==MAPREDUCE||LA6_1==ORDER||LA6_1==RANK||LA6_1==SAMPLE||(LA6_1 >= STORE && LA6_1 <= STREAM)||LA6_1==UNION) ) {
                    alt6=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:226:20: LEFT_PAREN ! op_clause ( parallel_clause )? RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN17=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_nested_op_clause582); if (state.failed) return retval;

                    pushFollow(FOLLOW_op_clause_in_nested_op_clause585);
                    op_clause18=op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_clause18.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:226:42: ( parallel_clause )?
                    int alt3=2;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==PARALLEL) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:226:42: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_nested_op_clause587);
                            parallel_clause19=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, parallel_clause19.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN20=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_nested_op_clause590); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:227:20: LEFT_PAREN FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? ) ) RIGHT_PAREN
                    {
                    LEFT_PAREN21=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_nested_op_clause612); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN21);


                    FOREACH22=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_nested_op_clause614); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOREACH.add(FOREACH22);


                    pushFollow(FOLLOW_rel_in_nested_op_clause616);
                    rel23=rel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel.add(rel23.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:227:43: ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? ) )
                    int alt5=2;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==LEFT_CURLY) ) {
                        alt5=1;
                    }
                    else if ( (LA5_0==GENERATE) ) {
                        alt5=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 5, 0, input);

                        throw nvae;

                    }
                    switch (alt5) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:227:45: foreach_plan_complex
                            {
                            pushFollow(FOLLOW_foreach_plan_complex_in_nested_op_clause620);
                            foreach_plan_complex24=foreach_plan_complex();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_complex.add(foreach_plan_complex24.getTree());

                            }
                            break;
                        case 2 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:227:68: ( foreach_plan_simple ( parallel_clause )? )
                            {
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:227:68: ( foreach_plan_simple ( parallel_clause )? )
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:227:70: foreach_plan_simple ( parallel_clause )?
                            {
                            pushFollow(FOLLOW_foreach_plan_simple_in_nested_op_clause626);
                            foreach_plan_simple25=foreach_plan_simple();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_simple.add(foreach_plan_simple25.getTree());

                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:227:90: ( parallel_clause )?
                            int alt4=2;
                            int LA4_0 = input.LA(1);

                            if ( (LA4_0==PARALLEL) ) {
                                alt4=1;
                            }
                            switch (alt4) {
                                case 1 :
                                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:227:90: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_nested_op_clause628);
                                    parallel_clause26=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause26.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }


                    RIGHT_PAREN27=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_nested_op_clause635); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN27);


                    // AST REWRITE
                    // elements: foreach_plan_complex, FOREACH, parallel_clause, rel, foreach_plan_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 228:21: -> ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )?
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:228:24: ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_FOREACH.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_rel.nextTree());

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:228:39: ( foreach_plan_complex )?
                        if ( stream_foreach_plan_complex.hasNext() ) {
                            adaptor.addChild(root_1, stream_foreach_plan_complex.nextTree());

                        }
                        stream_foreach_plan_complex.reset();

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:228:61: ( foreach_plan_simple )?
                        if ( stream_foreach_plan_simple.hasNext() ) {
                            adaptor.addChild(root_1, stream_foreach_plan_simple.nextTree());

                        }
                        stream_foreach_plan_simple.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:228:84: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_0, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_clause"


    public static class general_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "general_statement"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:1: general_statement : ( FAT_ARROW ( ( op_clause ( parallel_clause )? ) | nested_op_clause ) -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ( op_clause )? ( parallel_clause )? ( nested_op_clause )? ) | ( identifier_plus EQUAL )? ( ( op_clause ( parallel_clause )? ) | nested_op_clause ) -> ^( STATEMENT ( identifier_plus )? ( op_clause )? ( parallel_clause )? ( nested_op_clause )? ) );
    public final QueryParser.general_statement_return general_statement() throws RecognitionException {
        QueryParser.general_statement_return retval = new QueryParser.general_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FAT_ARROW28=null;
        Token EQUAL33=null;
        QueryParser.op_clause_return op_clause29 =null;

        QueryParser.parallel_clause_return parallel_clause30 =null;

        QueryParser.nested_op_clause_return nested_op_clause31 =null;

        QueryParser.identifier_plus_return identifier_plus32 =null;

        QueryParser.op_clause_return op_clause34 =null;

        QueryParser.parallel_clause_return parallel_clause35 =null;

        QueryParser.nested_op_clause_return nested_op_clause36 =null;


        Object FAT_ARROW28_tree=null;
        Object EQUAL33_tree=null;
        RewriteRuleTokenStream stream_FAT_ARROW=new RewriteRuleTokenStream(adaptor,"token FAT_ARROW");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_op_clause=new RewriteRuleSubtreeStream(adaptor,"rule op_clause");
        RewriteRuleSubtreeStream stream_nested_op_clause=new RewriteRuleSubtreeStream(adaptor,"rule nested_op_clause");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:19: ( FAT_ARROW ( ( op_clause ( parallel_clause )? ) | nested_op_clause ) -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ( op_clause )? ( parallel_clause )? ( nested_op_clause )? ) | ( identifier_plus EQUAL )? ( ( op_clause ( parallel_clause )? ) | nested_op_clause ) -> ^( STATEMENT ( identifier_plus )? ( op_clause )? ( parallel_clause )? ( nested_op_clause )? ) )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==FAT_ARROW) ) {
                alt12=1;
            }
            else if ( (LA12_0==COGROUP||(LA12_0 >= CROSS && LA12_0 <= CUBE)||LA12_0==DEFINE||LA12_0==DISTINCT||(LA12_0 >= ELSE && LA12_0 <= END)||LA12_0==FILTER||LA12_0==GROUP||LA12_0==IDENTIFIER||LA12_0==IN||LA12_0==JOIN||LA12_0==LEFT_PAREN||(LA12_0 >= LIMIT && LA12_0 <= LOAD)||LA12_0==MAPREDUCE||LA12_0==ORDER||LA12_0==RANK||LA12_0==SAMPLE||(LA12_0 >= STORE && LA12_0 <= STREAM)||LA12_0==THEN||LA12_0==UNION||LA12_0==WHEN) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:21: FAT_ARROW ( ( op_clause ( parallel_clause )? ) | nested_op_clause )
                    {
                    FAT_ARROW28=(Token)match(input,FAT_ARROW,FOLLOW_FAT_ARROW_in_general_statement683); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FAT_ARROW.add(FAT_ARROW28);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:31: ( ( op_clause ( parallel_clause )? ) | nested_op_clause )
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==COGROUP||(LA8_0 >= CROSS && LA8_0 <= CUBE)||LA8_0==DEFINE||LA8_0==DISTINCT||LA8_0==FILTER||LA8_0==GROUP||LA8_0==JOIN||(LA8_0 >= LIMIT && LA8_0 <= LOAD)||LA8_0==MAPREDUCE||LA8_0==ORDER||LA8_0==RANK||LA8_0==SAMPLE||(LA8_0 >= STORE && LA8_0 <= STREAM)||LA8_0==UNION) ) {
                        alt8=1;
                    }
                    else if ( (LA8_0==LEFT_PAREN) ) {
                        alt8=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 8, 0, input);

                        throw nvae;

                    }
                    switch (alt8) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:33: ( op_clause ( parallel_clause )? )
                            {
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:33: ( op_clause ( parallel_clause )? )
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:35: op_clause ( parallel_clause )?
                            {
                            pushFollow(FOLLOW_op_clause_in_general_statement689);
                            op_clause29=op_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_clause.add(op_clause29.getTree());

                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:45: ( parallel_clause )?
                            int alt7=2;
                            int LA7_0 = input.LA(1);

                            if ( (LA7_0==PARALLEL) ) {
                                alt7=1;
                            }
                            switch (alt7) {
                                case 1 :
                                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:45: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_general_statement691);
                                    parallel_clause30=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause30.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:66: nested_op_clause
                            {
                            pushFollow(FOLLOW_nested_op_clause_in_general_statement698);
                            nested_op_clause31=nested_op_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nested_op_clause.add(nested_op_clause31.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: nested_op_clause, parallel_clause, op_clause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 231:85: -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ( op_clause )? ( parallel_clause )? ( nested_op_clause )? )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:88: ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ( op_clause )? ( parallel_clause )? ( nested_op_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATEMENT, "STATEMENT")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(IDENTIFIER, "____RESERVED____")
                        );

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:132: ( op_clause )?
                        if ( stream_op_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_clause.nextTree());

                        }
                        stream_op_clause.reset();

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:143: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:231:160: ( nested_op_clause )?
                        if ( stream_nested_op_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_nested_op_clause.nextTree());

                        }
                        stream_nested_op_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:21: ( identifier_plus EQUAL )? ( ( op_clause ( parallel_clause )? ) | nested_op_clause )
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:21: ( identifier_plus EQUAL )?
                    int alt9=2;
                    switch ( input.LA(1) ) {
                        case ELSE:
                        case END:
                        case IDENTIFIER:
                        case IN:
                        case THEN:
                        case WHEN:
                            {
                            alt9=1;
                            }
                            break;
                        case CUBE:
                            {
                            int LA9_2 = input.LA(2);

                            if ( (LA9_2==EQUAL) ) {
                                alt9=1;
                            }
                            }
                            break;
                        case RANK:
                            {
                            int LA9_4 = input.LA(2);

                            if ( (LA9_4==EQUAL) ) {
                                alt9=1;
                            }
                            }
                            break;
                    }

                    switch (alt9) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:23: identifier_plus EQUAL
                            {
                            pushFollow(FOLLOW_identifier_plus_in_general_statement744);
                            identifier_plus32=identifier_plus();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus32.getTree());

                            EQUAL33=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_general_statement746); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL33);


                            }
                            break;

                    }


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:48: ( ( op_clause ( parallel_clause )? ) | nested_op_clause )
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==COGROUP||(LA11_0 >= CROSS && LA11_0 <= CUBE)||LA11_0==DEFINE||LA11_0==DISTINCT||LA11_0==FILTER||LA11_0==GROUP||LA11_0==JOIN||(LA11_0 >= LIMIT && LA11_0 <= LOAD)||LA11_0==MAPREDUCE||LA11_0==ORDER||LA11_0==RANK||LA11_0==SAMPLE||(LA11_0 >= STORE && LA11_0 <= STREAM)||LA11_0==UNION) ) {
                        alt11=1;
                    }
                    else if ( (LA11_0==LEFT_PAREN) ) {
                        alt11=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 11, 0, input);

                        throw nvae;

                    }
                    switch (alt11) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:50: ( op_clause ( parallel_clause )? )
                            {
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:50: ( op_clause ( parallel_clause )? )
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:52: op_clause ( parallel_clause )?
                            {
                            pushFollow(FOLLOW_op_clause_in_general_statement755);
                            op_clause34=op_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_clause.add(op_clause34.getTree());

                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:62: ( parallel_clause )?
                            int alt10=2;
                            int LA10_0 = input.LA(1);

                            if ( (LA10_0==PARALLEL) ) {
                                alt10=1;
                            }
                            switch (alt10) {
                                case 1 :
                                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:62: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_general_statement757);
                                    parallel_clause35=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause35.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:83: nested_op_clause
                            {
                            pushFollow(FOLLOW_nested_op_clause_in_general_statement764);
                            nested_op_clause36=nested_op_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nested_op_clause.add(nested_op_clause36.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: parallel_clause, identifier_plus, op_clause, nested_op_clause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 232:102: -> ^( STATEMENT ( identifier_plus )? ( op_clause )? ( parallel_clause )? ( nested_op_clause )? )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:105: ^( STATEMENT ( identifier_plus )? ( op_clause )? ( parallel_clause )? ( nested_op_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATEMENT, "STATEMENT")
                        , root_1);

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:118: ( identifier_plus )?
                        if ( stream_identifier_plus.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        }
                        stream_identifier_plus.reset();

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:135: ( op_clause )?
                        if ( stream_op_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_clause.nextTree());

                        }
                        stream_op_clause.reset();

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:146: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:232:163: ( nested_op_clause )?
                        if ( stream_nested_op_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_nested_op_clause.nextTree());

                        }
                        stream_nested_op_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "general_statement"


    public static class foreach_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_statement"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:239:1: foreach_statement : ( FAT_ARROW FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) ) -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? ) | ( identifier_plus EQUAL )? FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) ) -> ^( STATEMENT ( identifier_plus )? ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? ) );
    public final QueryParser.foreach_statement_return foreach_statement() throws RecognitionException {
        QueryParser.foreach_statement_return retval = new QueryParser.foreach_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FAT_ARROW37=null;
        Token FOREACH38=null;
        Token SEMI_COLON43=null;
        Token EQUAL45=null;
        Token FOREACH46=null;
        Token SEMI_COLON51=null;
        QueryParser.rel_return rel39 =null;

        QueryParser.foreach_plan_complex_return foreach_plan_complex40 =null;

        QueryParser.foreach_plan_simple_return foreach_plan_simple41 =null;

        QueryParser.parallel_clause_return parallel_clause42 =null;

        QueryParser.identifier_plus_return identifier_plus44 =null;

        QueryParser.rel_return rel47 =null;

        QueryParser.foreach_plan_complex_return foreach_plan_complex48 =null;

        QueryParser.foreach_plan_simple_return foreach_plan_simple49 =null;

        QueryParser.parallel_clause_return parallel_clause50 =null;


        Object FAT_ARROW37_tree=null;
        Object FOREACH38_tree=null;
        Object SEMI_COLON43_tree=null;
        Object EQUAL45_tree=null;
        Object FOREACH46_tree=null;
        Object SEMI_COLON51_tree=null;
        RewriteRuleTokenStream stream_FOREACH=new RewriteRuleTokenStream(adaptor,"token FOREACH");
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_FAT_ARROW=new RewriteRuleTokenStream(adaptor,"token FAT_ARROW");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_foreach_plan_simple=new RewriteRuleSubtreeStream(adaptor,"rule foreach_plan_simple");
        RewriteRuleSubtreeStream stream_foreach_plan_complex=new RewriteRuleSubtreeStream(adaptor,"rule foreach_plan_complex");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:239:19: ( FAT_ARROW FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) ) -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? ) | ( identifier_plus EQUAL )? FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) ) -> ^( STATEMENT ( identifier_plus )? ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? ) )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==FAT_ARROW) ) {
                alt18=1;
            }
            else if ( (LA18_0==CUBE||(LA18_0 >= ELSE && LA18_0 <= END)||LA18_0==FOREACH||LA18_0==IDENTIFIER||LA18_0==IN||LA18_0==RANK||LA18_0==THEN||LA18_0==WHEN) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:239:21: FAT_ARROW FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) )
                    {
                    FAT_ARROW37=(Token)match(input,FAT_ARROW,FOLLOW_FAT_ARROW_in_foreach_statement799); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FAT_ARROW.add(FAT_ARROW37);


                    FOREACH38=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_statement801); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOREACH.add(FOREACH38);


                    pushFollow(FOLLOW_rel_in_foreach_statement803);
                    rel39=rel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel.add(rel39.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:239:43: ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) )
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0==LEFT_CURLY) ) {
                        alt14=1;
                    }
                    else if ( (LA14_0==GENERATE) ) {
                        alt14=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 14, 0, input);

                        throw nvae;

                    }
                    switch (alt14) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:239:45: foreach_plan_complex
                            {
                            pushFollow(FOLLOW_foreach_plan_complex_in_foreach_statement807);
                            foreach_plan_complex40=foreach_plan_complex();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_complex.add(foreach_plan_complex40.getTree());

                            }
                            break;
                        case 2 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:239:68: ( foreach_plan_simple ( parallel_clause )? SEMI_COLON )
                            {
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:239:68: ( foreach_plan_simple ( parallel_clause )? SEMI_COLON )
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:239:70: foreach_plan_simple ( parallel_clause )? SEMI_COLON
                            {
                            pushFollow(FOLLOW_foreach_plan_simple_in_foreach_statement813);
                            foreach_plan_simple41=foreach_plan_simple();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_simple.add(foreach_plan_simple41.getTree());

                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:239:90: ( parallel_clause )?
                            int alt13=2;
                            int LA13_0 = input.LA(1);

                            if ( (LA13_0==PARALLEL) ) {
                                alt13=1;
                            }
                            switch (alt13) {
                                case 1 :
                                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:239:90: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_foreach_statement815);
                                    parallel_clause42=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause42.getTree());

                                    }
                                    break;

                            }


                            SEMI_COLON43=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_foreach_statement818); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON43);


                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: foreach_plan_simple, rel, foreach_plan_complex, FOREACH, parallel_clause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 240:5: -> ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:240:8: ^( STATEMENT IDENTIFIER[\"____RESERVED____\"] ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATEMENT, "STATEMENT")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(IDENTIFIER, "____RESERVED____")
                        );

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:240:52: ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        stream_FOREACH.nextNode()
                        , root_2);

                        adaptor.addChild(root_2, stream_rel.nextTree());

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:240:67: ( foreach_plan_complex )?
                        if ( stream_foreach_plan_complex.hasNext() ) {
                            adaptor.addChild(root_2, stream_foreach_plan_complex.nextTree());

                        }
                        stream_foreach_plan_complex.reset();

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:240:89: ( foreach_plan_simple )?
                        if ( stream_foreach_plan_simple.hasNext() ) {
                            adaptor.addChild(root_2, stream_foreach_plan_simple.nextTree());

                        }
                        stream_foreach_plan_simple.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:240:112: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:241:21: ( identifier_plus EQUAL )? FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) )
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:241:21: ( identifier_plus EQUAL )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==CUBE||(LA15_0 >= ELSE && LA15_0 <= END)||LA15_0==IDENTIFIER||LA15_0==IN||LA15_0==RANK||LA15_0==THEN||LA15_0==WHEN) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:241:23: identifier_plus EQUAL
                            {
                            pushFollow(FOLLOW_identifier_plus_in_foreach_statement878);
                            identifier_plus44=identifier_plus();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus44.getTree());

                            EQUAL45=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_foreach_statement880); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL45);


                            }
                            break;

                    }


                    FOREACH46=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_statement885); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOREACH.add(FOREACH46);


                    pushFollow(FOLLOW_rel_in_foreach_statement887);
                    rel47=rel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel.add(rel47.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:241:60: ( foreach_plan_complex | ( foreach_plan_simple ( parallel_clause )? SEMI_COLON ) )
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==LEFT_CURLY) ) {
                        alt17=1;
                    }
                    else if ( (LA17_0==GENERATE) ) {
                        alt17=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 17, 0, input);

                        throw nvae;

                    }
                    switch (alt17) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:241:62: foreach_plan_complex
                            {
                            pushFollow(FOLLOW_foreach_plan_complex_in_foreach_statement891);
                            foreach_plan_complex48=foreach_plan_complex();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_complex.add(foreach_plan_complex48.getTree());

                            }
                            break;
                        case 2 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:241:85: ( foreach_plan_simple ( parallel_clause )? SEMI_COLON )
                            {
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:241:85: ( foreach_plan_simple ( parallel_clause )? SEMI_COLON )
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:241:87: foreach_plan_simple ( parallel_clause )? SEMI_COLON
                            {
                            pushFollow(FOLLOW_foreach_plan_simple_in_foreach_statement897);
                            foreach_plan_simple49=foreach_plan_simple();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_foreach_plan_simple.add(foreach_plan_simple49.getTree());

                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:241:107: ( parallel_clause )?
                            int alt16=2;
                            int LA16_0 = input.LA(1);

                            if ( (LA16_0==PARALLEL) ) {
                                alt16=1;
                            }
                            switch (alt16) {
                                case 1 :
                                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:241:107: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_foreach_statement899);
                                    parallel_clause50=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause50.getTree());

                                    }
                                    break;

                            }


                            SEMI_COLON51=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_foreach_statement902); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON51);


                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: foreach_plan_simple, rel, FOREACH, foreach_plan_complex, parallel_clause, identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 242:5: -> ^( STATEMENT ( identifier_plus )? ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:242:8: ^( STATEMENT ( identifier_plus )? ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? ) ( parallel_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATEMENT, "STATEMENT")
                        , root_1);

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:242:21: ( identifier_plus )?
                        if ( stream_identifier_plus.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        }
                        stream_identifier_plus.reset();

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:242:38: ^( FOREACH rel ( foreach_plan_complex )? ( foreach_plan_simple )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        stream_FOREACH.nextNode()
                        , root_2);

                        adaptor.addChild(root_2, stream_rel.nextTree());

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:242:53: ( foreach_plan_complex )?
                        if ( stream_foreach_plan_complex.hasNext() ) {
                            adaptor.addChild(root_2, stream_foreach_plan_complex.nextTree());

                        }
                        stream_foreach_plan_complex.reset();

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:242:75: ( foreach_plan_simple )?
                        if ( stream_foreach_plan_simple.hasNext() ) {
                            adaptor.addChild(root_2, stream_foreach_plan_simple.nextTree());

                        }
                        stream_foreach_plan_simple.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:242:98: ( parallel_clause )?
                        if ( stream_parallel_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                        }
                        stream_parallel_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_statement"


    public static class foreach_plan_complex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan_complex"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:245:1: foreach_plan_complex : LEFT_CURLY nested_blk RIGHT_CURLY -> ^( FOREACH_PLAN_COMPLEX nested_blk ) ;
    public final QueryParser.foreach_plan_complex_return foreach_plan_complex() throws RecognitionException {
        QueryParser.foreach_plan_complex_return retval = new QueryParser.foreach_plan_complex_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY52=null;
        Token RIGHT_CURLY54=null;
        QueryParser.nested_blk_return nested_blk53 =null;


        Object LEFT_CURLY52_tree=null;
        Object RIGHT_CURLY54_tree=null;
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_nested_blk=new RewriteRuleSubtreeStream(adaptor,"rule nested_blk");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:245:22: ( LEFT_CURLY nested_blk RIGHT_CURLY -> ^( FOREACH_PLAN_COMPLEX nested_blk ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:245:24: LEFT_CURLY nested_blk RIGHT_CURLY
            {
            LEFT_CURLY52=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_foreach_plan_complex947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY52);


            pushFollow(FOLLOW_nested_blk_in_foreach_plan_complex949);
            nested_blk53=nested_blk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_blk.add(nested_blk53.getTree());

            RIGHT_CURLY54=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_foreach_plan_complex951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY54);


            // AST REWRITE
            // elements: nested_blk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 245:58: -> ^( FOREACH_PLAN_COMPLEX nested_blk )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:245:61: ^( FOREACH_PLAN_COMPLEX nested_blk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOREACH_PLAN_COMPLEX, "FOREACH_PLAN_COMPLEX")
                , root_1);

                adaptor.addChild(root_1, stream_nested_blk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan_complex"


    public static class foreach_plan_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan_simple"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:248:1: foreach_plan_simple : GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( FOREACH_PLAN_SIMPLE ^( GENERATE ( flatten_generated_item )+ ) ) ;
    public final QueryParser.foreach_plan_simple_return foreach_plan_simple() throws RecognitionException {
        QueryParser.foreach_plan_simple_return retval = new QueryParser.foreach_plan_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token GENERATE55=null;
        Token COMMA57=null;
        QueryParser.flatten_generated_item_return flatten_generated_item56 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item58 =null;


        Object GENERATE55_tree=null;
        Object COMMA57_tree=null;
        RewriteRuleTokenStream stream_GENERATE=new RewriteRuleTokenStream(adaptor,"token GENERATE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_flatten_generated_item=new RewriteRuleSubtreeStream(adaptor,"rule flatten_generated_item");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:248:21: ( GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( FOREACH_PLAN_SIMPLE ^( GENERATE ( flatten_generated_item )+ ) ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:248:23: GENERATE flatten_generated_item ( COMMA flatten_generated_item )*
            {
            GENERATE55=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_foreach_plan_simple970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GENERATE.add(GENERATE55);


            pushFollow(FOLLOW_flatten_generated_item_in_foreach_plan_simple972);
            flatten_generated_item56=flatten_generated_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item56.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:248:55: ( COMMA flatten_generated_item )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==COMMA) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:248:57: COMMA flatten_generated_item
            	    {
            	    COMMA57=(Token)match(input,COMMA,FOLLOW_COMMA_in_foreach_plan_simple976); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA57);


            	    pushFollow(FOLLOW_flatten_generated_item_in_foreach_plan_simple978);
            	    flatten_generated_item58=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item58.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            // AST REWRITE
            // elements: GENERATE, flatten_generated_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 248:89: -> ^( FOREACH_PLAN_SIMPLE ^( GENERATE ( flatten_generated_item )+ ) )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:248:92: ^( FOREACH_PLAN_SIMPLE ^( GENERATE ( flatten_generated_item )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOREACH_PLAN_SIMPLE, "FOREACH_PLAN_SIMPLE")
                , root_1);

                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:248:115: ^( GENERATE ( flatten_generated_item )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                stream_GENERATE.nextNode()
                , root_2);

                if ( !(stream_flatten_generated_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_flatten_generated_item.hasNext() ) {
                    adaptor.addChild(root_2, stream_flatten_generated_item.nextTree());

                }
                stream_flatten_generated_item.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan_simple"


    public static class macro_content_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_content"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:253:1: macro_content : LEFT_CURLY ( macro_content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY ;
    public final QueryParser.macro_content_return macro_content() throws RecognitionException {
        QueryParser.macro_content_return retval = new QueryParser.macro_content_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY59=null;
        Token set61=null;
        Token RIGHT_CURLY62=null;
        QueryParser.macro_content_return macro_content60 =null;


        Object LEFT_CURLY59_tree=null;
        Object set61_tree=null;
        Object RIGHT_CURLY62_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:253:15: ( LEFT_CURLY ( macro_content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:253:17: LEFT_CURLY ( macro_content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();


            LEFT_CURLY59=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_macro_content1009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY59_tree = 
            (Object)adaptor.create(LEFT_CURLY59)
            ;
            adaptor.addChild(root_0, LEFT_CURLY59_tree);
            }

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:253:28: ( macro_content |~ ( LEFT_CURLY | RIGHT_CURLY ) )*
            loop20:
            do {
                int alt20=3;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==LEFT_CURLY) ) {
                    alt20=1;
                }
                else if ( ((LA20_0 >= ALL && LA20_0 <= LEFT_BRACKET)||(LA20_0 >= LEFT_PAREN && LA20_0 <= RIGHT_BRACKET)||(LA20_0 >= RIGHT_PAREN && LA20_0 <= TUPLE_VAL)) ) {
                    alt20=2;
                }


                switch (alt20) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:253:30: macro_content
            	    {
            	    pushFollow(FOLLOW_macro_content_in_macro_content1013);
            	    macro_content60=macro_content();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, macro_content60.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:253:46: ~ ( LEFT_CURLY | RIGHT_CURLY )
            	    {
            	    set61=(Token)input.LT(1);

            	    if ( (input.LA(1) >= ALL && input.LA(1) <= LEFT_BRACKET)||(input.LA(1) >= LEFT_PAREN && input.LA(1) <= RIGHT_BRACKET)||(input.LA(1) >= RIGHT_PAREN && input.LA(1) <= TUPLE_VAL) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set61)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);


            RIGHT_CURLY62=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_macro_content1029); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY62_tree = 
            (Object)adaptor.create(RIGHT_CURLY62)
            ;
            adaptor.addChild(root_0, RIGHT_CURLY62_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_content"


    public static class rel_cache_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_cache_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:256:1: rel_cache_clause : CACHE IDENTIFIER -> ^( CACHE IDENTIFIER ) ;
    public final QueryParser.rel_cache_clause_return rel_cache_clause() throws RecognitionException {
        QueryParser.rel_cache_clause_return retval = new QueryParser.rel_cache_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CACHE63=null;
        Token IDENTIFIER64=null;

        Object CACHE63_tree=null;
        Object IDENTIFIER64_tree=null;
        RewriteRuleTokenStream stream_CACHE=new RewriteRuleTokenStream(adaptor,"token CACHE");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:256:18: ( CACHE IDENTIFIER -> ^( CACHE IDENTIFIER ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:256:20: CACHE IDENTIFIER
            {
            CACHE63=(Token)match(input,CACHE,FOLLOW_CACHE_in_rel_cache_clause1038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CACHE.add(CACHE63);


            IDENTIFIER64=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_rel_cache_clause1040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER64);


            // AST REWRITE
            // elements: IDENTIFIER, CACHE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 257:5: -> ^( CACHE IDENTIFIER )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:257:8: ^( CACHE IDENTIFIER )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_CACHE.nextNode()
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENTIFIER.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_cache_clause"


    public static class macro_param_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_param_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:260:1: macro_param_clause : LEFT_PAREN ( identifier_plus ( COMMA identifier_plus )* )? RIGHT_PAREN -> ^( PARAMS ( identifier_plus )* ) ;
    public final QueryParser.macro_param_clause_return macro_param_clause() throws RecognitionException {
        QueryParser.macro_param_clause_return retval = new QueryParser.macro_param_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN65=null;
        Token COMMA67=null;
        Token RIGHT_PAREN69=null;
        QueryParser.identifier_plus_return identifier_plus66 =null;

        QueryParser.identifier_plus_return identifier_plus68 =null;


        Object LEFT_PAREN65_tree=null;
        Object COMMA67_tree=null;
        Object RIGHT_PAREN69_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:260:20: ( LEFT_PAREN ( identifier_plus ( COMMA identifier_plus )* )? RIGHT_PAREN -> ^( PARAMS ( identifier_plus )* ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:260:22: LEFT_PAREN ( identifier_plus ( COMMA identifier_plus )* )? RIGHT_PAREN
            {
            LEFT_PAREN65=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_macro_param_clause1061); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN65);


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:260:33: ( identifier_plus ( COMMA identifier_plus )* )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==CUBE||(LA22_0 >= ELSE && LA22_0 <= END)||LA22_0==IDENTIFIER||LA22_0==IN||LA22_0==RANK||LA22_0==THEN||LA22_0==WHEN) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:260:35: identifier_plus ( COMMA identifier_plus )*
                    {
                    pushFollow(FOLLOW_identifier_plus_in_macro_param_clause1065);
                    identifier_plus66=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus66.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:260:51: ( COMMA identifier_plus )*
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==COMMA) ) {
                            alt21=1;
                        }


                        switch (alt21) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:260:52: COMMA identifier_plus
                    	    {
                    	    COMMA67=(Token)match(input,COMMA,FOLLOW_COMMA_in_macro_param_clause1068); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA67);


                    	    pushFollow(FOLLOW_identifier_plus_in_macro_param_clause1070);
                    	    identifier_plus68=identifier_plus();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus68.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop21;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN69=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_macro_param_clause1077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN69);


            // AST REWRITE
            // elements: identifier_plus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 261:5: -> ^( PARAMS ( identifier_plus )* )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:261:8: ^( PARAMS ( identifier_plus )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:261:17: ( identifier_plus )*
                while ( stream_identifier_plus.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                }
                stream_identifier_plus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_param_clause"


    public static class macro_return_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_return_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:264:1: macro_return_clause : RETURNS ( ( identifier_plus ( COMMA identifier_plus )* ) | VOID ) -> ^( RETURN_VAL ( identifier_plus )* ) ;
    public final QueryParser.macro_return_clause_return macro_return_clause() throws RecognitionException {
        QueryParser.macro_return_clause_return retval = new QueryParser.macro_return_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RETURNS70=null;
        Token COMMA72=null;
        Token VOID74=null;
        QueryParser.identifier_plus_return identifier_plus71 =null;

        QueryParser.identifier_plus_return identifier_plus73 =null;


        Object RETURNS70_tree=null;
        Object COMMA72_tree=null;
        Object VOID74_tree=null;
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RETURNS=new RewriteRuleTokenStream(adaptor,"token RETURNS");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:265:5: ( RETURNS ( ( identifier_plus ( COMMA identifier_plus )* ) | VOID ) -> ^( RETURN_VAL ( identifier_plus )* ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:265:7: RETURNS ( ( identifier_plus ( COMMA identifier_plus )* ) | VOID )
            {
            RETURNS70=(Token)match(input,RETURNS,FOLLOW_RETURNS_in_macro_return_clause1103); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RETURNS.add(RETURNS70);


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:265:15: ( ( identifier_plus ( COMMA identifier_plus )* ) | VOID )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==CUBE||(LA24_0 >= ELSE && LA24_0 <= END)||LA24_0==IDENTIFIER||LA24_0==IN||LA24_0==RANK||LA24_0==THEN||LA24_0==WHEN) ) {
                alt24=1;
            }
            else if ( (LA24_0==VOID) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }
            switch (alt24) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:265:16: ( identifier_plus ( COMMA identifier_plus )* )
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:265:16: ( identifier_plus ( COMMA identifier_plus )* )
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:265:17: identifier_plus ( COMMA identifier_plus )*
                    {
                    pushFollow(FOLLOW_identifier_plus_in_macro_return_clause1107);
                    identifier_plus71=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus71.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:265:33: ( COMMA identifier_plus )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==COMMA) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:265:34: COMMA identifier_plus
                    	    {
                    	    COMMA72=(Token)match(input,COMMA,FOLLOW_COMMA_in_macro_return_clause1110); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA72);


                    	    pushFollow(FOLLOW_identifier_plus_in_macro_return_clause1112);
                    	    identifier_plus73=identifier_plus();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus73.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:265:61: VOID
                    {
                    VOID74=(Token)match(input,VOID,FOLLOW_VOID_in_macro_return_clause1119); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(VOID74);


                    }
                    break;

            }


            // AST REWRITE
            // elements: identifier_plus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 266:9: -> ^( RETURN_VAL ( identifier_plus )* )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:266:12: ^( RETURN_VAL ( identifier_plus )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                , root_1);

                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:266:25: ( identifier_plus )*
                while ( stream_identifier_plus.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                }
                stream_identifier_plus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_return_clause"


    public static class macro_body_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_body_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:269:1: macro_body_clause : macro_content -> ^( MACRO_BODY ) ;
    public final QueryParser.macro_body_clause_return macro_body_clause() throws RecognitionException {
        QueryParser.macro_body_clause_return retval = new QueryParser.macro_body_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.macro_content_return macro_content75 =null;


        RewriteRuleSubtreeStream stream_macro_content=new RewriteRuleSubtreeStream(adaptor,"rule macro_content");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:269:19: ( macro_content -> ^( MACRO_BODY ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:269:21: macro_content
            {
            pushFollow(FOLLOW_macro_content_in_macro_body_clause1146);
            macro_content75=macro_content();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_content.add(macro_content75.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 269:35: -> ^( MACRO_BODY )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:269:38: ^( MACRO_BODY )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_BODY, "MACRO_BODY")
                , root_1);

                adaptor.addChild(root_1,  new PigParserNode(new CommonToken(1, (macro_content75!=null?input.toString(macro_content75.start,macro_content75.stop):null)), this.getSourceName(), (macro_content75!=null?((Token)macro_content75.start):null)) );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_body_clause"


    public static class macro_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:272:1: macro_clause : macro_param_clause macro_return_clause macro_body_clause -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause ) ;
    public final QueryParser.macro_clause_return macro_clause() throws RecognitionException {
        QueryParser.macro_clause_return retval = new QueryParser.macro_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.macro_param_clause_return macro_param_clause76 =null;

        QueryParser.macro_return_clause_return macro_return_clause77 =null;

        QueryParser.macro_body_clause_return macro_body_clause78 =null;


        RewriteRuleSubtreeStream stream_macro_body_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_body_clause");
        RewriteRuleSubtreeStream stream_macro_param_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_param_clause");
        RewriteRuleSubtreeStream stream_macro_return_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_return_clause");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:272:14: ( macro_param_clause macro_return_clause macro_body_clause -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:272:16: macro_param_clause macro_return_clause macro_body_clause
            {
            pushFollow(FOLLOW_macro_param_clause_in_macro_clause1164);
            macro_param_clause76=macro_param_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_param_clause.add(macro_param_clause76.getTree());

            pushFollow(FOLLOW_macro_return_clause_in_macro_clause1166);
            macro_return_clause77=macro_return_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_return_clause.add(macro_return_clause77.getTree());

            pushFollow(FOLLOW_macro_body_clause_in_macro_clause1168);
            macro_body_clause78=macro_body_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_body_clause.add(macro_body_clause78.getTree());

            // AST REWRITE
            // elements: macro_body_clause, macro_return_clause, macro_param_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 273:5: -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:273:8: ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_DEF, "MACRO_DEF")
                , root_1);

                adaptor.addChild(root_1, stream_macro_param_clause.nextTree());

                adaptor.addChild(root_1, stream_macro_return_clause.nextTree());

                adaptor.addChild(root_1, stream_macro_body_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_clause"


    public static class inline_return_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_return_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:276:1: inline_return_clause : ( identifier_plus EQUAL -> ^( RETURN_VAL identifier_plus ) | identifier_plus ( COMMA identifier_plus )+ EQUAL -> ^( RETURN_VAL ( identifier_plus )+ ) | -> ^( RETURN_VAL ) );
    public final QueryParser.inline_return_clause_return inline_return_clause() throws RecognitionException {
        QueryParser.inline_return_clause_return retval = new QueryParser.inline_return_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL80=null;
        Token COMMA82=null;
        Token EQUAL84=null;
        QueryParser.identifier_plus_return identifier_plus79 =null;

        QueryParser.identifier_plus_return identifier_plus81 =null;

        QueryParser.identifier_plus_return identifier_plus83 =null;


        Object EQUAL80_tree=null;
        Object COMMA82_tree=null;
        Object EQUAL84_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:277:5: ( identifier_plus EQUAL -> ^( RETURN_VAL identifier_plus ) | identifier_plus ( COMMA identifier_plus )+ EQUAL -> ^( RETURN_VAL ( identifier_plus )+ ) | -> ^( RETURN_VAL ) )
            int alt26=3;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==IDENTIFIER) ) {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    alt26=1;
                    }
                    break;
                case COMMA:
                    {
                    alt26=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    alt26=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 1, input);

                    throw nvae;

                }

            }
            else if ( (LA26_0==CUBE||(LA26_0 >= ELSE && LA26_0 <= END)||LA26_0==IN||LA26_0==RANK||LA26_0==THEN||LA26_0==WHEN) ) {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    alt26=1;
                    }
                    break;
                case COMMA:
                    {
                    alt26=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    alt26=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 2, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;

            }
            switch (alt26) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:277:7: identifier_plus EQUAL
                    {
                    pushFollow(FOLLOW_identifier_plus_in_inline_return_clause1197);
                    identifier_plus79=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus79.getTree());

                    EQUAL80=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_inline_return_clause1199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL80);


                    // AST REWRITE
                    // elements: identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 277:29: -> ^( RETURN_VAL identifier_plus )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:277:32: ^( RETURN_VAL identifier_plus )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:278:4: identifier_plus ( COMMA identifier_plus )+ EQUAL
                    {
                    pushFollow(FOLLOW_identifier_plus_in_inline_return_clause1212);
                    identifier_plus81=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus81.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:278:20: ( COMMA identifier_plus )+
                    int cnt25=0;
                    loop25:
                    do {
                        int alt25=2;
                        int LA25_0 = input.LA(1);

                        if ( (LA25_0==COMMA) ) {
                            alt25=1;
                        }


                        switch (alt25) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:278:21: COMMA identifier_plus
                    	    {
                    	    COMMA82=(Token)match(input,COMMA,FOLLOW_COMMA_in_inline_return_clause1215); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA82);


                    	    pushFollow(FOLLOW_identifier_plus_in_inline_return_clause1217);
                    	    identifier_plus83=identifier_plus();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus83.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt25 >= 1 ) break loop25;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(25, input);
                                throw eee;
                        }
                        cnt25++;
                    } while (true);


                    EQUAL84=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_inline_return_clause1221); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL84);


                    // AST REWRITE
                    // elements: identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 278:51: -> ^( RETURN_VAL ( identifier_plus )+ )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:278:54: ^( RETURN_VAL ( identifier_plus )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        if ( !(stream_identifier_plus.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_identifier_plus.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        }
                        stream_identifier_plus.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:279:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 279:4: -> ^( RETURN_VAL )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:279:7: ^( RETURN_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_return_clause"


    public static class parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:282:1: parameter : ( IDENTIFIER | INTEGER | DOUBLENUMBER | BIGDECIMALNUMBER | BIGINTEGERNUMBER | QUOTEDSTRING | DOLLARVAR );
    public final QueryParser.parameter_return parameter() throws RecognitionException {
        QueryParser.parameter_return retval = new QueryParser.parameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set85=null;

        Object set85_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:283:5: ( IDENTIFIER | INTEGER | DOUBLENUMBER | BIGDECIMALNUMBER | BIGINTEGERNUMBER | QUOTEDSTRING | DOLLARVAR )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set85=(Token)input.LT(1);

            if ( input.LA(1)==BIGDECIMALNUMBER||input.LA(1)==BIGINTEGERNUMBER||input.LA(1)==DOLLARVAR||input.LA(1)==DOUBLENUMBER||input.LA(1)==IDENTIFIER||input.LA(1)==INTEGER||input.LA(1)==QUOTEDSTRING ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set85)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameter"


    public static class inline_param_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_param_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:292:1: inline_param_clause : LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN -> ^( PARAMS ( parameter )* ) ;
    public final QueryParser.inline_param_clause_return inline_param_clause() throws RecognitionException {
        QueryParser.inline_param_clause_return retval = new QueryParser.inline_param_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN86=null;
        Token COMMA88=null;
        Token RIGHT_PAREN90=null;
        QueryParser.parameter_return parameter87 =null;

        QueryParser.parameter_return parameter89 =null;


        Object LEFT_PAREN86_tree=null;
        Object COMMA88_tree=null;
        Object RIGHT_PAREN90_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:292:21: ( LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN -> ^( PARAMS ( parameter )* ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:292:23: LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN
            {
            LEFT_PAREN86=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_inline_param_clause1309); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN86);


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:292:34: ( parameter ( COMMA parameter )* )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==BIGDECIMALNUMBER||LA28_0==BIGINTEGERNUMBER||LA28_0==DOLLARVAR||LA28_0==DOUBLENUMBER||LA28_0==IDENTIFIER||LA28_0==INTEGER||LA28_0==QUOTEDSTRING) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:292:36: parameter ( COMMA parameter )*
                    {
                    pushFollow(FOLLOW_parameter_in_inline_param_clause1313);
                    parameter87=parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter.add(parameter87.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:292:46: ( COMMA parameter )*
                    loop27:
                    do {
                        int alt27=2;
                        int LA27_0 = input.LA(1);

                        if ( (LA27_0==COMMA) ) {
                            alt27=1;
                        }


                        switch (alt27) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:292:47: COMMA parameter
                    	    {
                    	    COMMA88=(Token)match(input,COMMA,FOLLOW_COMMA_in_inline_param_clause1316); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA88);


                    	    pushFollow(FOLLOW_parameter_in_inline_param_clause1318);
                    	    parameter89=parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameter.add(parameter89.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN90=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_inline_param_clause1325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN90);


            // AST REWRITE
            // elements: parameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 293:5: -> ^( PARAMS ( parameter )* )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:293:8: ^( PARAMS ( parameter )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:293:17: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_param_clause"


    public static class inline_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:296:1: inline_clause : inline_return_clause identifier_plus inline_param_clause -> ^( MACRO_INLINE identifier_plus inline_return_clause inline_param_clause ) ;
    public final QueryParser.inline_clause_return inline_clause() throws RecognitionException {
        QueryParser.inline_clause_return retval = new QueryParser.inline_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.inline_return_clause_return inline_return_clause91 =null;

        QueryParser.identifier_plus_return identifier_plus92 =null;

        QueryParser.inline_param_clause_return inline_param_clause93 =null;


        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_inline_return_clause=new RewriteRuleSubtreeStream(adaptor,"rule inline_return_clause");
        RewriteRuleSubtreeStream stream_inline_param_clause=new RewriteRuleSubtreeStream(adaptor,"rule inline_param_clause");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:296:15: ( inline_return_clause identifier_plus inline_param_clause -> ^( MACRO_INLINE identifier_plus inline_return_clause inline_param_clause ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:296:17: inline_return_clause identifier_plus inline_param_clause
            {
            pushFollow(FOLLOW_inline_return_clause_in_inline_clause1347);
            inline_return_clause91=inline_return_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inline_return_clause.add(inline_return_clause91.getTree());

            pushFollow(FOLLOW_identifier_plus_in_inline_clause1349);
            identifier_plus92=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus92.getTree());

            pushFollow(FOLLOW_inline_param_clause_in_inline_clause1351);
            inline_param_clause93=inline_param_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inline_param_clause.add(inline_param_clause93.getTree());

            // AST REWRITE
            // elements: inline_param_clause, identifier_plus, inline_return_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 297:5: -> ^( MACRO_INLINE identifier_plus inline_return_clause inline_param_clause )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:297:8: ^( MACRO_INLINE identifier_plus inline_return_clause inline_param_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_INLINE, "MACRO_INLINE")
                , root_1);

                adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                adaptor.addChild(root_1, stream_inline_return_clause.nextTree());

                adaptor.addChild(root_1, stream_inline_param_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_clause"


    public static class simple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_type"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:302:1: simple_type : ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | DATETIME | BIGINTEGER | BIGDECIMAL | CHARARRAY | BYTEARRAY );
    public final QueryParser.simple_type_return simple_type() throws RecognitionException {
        QueryParser.simple_type_return retval = new QueryParser.simple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set94=null;

        Object set94_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:302:13: ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | DATETIME | BIGINTEGER | BIGDECIMAL | CHARARRAY | BYTEARRAY )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set94=(Token)input.LT(1);

            if ( input.LA(1)==BIGDECIMAL||input.LA(1)==BIGINTEGER||input.LA(1)==BOOLEAN||input.LA(1)==BYTEARRAY||input.LA(1)==CHARARRAY||input.LA(1)==DATETIME||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set94)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_type"


    public static class implicit_tuple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_tuple_type"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:305:1: implicit_tuple_type : LEFT_PAREN ( field_def_list )? RIGHT_PAREN -> ^( TUPLE_TYPE ( field_def_list )? ) ;
    public final QueryParser.implicit_tuple_type_return implicit_tuple_type() throws RecognitionException {
        QueryParser.implicit_tuple_type_return retval = new QueryParser.implicit_tuple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN95=null;
        Token RIGHT_PAREN97=null;
        QueryParser.field_def_list_return field_def_list96 =null;


        Object LEFT_PAREN95_tree=null;
        Object RIGHT_PAREN97_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_field_def_list=new RewriteRuleSubtreeStream(adaptor,"rule field_def_list");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:305:21: ( LEFT_PAREN ( field_def_list )? RIGHT_PAREN -> ^( TUPLE_TYPE ( field_def_list )? ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:305:23: LEFT_PAREN ( field_def_list )? RIGHT_PAREN
            {
            LEFT_PAREN95=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_implicit_tuple_type1423); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN95);


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:305:34: ( field_def_list )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( ((LA29_0 >= BAG && LA29_0 <= BIGDECIMAL)||LA29_0==BIGINTEGER||LA29_0==BOOLEAN||LA29_0==BYTEARRAY||LA29_0==CHARARRAY||(LA29_0 >= CUBE && LA29_0 <= DATETIME)||LA29_0==DOUBLE||(LA29_0 >= ELSE && LA29_0 <= END)||LA29_0==FLOAT||LA29_0==IDENTIFIER||LA29_0==IN||LA29_0==INT||(LA29_0 >= LEFT_BRACKET && LA29_0 <= LEFT_PAREN)||LA29_0==LONG||LA29_0==MAP||LA29_0==RANK||LA29_0==THEN||LA29_0==TUPLE||LA29_0==WHEN) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:305:34: field_def_list
                    {
                    pushFollow(FOLLOW_field_def_list_in_implicit_tuple_type1425);
                    field_def_list96=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_def_list.add(field_def_list96.getTree());

                    }
                    break;

            }


            RIGHT_PAREN97=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_implicit_tuple_type1428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN97);


            // AST REWRITE
            // elements: field_def_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 305:62: -> ^( TUPLE_TYPE ( field_def_list )? )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:305:65: ^( TUPLE_TYPE ( field_def_list )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TUPLE_TYPE, "TUPLE_TYPE")
                , root_1);

                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:305:79: ( field_def_list )?
                if ( stream_field_def_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_field_def_list.nextTree());

                }
                stream_field_def_list.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_tuple_type"


    public static class explicit_tuple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_tuple_type"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:308:1: explicit_tuple_type : TUPLE ! implicit_tuple_type ;
    public final QueryParser.explicit_tuple_type_return explicit_tuple_type() throws RecognitionException {
        QueryParser.explicit_tuple_type_return retval = new QueryParser.explicit_tuple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token TUPLE98=null;
        QueryParser.implicit_tuple_type_return implicit_tuple_type99 =null;


        Object TUPLE98_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:308:21: ( TUPLE ! implicit_tuple_type )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:308:23: TUPLE ! implicit_tuple_type
            {
            root_0 = (Object)adaptor.nil();


            TUPLE98=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_explicit_tuple_type1448); if (state.failed) return retval;

            pushFollow(FOLLOW_implicit_tuple_type_in_explicit_tuple_type1451);
            implicit_tuple_type99=implicit_tuple_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_tuple_type99.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_tuple_type"


    public static class explicit_tuple_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_tuple_type_cast"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:311:1: explicit_tuple_type_cast : TUPLE LEFT_PAREN ( explicit_type_cast ( COMMA explicit_type_cast )* )? RIGHT_PAREN -> ^( TUPLE_TYPE_CAST ( explicit_type_cast )* ) ;
    public final QueryParser.explicit_tuple_type_cast_return explicit_tuple_type_cast() throws RecognitionException {
        QueryParser.explicit_tuple_type_cast_return retval = new QueryParser.explicit_tuple_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token TUPLE100=null;
        Token LEFT_PAREN101=null;
        Token COMMA103=null;
        Token RIGHT_PAREN105=null;
        QueryParser.explicit_type_cast_return explicit_type_cast102 =null;

        QueryParser.explicit_type_cast_return explicit_type_cast104 =null;


        Object TUPLE100_tree=null;
        Object LEFT_PAREN101_tree=null;
        Object COMMA103_tree=null;
        Object RIGHT_PAREN105_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_TUPLE=new RewriteRuleTokenStream(adaptor,"token TUPLE");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_explicit_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule explicit_type_cast");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:311:26: ( TUPLE LEFT_PAREN ( explicit_type_cast ( COMMA explicit_type_cast )* )? RIGHT_PAREN -> ^( TUPLE_TYPE_CAST ( explicit_type_cast )* ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:311:28: TUPLE LEFT_PAREN ( explicit_type_cast ( COMMA explicit_type_cast )* )? RIGHT_PAREN
            {
            TUPLE100=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_explicit_tuple_type_cast1460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TUPLE.add(TUPLE100);


            LEFT_PAREN101=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_explicit_tuple_type_cast1462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN101);


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:311:45: ( explicit_type_cast ( COMMA explicit_type_cast )* )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( ((LA31_0 >= BAG && LA31_0 <= BIGDECIMAL)||LA31_0==BIGINTEGER||LA31_0==BOOLEAN||LA31_0==BYTEARRAY||LA31_0==CHARARRAY||LA31_0==DATETIME||LA31_0==DOUBLE||LA31_0==FLOAT||LA31_0==INT||LA31_0==LONG||LA31_0==MAP||LA31_0==TUPLE) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:311:47: explicit_type_cast ( COMMA explicit_type_cast )*
                    {
                    pushFollow(FOLLOW_explicit_type_cast_in_explicit_tuple_type_cast1466);
                    explicit_type_cast102=explicit_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_type_cast.add(explicit_type_cast102.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:311:66: ( COMMA explicit_type_cast )*
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);

                        if ( (LA30_0==COMMA) ) {
                            alt30=1;
                        }


                        switch (alt30) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:311:68: COMMA explicit_type_cast
                    	    {
                    	    COMMA103=(Token)match(input,COMMA,FOLLOW_COMMA_in_explicit_tuple_type_cast1470); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA103);


                    	    pushFollow(FOLLOW_explicit_type_cast_in_explicit_tuple_type_cast1472);
                    	    explicit_type_cast104=explicit_type_cast();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_explicit_type_cast.add(explicit_type_cast104.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop30;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN105=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_explicit_tuple_type_cast1480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN105);


            // AST REWRITE
            // elements: explicit_type_cast
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 312:5: -> ^( TUPLE_TYPE_CAST ( explicit_type_cast )* )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:312:8: ^( TUPLE_TYPE_CAST ( explicit_type_cast )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TUPLE_TYPE_CAST, "TUPLE_TYPE_CAST")
                , root_1);

                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:312:27: ( explicit_type_cast )*
                while ( stream_explicit_type_cast.hasNext() ) {
                    adaptor.addChild(root_1, stream_explicit_type_cast.nextTree());

                }
                stream_explicit_type_cast.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_tuple_type_cast"


    public static class tuple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:315:1: tuple_type : ( implicit_tuple_type | explicit_tuple_type );
    public final QueryParser.tuple_type_return tuple_type() throws RecognitionException {
        QueryParser.tuple_type_return retval = new QueryParser.tuple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.implicit_tuple_type_return implicit_tuple_type106 =null;

        QueryParser.explicit_tuple_type_return explicit_tuple_type107 =null;



        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:315:12: ( implicit_tuple_type | explicit_tuple_type )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==LEFT_PAREN) ) {
                alt32=1;
            }
            else if ( (LA32_0==TUPLE) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:315:14: implicit_tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_tuple_type_in_tuple_type1504);
                    implicit_tuple_type106=implicit_tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_tuple_type106.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:315:36: explicit_tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_tuple_type_in_tuple_type1508);
                    explicit_tuple_type107=explicit_tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_tuple_type107.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type"


    public static class implicit_bag_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_bag_type"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:318:1: implicit_bag_type : ( LEFT_CURLY NULL COLON ( tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( tuple_type )? ) | LEFT_CURLY ( ( identifier_plus COLON )? tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( identifier_plus )? ( tuple_type )? ) );
    public final QueryParser.implicit_bag_type_return implicit_bag_type() throws RecognitionException {
        QueryParser.implicit_bag_type_return retval = new QueryParser.implicit_bag_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY108=null;
        Token NULL109=null;
        Token COLON110=null;
        Token RIGHT_CURLY112=null;
        Token LEFT_CURLY113=null;
        Token COLON115=null;
        Token RIGHT_CURLY117=null;
        QueryParser.tuple_type_return tuple_type111 =null;

        QueryParser.identifier_plus_return identifier_plus114 =null;

        QueryParser.tuple_type_return tuple_type116 =null;


        Object LEFT_CURLY108_tree=null;
        Object NULL109_tree=null;
        Object COLON110_tree=null;
        Object RIGHT_CURLY112_tree=null;
        Object LEFT_CURLY113_tree=null;
        Object COLON115_tree=null;
        Object RIGHT_CURLY117_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleTokenStream stream_NULL=new RewriteRuleTokenStream(adaptor,"token NULL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_tuple_type=new RewriteRuleSubtreeStream(adaptor,"rule tuple_type");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:318:19: ( LEFT_CURLY NULL COLON ( tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( tuple_type )? ) | LEFT_CURLY ( ( identifier_plus COLON )? tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( identifier_plus )? ( tuple_type )? ) )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==LEFT_CURLY) ) {
                int LA36_1 = input.LA(2);

                if ( (LA36_1==NULL) ) {
                    alt36=1;
                }
                else if ( (LA36_1==CUBE||(LA36_1 >= ELSE && LA36_1 <= END)||LA36_1==IDENTIFIER||LA36_1==IN||LA36_1==LEFT_PAREN||LA36_1==RANK||LA36_1==RIGHT_CURLY||LA36_1==THEN||LA36_1==TUPLE||LA36_1==WHEN) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:318:21: LEFT_CURLY NULL COLON ( tuple_type )? RIGHT_CURLY
                    {
                    LEFT_CURLY108=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_implicit_bag_type1517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY108);


                    NULL109=(Token)match(input,NULL,FOLLOW_NULL_in_implicit_bag_type1519); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NULL.add(NULL109);


                    COLON110=(Token)match(input,COLON,FOLLOW_COLON_in_implicit_bag_type1521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON110);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:318:43: ( tuple_type )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==LEFT_PAREN||LA33_0==TUPLE) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:318:43: tuple_type
                            {
                            pushFollow(FOLLOW_tuple_type_in_implicit_bag_type1523);
                            tuple_type111=tuple_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tuple_type.add(tuple_type111.getTree());

                            }
                            break;

                    }


                    RIGHT_CURLY112=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_implicit_bag_type1526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY112);


                    // AST REWRITE
                    // elements: tuple_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 318:67: -> ^( BAG_TYPE ( tuple_type )? )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:318:70: ^( BAG_TYPE ( tuple_type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_TYPE, "BAG_TYPE")
                        , root_1);

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:318:82: ( tuple_type )?
                        if ( stream_tuple_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_tuple_type.nextTree());

                        }
                        stream_tuple_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:319:21: LEFT_CURLY ( ( identifier_plus COLON )? tuple_type )? RIGHT_CURLY
                    {
                    LEFT_CURLY113=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_implicit_bag_type1559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY113);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:319:32: ( ( identifier_plus COLON )? tuple_type )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==CUBE||(LA35_0 >= ELSE && LA35_0 <= END)||LA35_0==IDENTIFIER||LA35_0==IN||LA35_0==LEFT_PAREN||LA35_0==RANK||LA35_0==THEN||LA35_0==TUPLE||LA35_0==WHEN) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:319:34: ( identifier_plus COLON )? tuple_type
                            {
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:319:34: ( identifier_plus COLON )?
                            int alt34=2;
                            int LA34_0 = input.LA(1);

                            if ( (LA34_0==CUBE||(LA34_0 >= ELSE && LA34_0 <= END)||LA34_0==IDENTIFIER||LA34_0==IN||LA34_0==RANK||LA34_0==THEN||LA34_0==WHEN) ) {
                                alt34=1;
                            }
                            switch (alt34) {
                                case 1 :
                                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:319:36: identifier_plus COLON
                                    {
                                    pushFollow(FOLLOW_identifier_plus_in_implicit_bag_type1565);
                                    identifier_plus114=identifier_plus();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus114.getTree());

                                    COLON115=(Token)match(input,COLON,FOLLOW_COLON_in_implicit_bag_type1567); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(COLON115);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_tuple_type_in_implicit_bag_type1572);
                            tuple_type116=tuple_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tuple_type.add(tuple_type116.getTree());

                            }
                            break;

                    }


                    RIGHT_CURLY117=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_implicit_bag_type1577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY117);


                    // AST REWRITE
                    // elements: tuple_type, identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 319:87: -> ^( BAG_TYPE ( identifier_plus )? ( tuple_type )? )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:319:90: ^( BAG_TYPE ( identifier_plus )? ( tuple_type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_TYPE, "BAG_TYPE")
                        , root_1);

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:319:102: ( identifier_plus )?
                        if ( stream_identifier_plus.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        }
                        stream_identifier_plus.reset();

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:319:119: ( tuple_type )?
                        if ( stream_tuple_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_tuple_type.nextTree());

                        }
                        stream_tuple_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_bag_type"


    public static class explicit_bag_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_bag_type"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:322:1: explicit_bag_type : BAG ! implicit_bag_type ;
    public final QueryParser.explicit_bag_type_return explicit_bag_type() throws RecognitionException {
        QueryParser.explicit_bag_type_return retval = new QueryParser.explicit_bag_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BAG118=null;
        QueryParser.implicit_bag_type_return implicit_bag_type119 =null;


        Object BAG118_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:322:19: ( BAG ! implicit_bag_type )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:322:21: BAG ! implicit_bag_type
            {
            root_0 = (Object)adaptor.nil();


            BAG118=(Token)match(input,BAG,FOLLOW_BAG_in_explicit_bag_type1600); if (state.failed) return retval;

            pushFollow(FOLLOW_implicit_bag_type_in_explicit_bag_type1603);
            implicit_bag_type119=implicit_bag_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_bag_type119.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_bag_type"


    public static class explicit_bag_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_bag_type_cast"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:325:1: explicit_bag_type_cast : BAG LEFT_CURLY ( explicit_tuple_type_cast )? RIGHT_CURLY -> ^( BAG_TYPE_CAST ( explicit_tuple_type_cast )? ) ;
    public final QueryParser.explicit_bag_type_cast_return explicit_bag_type_cast() throws RecognitionException {
        QueryParser.explicit_bag_type_cast_return retval = new QueryParser.explicit_bag_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BAG120=null;
        Token LEFT_CURLY121=null;
        Token RIGHT_CURLY123=null;
        QueryParser.explicit_tuple_type_cast_return explicit_tuple_type_cast122 =null;


        Object BAG120_tree=null;
        Object LEFT_CURLY121_tree=null;
        Object RIGHT_CURLY123_tree=null;
        RewriteRuleTokenStream stream_BAG=new RewriteRuleTokenStream(adaptor,"token BAG");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_explicit_tuple_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule explicit_tuple_type_cast");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:325:24: ( BAG LEFT_CURLY ( explicit_tuple_type_cast )? RIGHT_CURLY -> ^( BAG_TYPE_CAST ( explicit_tuple_type_cast )? ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:325:26: BAG LEFT_CURLY ( explicit_tuple_type_cast )? RIGHT_CURLY
            {
            BAG120=(Token)match(input,BAG,FOLLOW_BAG_in_explicit_bag_type_cast1612); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BAG.add(BAG120);


            LEFT_CURLY121=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_explicit_bag_type_cast1614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY121);


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:325:41: ( explicit_tuple_type_cast )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==TUPLE) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:325:41: explicit_tuple_type_cast
                    {
                    pushFollow(FOLLOW_explicit_tuple_type_cast_in_explicit_bag_type_cast1616);
                    explicit_tuple_type_cast122=explicit_tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_tuple_type_cast.add(explicit_tuple_type_cast122.getTree());

                    }
                    break;

            }


            RIGHT_CURLY123=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_explicit_bag_type_cast1619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY123);


            // AST REWRITE
            // elements: explicit_tuple_type_cast
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 325:79: -> ^( BAG_TYPE_CAST ( explicit_tuple_type_cast )? )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:325:82: ^( BAG_TYPE_CAST ( explicit_tuple_type_cast )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BAG_TYPE_CAST, "BAG_TYPE_CAST")
                , root_1);

                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:325:99: ( explicit_tuple_type_cast )?
                if ( stream_explicit_tuple_type_cast.hasNext() ) {
                    adaptor.addChild(root_1, stream_explicit_tuple_type_cast.nextTree());

                }
                stream_explicit_tuple_type_cast.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_bag_type_cast"


    public static class implicit_map_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_map_type"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:328:1: implicit_map_type : LEFT_BRACKET ( type )? RIGHT_BRACKET -> ^( MAP_TYPE ( type )? ) ;
    public final QueryParser.implicit_map_type_return implicit_map_type() throws RecognitionException {
        QueryParser.implicit_map_type_return retval = new QueryParser.implicit_map_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_BRACKET124=null;
        Token RIGHT_BRACKET126=null;
        QueryParser.type_return type125 =null;


        Object LEFT_BRACKET124_tree=null;
        Object RIGHT_BRACKET126_tree=null;
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:328:19: ( LEFT_BRACKET ( type )? RIGHT_BRACKET -> ^( MAP_TYPE ( type )? ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:328:21: LEFT_BRACKET ( type )? RIGHT_BRACKET
            {
            LEFT_BRACKET124=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_implicit_map_type1639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET124);


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:328:34: ( type )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( ((LA38_0 >= BAG && LA38_0 <= BIGDECIMAL)||LA38_0==BIGINTEGER||LA38_0==BOOLEAN||LA38_0==BYTEARRAY||LA38_0==CHARARRAY||LA38_0==DATETIME||LA38_0==DOUBLE||LA38_0==FLOAT||LA38_0==INT||(LA38_0 >= LEFT_BRACKET && LA38_0 <= LEFT_PAREN)||LA38_0==LONG||LA38_0==MAP||LA38_0==TUPLE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:328:34: type
                    {
                    pushFollow(FOLLOW_type_in_implicit_map_type1641);
                    type125=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type125.getTree());

                    }
                    break;

            }


            RIGHT_BRACKET126=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_implicit_map_type1644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET126);


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 328:54: -> ^( MAP_TYPE ( type )? )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:328:57: ^( MAP_TYPE ( type )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MAP_TYPE, "MAP_TYPE")
                , root_1);

                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:328:69: ( type )?
                if ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_map_type"


    public static class explicit_map_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_map_type"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:331:1: explicit_map_type : MAP ! implicit_map_type ;
    public final QueryParser.explicit_map_type_return explicit_map_type() throws RecognitionException {
        QueryParser.explicit_map_type_return retval = new QueryParser.explicit_map_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MAP127=null;
        QueryParser.implicit_map_type_return implicit_map_type128 =null;


        Object MAP127_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:331:19: ( MAP ! implicit_map_type )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:331:21: MAP ! implicit_map_type
            {
            root_0 = (Object)adaptor.nil();


            MAP127=(Token)match(input,MAP,FOLLOW_MAP_in_explicit_map_type1664); if (state.failed) return retval;

            pushFollow(FOLLOW_implicit_map_type_in_explicit_map_type1667);
            implicit_map_type128=implicit_map_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_map_type128.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_map_type"


    public static class map_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_type"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:334:1: map_type : ( implicit_map_type | explicit_map_type );
    public final QueryParser.map_type_return map_type() throws RecognitionException {
        QueryParser.map_type_return retval = new QueryParser.map_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.implicit_map_type_return implicit_map_type129 =null;

        QueryParser.explicit_map_type_return explicit_map_type130 =null;



        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:334:10: ( implicit_map_type | explicit_map_type )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==LEFT_BRACKET) ) {
                alt39=1;
            }
            else if ( (LA39_0==MAP) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }
            switch (alt39) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:334:12: implicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_map_type_in_map_type1676);
                    implicit_map_type129=implicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_map_type129.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:334:32: explicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_map_type_in_map_type1680);
                    explicit_map_type130=explicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_map_type130.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_type"


    public static class explicit_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_type"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:337:1: explicit_type : ( simple_type | explicit_tuple_type | explicit_bag_type | explicit_map_type );
    public final QueryParser.explicit_type_return explicit_type() throws RecognitionException {
        QueryParser.explicit_type_return retval = new QueryParser.explicit_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.simple_type_return simple_type131 =null;

        QueryParser.explicit_tuple_type_return explicit_tuple_type132 =null;

        QueryParser.explicit_bag_type_return explicit_bag_type133 =null;

        QueryParser.explicit_map_type_return explicit_map_type134 =null;



        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:337:15: ( simple_type | explicit_tuple_type | explicit_bag_type | explicit_map_type )
            int alt40=4;
            switch ( input.LA(1) ) {
            case BIGDECIMAL:
            case BIGINTEGER:
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DATETIME:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt40=1;
                }
                break;
            case TUPLE:
                {
                alt40=2;
                }
                break;
            case BAG:
                {
                alt40=3;
                }
                break;
            case MAP:
                {
                alt40=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }

            switch (alt40) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:337:17: simple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_type_in_explicit_type1689);
                    simple_type131=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_type131.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:337:31: explicit_tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_tuple_type_in_explicit_type1693);
                    explicit_tuple_type132=explicit_tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_tuple_type132.getTree());

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:337:53: explicit_bag_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_bag_type_in_explicit_type1697);
                    explicit_bag_type133=explicit_bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_bag_type133.getTree());

                    }
                    break;
                case 4 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:337:73: explicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_map_type_in_explicit_type1701);
                    explicit_map_type134=explicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_map_type134.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_type"


    public static class implicit_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implicit_type"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:340:1: implicit_type : ( implicit_tuple_type | implicit_bag_type | implicit_map_type );
    public final QueryParser.implicit_type_return implicit_type() throws RecognitionException {
        QueryParser.implicit_type_return retval = new QueryParser.implicit_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.implicit_tuple_type_return implicit_tuple_type135 =null;

        QueryParser.implicit_bag_type_return implicit_bag_type136 =null;

        QueryParser.implicit_map_type_return implicit_map_type137 =null;



        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:340:15: ( implicit_tuple_type | implicit_bag_type | implicit_map_type )
            int alt41=3;
            switch ( input.LA(1) ) {
            case LEFT_PAREN:
                {
                alt41=1;
                }
                break;
            case LEFT_CURLY:
                {
                alt41=2;
                }
                break;
            case LEFT_BRACKET:
                {
                alt41=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }

            switch (alt41) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:340:17: implicit_tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_tuple_type_in_implicit_type1710);
                    implicit_tuple_type135=implicit_tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_tuple_type135.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:340:39: implicit_bag_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_bag_type_in_implicit_type1714);
                    implicit_bag_type136=implicit_bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_bag_type136.getTree());

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:340:59: implicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_map_type_in_implicit_type1718);
                    implicit_map_type137=implicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_map_type137.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicit_type"


    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:343:1: type : ( explicit_type | implicit_type );
    public final QueryParser.type_return type() throws RecognitionException {
        QueryParser.type_return retval = new QueryParser.type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.explicit_type_return explicit_type138 =null;

        QueryParser.implicit_type_return implicit_type139 =null;



        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:343:6: ( explicit_type | implicit_type )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( ((LA42_0 >= BAG && LA42_0 <= BIGDECIMAL)||LA42_0==BIGINTEGER||LA42_0==BOOLEAN||LA42_0==BYTEARRAY||LA42_0==CHARARRAY||LA42_0==DATETIME||LA42_0==DOUBLE||LA42_0==FLOAT||LA42_0==INT||LA42_0==LONG||LA42_0==MAP||LA42_0==TUPLE) ) {
                alt42=1;
            }
            else if ( ((LA42_0 >= LEFT_BRACKET && LA42_0 <= LEFT_PAREN)) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }
            switch (alt42) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:343:8: explicit_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_type_in_type1727);
                    explicit_type138=explicit_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_type138.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:343:24: implicit_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implicit_type_in_type1731);
                    implicit_type139=implicit_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_type139.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class explicit_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_type_cast"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:346:1: explicit_type_cast : ( simple_type | explicit_map_type | explicit_tuple_type_cast | explicit_bag_type_cast );
    public final QueryParser.explicit_type_cast_return explicit_type_cast() throws RecognitionException {
        QueryParser.explicit_type_cast_return retval = new QueryParser.explicit_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.simple_type_return simple_type140 =null;

        QueryParser.explicit_map_type_return explicit_map_type141 =null;

        QueryParser.explicit_tuple_type_cast_return explicit_tuple_type_cast142 =null;

        QueryParser.explicit_bag_type_cast_return explicit_bag_type_cast143 =null;



        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:346:20: ( simple_type | explicit_map_type | explicit_tuple_type_cast | explicit_bag_type_cast )
            int alt43=4;
            switch ( input.LA(1) ) {
            case BIGDECIMAL:
            case BIGINTEGER:
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DATETIME:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt43=1;
                }
                break;
            case MAP:
                {
                alt43=2;
                }
                break;
            case TUPLE:
                {
                alt43=3;
                }
                break;
            case BAG:
                {
                alt43=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }

            switch (alt43) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:346:22: simple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_type_in_explicit_type_cast1740);
                    simple_type140=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_type140.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:346:36: explicit_map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_map_type_in_explicit_type_cast1744);
                    explicit_map_type141=explicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_map_type141.getTree());

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:346:56: explicit_tuple_type_cast
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_tuple_type_cast_in_explicit_type_cast1748);
                    explicit_tuple_type_cast142=explicit_tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_tuple_type_cast142.getTree());

                    }
                    break;
                case 4 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:346:83: explicit_bag_type_cast
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_bag_type_cast_in_explicit_type_cast1752);
                    explicit_bag_type_cast143=explicit_bag_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_bag_type_cast143.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_type_cast"


    public static class import_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:351:1: import_clause : IMPORT ^ QUOTEDSTRING ;
    public final QueryParser.import_clause_return import_clause() throws RecognitionException {
        QueryParser.import_clause_return retval = new QueryParser.import_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IMPORT144=null;
        Token QUOTEDSTRING145=null;

        Object IMPORT144_tree=null;
        Object QUOTEDSTRING145_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:351:15: ( IMPORT ^ QUOTEDSTRING )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:351:17: IMPORT ^ QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            IMPORT144=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_import_clause1763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT144_tree = 
            (Object)adaptor.create(IMPORT144)
            ;
            root_0 = (Object)adaptor.becomeRoot(IMPORT144_tree, root_0);
            }

            QUOTEDSTRING145=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_import_clause1766); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING145_tree = 
            (Object)adaptor.create(QUOTEDSTRING145)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING145_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_clause"


    public static class define_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:354:1: define_clause : DEFINE ^ IDENTIFIER ( cmd | func_clause | macro_clause ) ;
    public final QueryParser.define_clause_return define_clause() throws RecognitionException {
        QueryParser.define_clause_return retval = new QueryParser.define_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE146=null;
        Token IDENTIFIER147=null;
        QueryParser.cmd_return cmd148 =null;

        QueryParser.func_clause_return func_clause149 =null;

        QueryParser.macro_clause_return macro_clause150 =null;


        Object DEFINE146_tree=null;
        Object IDENTIFIER147_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:354:15: ( DEFINE ^ IDENTIFIER ( cmd | func_clause | macro_clause ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:354:17: DEFINE ^ IDENTIFIER ( cmd | func_clause | macro_clause )
            {
            root_0 = (Object)adaptor.nil();


            DEFINE146=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_define_clause1775); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINE146_tree = 
            (Object)adaptor.create(DEFINE146)
            ;
            root_0 = (Object)adaptor.becomeRoot(DEFINE146_tree, root_0);
            }

            IDENTIFIER147=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_define_clause1778); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER147_tree = 
            (Object)adaptor.create(IDENTIFIER147)
            ;
            adaptor.addChild(root_0, IDENTIFIER147_tree);
            }

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:354:36: ( cmd | func_clause | macro_clause )
            int alt44=3;
            switch ( input.LA(1) ) {
            case EXECCOMMAND:
                {
                alt44=1;
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BIGDECIMAL:
            case BIGINTEGER:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case CUBE:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLE:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FOREACH:
            case FULL:
            case GENERATE:
            case GROUP:
            case IDENTIFIER:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LIMIT:
            case LOAD:
            case LONG:
            case MAP:
            case MAPREDUCE:
            case NOT:
            case NULL:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt44=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt44=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;

            }

            switch (alt44) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:354:38: cmd
                    {
                    pushFollow(FOLLOW_cmd_in_define_clause1782);
                    cmd148=cmd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cmd148.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:354:44: func_clause
                    {
                    pushFollow(FOLLOW_func_clause_in_define_clause1786);
                    func_clause149=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause149.getTree());

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:354:58: macro_clause
                    {
                    pushFollow(FOLLOW_macro_clause_in_define_clause1790);
                    macro_clause150=macro_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, macro_clause150.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_clause"


    public static class realias_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "realias_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:357:1: realias_clause : identifier_plus EQUAL identifier_plus -> ^( REALIAS identifier_plus identifier_plus ) ;
    public final QueryParser.realias_clause_return realias_clause() throws RecognitionException {
        QueryParser.realias_clause_return retval = new QueryParser.realias_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL152=null;
        QueryParser.identifier_plus_return identifier_plus151 =null;

        QueryParser.identifier_plus_return identifier_plus153 =null;


        Object EQUAL152_tree=null;
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:357:16: ( identifier_plus EQUAL identifier_plus -> ^( REALIAS identifier_plus identifier_plus ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:357:18: identifier_plus EQUAL identifier_plus
            {
            pushFollow(FOLLOW_identifier_plus_in_realias_clause1800);
            identifier_plus151=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus151.getTree());

            EQUAL152=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_realias_clause1802); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL152);


            pushFollow(FOLLOW_identifier_plus_in_realias_clause1804);
            identifier_plus153=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus153.getTree());

            // AST REWRITE
            // elements: identifier_plus, identifier_plus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 357:56: -> ^( REALIAS identifier_plus identifier_plus )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:357:59: ^( REALIAS identifier_plus identifier_plus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(REALIAS, "REALIAS")
                , root_1);

                adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "realias_clause"


    public static class parallel_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parallel_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:360:1: parallel_clause : PARALLEL ^ INTEGER ;
    public final QueryParser.parallel_clause_return parallel_clause() throws RecognitionException {
        QueryParser.parallel_clause_return retval = new QueryParser.parallel_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PARALLEL154=null;
        Token INTEGER155=null;

        Object PARALLEL154_tree=null;
        Object INTEGER155_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:360:17: ( PARALLEL ^ INTEGER )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:360:19: PARALLEL ^ INTEGER
            {
            root_0 = (Object)adaptor.nil();


            PARALLEL154=(Token)match(input,PARALLEL,FOLLOW_PARALLEL_in_parallel_clause1823); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARALLEL154_tree = 
            (Object)adaptor.create(PARALLEL154)
            ;
            root_0 = (Object)adaptor.becomeRoot(PARALLEL154_tree, root_0);
            }

            INTEGER155=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_parallel_clause1826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER155_tree = 
            (Object)adaptor.create(INTEGER155)
            ;
            adaptor.addChild(root_0, INTEGER155_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parallel_clause"


    public static class op_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:363:1: op_clause : ( define_clause | load_clause | group_clause | cube_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | rank_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause );
    public final QueryParser.op_clause_return op_clause() throws RecognitionException {
        QueryParser.op_clause_return retval = new QueryParser.op_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.define_clause_return define_clause156 =null;

        QueryParser.load_clause_return load_clause157 =null;

        QueryParser.group_clause_return group_clause158 =null;

        QueryParser.cube_clause_return cube_clause159 =null;

        QueryParser.store_clause_return store_clause160 =null;

        QueryParser.filter_clause_return filter_clause161 =null;

        QueryParser.distinct_clause_return distinct_clause162 =null;

        QueryParser.limit_clause_return limit_clause163 =null;

        QueryParser.sample_clause_return sample_clause164 =null;

        QueryParser.order_clause_return order_clause165 =null;

        QueryParser.rank_clause_return rank_clause166 =null;

        QueryParser.cross_clause_return cross_clause167 =null;

        QueryParser.join_clause_return join_clause168 =null;

        QueryParser.union_clause_return union_clause169 =null;

        QueryParser.stream_clause_return stream_clause170 =null;

        QueryParser.mr_clause_return mr_clause171 =null;



        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:363:11: ( define_clause | load_clause | group_clause | cube_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | rank_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause )
            int alt45=16;
            switch ( input.LA(1) ) {
            case DEFINE:
                {
                alt45=1;
                }
                break;
            case LOAD:
                {
                alt45=2;
                }
                break;
            case COGROUP:
            case GROUP:
                {
                alt45=3;
                }
                break;
            case CUBE:
                {
                alt45=4;
                }
                break;
            case STORE:
                {
                alt45=5;
                }
                break;
            case FILTER:
                {
                alt45=6;
                }
                break;
            case DISTINCT:
                {
                alt45=7;
                }
                break;
            case LIMIT:
                {
                alt45=8;
                }
                break;
            case SAMPLE:
                {
                alt45=9;
                }
                break;
            case ORDER:
                {
                alt45=10;
                }
                break;
            case RANK:
                {
                alt45=11;
                }
                break;
            case CROSS:
                {
                alt45=12;
                }
                break;
            case JOIN:
                {
                alt45=13;
                }
                break;
            case UNION:
                {
                alt45=14;
                }
                break;
            case STREAM:
                {
                alt45=15;
                }
                break;
            case MAPREDUCE:
                {
                alt45=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }

            switch (alt45) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:363:13: define_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_clause_in_op_clause1835);
                    define_clause156=define_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_clause156.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:364:13: load_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_load_clause_in_op_clause1849);
                    load_clause157=load_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, load_clause157.getTree());

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:365:13: group_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_group_clause_in_op_clause1863);
                    group_clause158=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_clause158.getTree());

                    }
                    break;
                case 4 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:366:13: cube_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cube_clause_in_op_clause1877);
                    cube_clause159=cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cube_clause159.getTree());

                    }
                    break;
                case 5 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:367:13: store_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_store_clause_in_op_clause1891);
                    store_clause160=store_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, store_clause160.getTree());

                    }
                    break;
                case 6 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:368:13: filter_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_filter_clause_in_op_clause1905);
                    filter_clause161=filter_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, filter_clause161.getTree());

                    }
                    break;
                case 7 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:369:13: distinct_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_distinct_clause_in_op_clause1919);
                    distinct_clause162=distinct_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, distinct_clause162.getTree());

                    }
                    break;
                case 8 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:370:13: limit_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_limit_clause_in_op_clause1933);
                    limit_clause163=limit_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause163.getTree());

                    }
                    break;
                case 9 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:371:13: sample_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sample_clause_in_op_clause1947);
                    sample_clause164=sample_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sample_clause164.getTree());

                    }
                    break;
                case 10 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:372:13: order_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_order_clause_in_op_clause1961);
                    order_clause165=order_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_clause165.getTree());

                    }
                    break;
                case 11 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:373:13: rank_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rank_clause_in_op_clause1975);
                    rank_clause166=rank_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_clause166.getTree());

                    }
                    break;
                case 12 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:374:13: cross_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cross_clause_in_op_clause1989);
                    cross_clause167=cross_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cross_clause167.getTree());

                    }
                    break;
                case 13 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:375:13: join_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_clause_in_op_clause2003);
                    join_clause168=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause168.getTree());

                    }
                    break;
                case 14 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:376:13: union_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_clause_in_op_clause2017);
                    union_clause169=union_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, union_clause169.getTree());

                    }
                    break;
                case 15 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:377:13: stream_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_stream_clause_in_op_clause2031);
                    stream_clause170=stream_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_clause170.getTree());

                    }
                    break;
                case 16 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:378:13: mr_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_mr_clause_in_op_clause2045);
                    mr_clause171=mr_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mr_clause171.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_clause"


    public static class ship_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ship_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:381:1: ship_clause : SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !;
    public final QueryParser.ship_clause_return ship_clause() throws RecognitionException {
        QueryParser.ship_clause_return retval = new QueryParser.ship_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SHIP172=null;
        Token LEFT_PAREN173=null;
        Token RIGHT_PAREN175=null;
        QueryParser.path_list_return path_list174 =null;


        Object SHIP172_tree=null;
        Object LEFT_PAREN173_tree=null;
        Object RIGHT_PAREN175_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:381:13: ( SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !)
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:381:15: SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            SHIP172=(Token)match(input,SHIP,FOLLOW_SHIP_in_ship_clause2054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SHIP172_tree = 
            (Object)adaptor.create(SHIP172)
            ;
            root_0 = (Object)adaptor.becomeRoot(SHIP172_tree, root_0);
            }

            LEFT_PAREN173=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_ship_clause2057); if (state.failed) return retval;

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:381:33: ( path_list )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==QUOTEDSTRING) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:381:33: path_list
                    {
                    pushFollow(FOLLOW_path_list_in_ship_clause2060);
                    path_list174=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list174.getTree());

                    }
                    break;

            }


            RIGHT_PAREN175=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_ship_clause2063); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ship_clause"


    public static class path_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path_list"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:384:1: path_list : QUOTEDSTRING ( COMMA QUOTEDSTRING )* -> ( QUOTEDSTRING )+ ;
    public final QueryParser.path_list_return path_list() throws RecognitionException {
        QueryParser.path_list_return retval = new QueryParser.path_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING176=null;
        Token COMMA177=null;
        Token QUOTEDSTRING178=null;

        Object QUOTEDSTRING176_tree=null;
        Object COMMA177_tree=null;
        Object QUOTEDSTRING178_tree=null;
        RewriteRuleTokenStream stream_QUOTEDSTRING=new RewriteRuleTokenStream(adaptor,"token QUOTEDSTRING");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:384:11: ( QUOTEDSTRING ( COMMA QUOTEDSTRING )* -> ( QUOTEDSTRING )+ )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:384:13: QUOTEDSTRING ( COMMA QUOTEDSTRING )*
            {
            QUOTEDSTRING176=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list2073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING176);


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:384:26: ( COMMA QUOTEDSTRING )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==COMMA) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:384:28: COMMA QUOTEDSTRING
            	    {
            	    COMMA177=(Token)match(input,COMMA,FOLLOW_COMMA_in_path_list2077); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA177);


            	    QUOTEDSTRING178=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list2079); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING178);


            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            // AST REWRITE
            // elements: QUOTEDSTRING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 384:50: -> ( QUOTEDSTRING )+
            {
                if ( !(stream_QUOTEDSTRING.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_QUOTEDSTRING.hasNext() ) {
                    adaptor.addChild(root_0, 
                    stream_QUOTEDSTRING.nextNode()
                    );

                }
                stream_QUOTEDSTRING.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "path_list"


    public static class cache_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cache_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:387:1: cache_clause : CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !;
    public final QueryParser.cache_clause_return cache_clause() throws RecognitionException {
        QueryParser.cache_clause_return retval = new QueryParser.cache_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CACHE179=null;
        Token LEFT_PAREN180=null;
        Token RIGHT_PAREN182=null;
        QueryParser.path_list_return path_list181 =null;


        Object CACHE179_tree=null;
        Object LEFT_PAREN180_tree=null;
        Object RIGHT_PAREN182_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:387:14: ( CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !)
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:387:16: CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            CACHE179=(Token)match(input,CACHE,FOLLOW_CACHE_in_cache_clause2096); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CACHE179_tree = 
            (Object)adaptor.create(CACHE179)
            ;
            root_0 = (Object)adaptor.becomeRoot(CACHE179_tree, root_0);
            }

            LEFT_PAREN180=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cache_clause2099); if (state.failed) return retval;

            pushFollow(FOLLOW_path_list_in_cache_clause2102);
            path_list181=path_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list181.getTree());

            RIGHT_PAREN182=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cache_clause2104); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cache_clause"


    public static class input_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "input_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:390:1: input_clause : INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !;
    public final QueryParser.input_clause_return input_clause() throws RecognitionException {
        QueryParser.input_clause_return retval = new QueryParser.input_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INPUT183=null;
        Token LEFT_PAREN184=null;
        Token RIGHT_PAREN186=null;
        QueryParser.stream_cmd_list_return stream_cmd_list185 =null;


        Object INPUT183_tree=null;
        Object LEFT_PAREN184_tree=null;
        Object RIGHT_PAREN186_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:390:14: ( INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !)
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:390:16: INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            INPUT183=(Token)match(input,INPUT,FOLLOW_INPUT_in_input_clause2114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INPUT183_tree = 
            (Object)adaptor.create(INPUT183)
            ;
            root_0 = (Object)adaptor.becomeRoot(INPUT183_tree, root_0);
            }

            LEFT_PAREN184=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_input_clause2117); if (state.failed) return retval;

            pushFollow(FOLLOW_stream_cmd_list_in_input_clause2120);
            stream_cmd_list185=stream_cmd_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_cmd_list185.getTree());

            RIGHT_PAREN186=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_input_clause2122); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "input_clause"


    public static class output_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "output_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:393:1: output_clause : OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !;
    public final QueryParser.output_clause_return output_clause() throws RecognitionException {
        QueryParser.output_clause_return retval = new QueryParser.output_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OUTPUT187=null;
        Token LEFT_PAREN188=null;
        Token RIGHT_PAREN190=null;
        QueryParser.stream_cmd_list_return stream_cmd_list189 =null;


        Object OUTPUT187_tree=null;
        Object LEFT_PAREN188_tree=null;
        Object RIGHT_PAREN190_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:393:15: ( OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !)
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:393:17: OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            OUTPUT187=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_output_clause2132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OUTPUT187_tree = 
            (Object)adaptor.create(OUTPUT187)
            ;
            root_0 = (Object)adaptor.becomeRoot(OUTPUT187_tree, root_0);
            }

            LEFT_PAREN188=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_output_clause2135); if (state.failed) return retval;

            pushFollow(FOLLOW_stream_cmd_list_in_output_clause2138);
            stream_cmd_list189=stream_cmd_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_cmd_list189.getTree());

            RIGHT_PAREN190=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_output_clause2140); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "output_clause"


    public static class error_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "error_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:396:1: error_clause : STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !;
    public final QueryParser.error_clause_return error_clause() throws RecognitionException {
        QueryParser.error_clause_return retval = new QueryParser.error_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STDERROR191=null;
        Token LEFT_PAREN192=null;
        Token QUOTEDSTRING193=null;
        Token LIMIT194=null;
        Token INTEGER195=null;
        Token RIGHT_PAREN196=null;

        Object STDERROR191_tree=null;
        Object LEFT_PAREN192_tree=null;
        Object QUOTEDSTRING193_tree=null;
        Object LIMIT194_tree=null;
        Object INTEGER195_tree=null;
        Object RIGHT_PAREN196_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:396:14: ( STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !)
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:396:16: STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            STDERROR191=(Token)match(input,STDERROR,FOLLOW_STDERROR_in_error_clause2150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STDERROR191_tree = 
            (Object)adaptor.create(STDERROR191)
            ;
            root_0 = (Object)adaptor.becomeRoot(STDERROR191_tree, root_0);
            }

            LEFT_PAREN192=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_error_clause2153); if (state.failed) return retval;

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:396:38: ( QUOTEDSTRING ( LIMIT ! INTEGER )? )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==QUOTEDSTRING) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:396:40: QUOTEDSTRING ( LIMIT ! INTEGER )?
                    {
                    QUOTEDSTRING193=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_error_clause2158); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING193_tree = 
                    (Object)adaptor.create(QUOTEDSTRING193)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING193_tree);
                    }

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:396:53: ( LIMIT ! INTEGER )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==LIMIT) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:396:55: LIMIT ! INTEGER
                            {
                            LIMIT194=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_error_clause2162); if (state.failed) return retval;

                            INTEGER195=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_error_clause2165); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            INTEGER195_tree = 
                            (Object)adaptor.create(INTEGER195)
                            ;
                            adaptor.addChild(root_0, INTEGER195_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            RIGHT_PAREN196=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_error_clause2173); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "error_clause"


    public static class load_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "load_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:399:1: load_clause : LOAD ^ QUOTEDSTRING ( USING ! func_clause )? ( as_clause )? ;
    public final QueryParser.load_clause_return load_clause() throws RecognitionException {
        QueryParser.load_clause_return retval = new QueryParser.load_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LOAD197=null;
        Token QUOTEDSTRING198=null;
        Token USING199=null;
        QueryParser.func_clause_return func_clause200 =null;

        QueryParser.as_clause_return as_clause201 =null;


        Object LOAD197_tree=null;
        Object QUOTEDSTRING198_tree=null;
        Object USING199_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:399:13: ( LOAD ^ QUOTEDSTRING ( USING ! func_clause )? ( as_clause )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:399:15: LOAD ^ QUOTEDSTRING ( USING ! func_clause )? ( as_clause )?
            {
            root_0 = (Object)adaptor.nil();


            LOAD197=(Token)match(input,LOAD,FOLLOW_LOAD_in_load_clause2183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD197_tree = 
            (Object)adaptor.create(LOAD197)
            ;
            root_0 = (Object)adaptor.becomeRoot(LOAD197_tree, root_0);
            }

            QUOTEDSTRING198=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_load_clause2186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING198_tree = 
            (Object)adaptor.create(QUOTEDSTRING198)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING198_tree);
            }

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:399:34: ( USING ! func_clause )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==USING) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:399:36: USING ! func_clause
                    {
                    USING199=(Token)match(input,USING,FOLLOW_USING_in_load_clause2190); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_load_clause2193);
                    func_clause200=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause200.getTree());

                    }
                    break;

            }


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:399:58: ( as_clause )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==AS) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:399:58: as_clause
                    {
                    pushFollow(FOLLOW_as_clause_in_load_clause2198);
                    as_clause201=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_clause201.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "load_clause"


    public static class func_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:402:1: func_clause : ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) );
    public final QueryParser.func_clause_return func_clause() throws RecognitionException {
        QueryParser.func_clause_return retval = new QueryParser.func_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN204=null;
        Token RIGHT_PAREN206=null;
        QueryParser.func_name_return func_name202 =null;

        QueryParser.func_name_return func_name203 =null;

        QueryParser.func_args_return func_args205 =null;


        Object LEFT_PAREN204_tree=null;
        Object RIGHT_PAREN206_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
        RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:402:13: ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) )
            int alt53=2;
            alt53 = dfa53.predict(input);
            switch (alt53) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:402:15: func_name
                    {
                    pushFollow(FOLLOW_func_name_in_func_clause2208);
                    func_name202=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name.add(func_name202.getTree());

                    // AST REWRITE
                    // elements: func_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 403:12: -> ^( FUNC_REF func_name )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:403:15: ^( FUNC_REF func_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_REF, "FUNC_REF")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:404:15: func_name LEFT_PAREN ( func_args )? RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_func_name_in_func_clause2245);
                    func_name203=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name.add(func_name203.getTree());

                    LEFT_PAREN204=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_func_clause2247); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN204);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:404:36: ( func_args )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==MULTILINE_QUOTEDSTRING||LA52_0==QUOTEDSTRING) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:404:36: func_args
                            {
                            pushFollow(FOLLOW_func_args_in_func_clause2249);
                            func_args205=func_args();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_func_args.add(func_args205.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN206=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_func_clause2252); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN206);


                    // AST REWRITE
                    // elements: func_name, func_args
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 405:12: -> ^( FUNC func_name ( func_args )? )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:405:15: ^( FUNC func_name ( func_args )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC, "FUNC")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name.nextTree());

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:405:33: ( func_args )?
                        if ( stream_func_args.hasNext() ) {
                            adaptor.addChild(root_1, stream_func_args.nextTree());

                        }
                        stream_func_args.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_clause"


    public static class func_name_without_columns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name_without_columns"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:409:1: func_name_without_columns : eid_without_columns ( ( PERIOD | DOLLAR ) eid )* ;
    public final QueryParser.func_name_without_columns_return func_name_without_columns() throws RecognitionException {
        QueryParser.func_name_without_columns_return retval = new QueryParser.func_name_without_columns_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set208=null;
        QueryParser.eid_without_columns_return eid_without_columns207 =null;

        QueryParser.eid_return eid209 =null;


        Object set208_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:409:27: ( eid_without_columns ( ( PERIOD | DOLLAR ) eid )* )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:409:29: eid_without_columns ( ( PERIOD | DOLLAR ) eid )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_eid_without_columns_in_func_name_without_columns2286);
            eid_without_columns207=eid_without_columns();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eid_without_columns207.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:409:49: ( ( PERIOD | DOLLAR ) eid )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==DOLLAR||LA54_0==PERIOD) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:409:51: ( PERIOD | DOLLAR ) eid
            	    {
            	    set208=(Token)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set208)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_eid_in_func_name_without_columns2300);
            	    eid209=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid209.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name_without_columns"


    public static class func_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:412:1: func_name : eid ( ( PERIOD | DOLLAR ) eid )* ;
    public final QueryParser.func_name_return func_name() throws RecognitionException {
        QueryParser.func_name_return retval = new QueryParser.func_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set211=null;
        QueryParser.eid_return eid210 =null;

        QueryParser.eid_return eid212 =null;


        Object set211_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:412:11: ( eid ( ( PERIOD | DOLLAR ) eid )* )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:412:13: eid ( ( PERIOD | DOLLAR ) eid )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_eid_in_func_name2312);
            eid210=eid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eid210.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:412:17: ( ( PERIOD | DOLLAR ) eid )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==DOLLAR||LA55_0==PERIOD) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:412:19: ( PERIOD | DOLLAR ) eid
            	    {
            	    set211=(Token)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set211)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_eid_in_func_name2326);
            	    eid212=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid212.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name"


    public static class func_args_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args_string"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:415:1: func_args_string : ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING );
    public final QueryParser.func_args_string_return func_args_string() throws RecognitionException {
        QueryParser.func_args_string_return retval = new QueryParser.func_args_string_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set213=null;

        Object set213_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:415:18: ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set213=(Token)input.LT(1);

            if ( input.LA(1)==MULTILINE_QUOTEDSTRING||input.LA(1)==QUOTEDSTRING ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set213)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args_string"


    public static class func_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:418:1: func_args : func_args_string ( COMMA func_args_string )* -> ( func_args_string )+ ;
    public final QueryParser.func_args_return func_args() throws RecognitionException {
        QueryParser.func_args_return retval = new QueryParser.func_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA215=null;
        QueryParser.func_args_string_return func_args_string214 =null;

        QueryParser.func_args_string_return func_args_string216 =null;


        Object COMMA215_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_func_args_string=new RewriteRuleSubtreeStream(adaptor,"rule func_args_string");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:418:11: ( func_args_string ( COMMA func_args_string )* -> ( func_args_string )+ )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:418:13: func_args_string ( COMMA func_args_string )*
            {
            pushFollow(FOLLOW_func_args_string_in_func_args2351);
            func_args_string214=func_args_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_func_args_string.add(func_args_string214.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:418:30: ( COMMA func_args_string )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==COMMA) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:418:32: COMMA func_args_string
            	    {
            	    COMMA215=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_args2355); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA215);


            	    pushFollow(FOLLOW_func_args_string_in_func_args2357);
            	    func_args_string216=func_args_string();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_func_args_string.add(func_args_string216.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            // AST REWRITE
            // elements: func_args_string
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 419:10: -> ( func_args_string )+
            {
                if ( !(stream_func_args_string.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_func_args_string.hasNext() ) {
                    adaptor.addChild(root_0, stream_func_args_string.nextTree());

                }
                stream_func_args_string.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args"


    public static class group_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:422:1: group_clause : ( GROUP | COGROUP ) ^ group_item_list ( USING ! QUOTEDSTRING )? ( partition_clause )? ;
    public final QueryParser.group_clause_return group_clause() throws RecognitionException {
        QueryParser.group_clause_return retval = new QueryParser.group_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set217=null;
        Token USING219=null;
        Token QUOTEDSTRING220=null;
        QueryParser.group_item_list_return group_item_list218 =null;

        QueryParser.partition_clause_return partition_clause221 =null;


        Object set217_tree=null;
        Object USING219_tree=null;
        Object QUOTEDSTRING220_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:422:14: ( ( GROUP | COGROUP ) ^ group_item_list ( USING ! QUOTEDSTRING )? ( partition_clause )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:422:16: ( GROUP | COGROUP ) ^ group_item_list ( USING ! QUOTEDSTRING )? ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            set217=(Token)input.LT(1);

            set217=(Token)input.LT(1);

            if ( input.LA(1)==COGROUP||input.LA(1)==GROUP ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set217)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_group_item_list_in_group_clause2394);
            group_item_list218=group_item_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_item_list218.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:422:53: ( USING ! QUOTEDSTRING )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==USING) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:422:55: USING ! QUOTEDSTRING
                    {
                    USING219=(Token)match(input,USING,FOLLOW_USING_in_group_clause2398); if (state.failed) return retval;

                    QUOTEDSTRING220=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_group_clause2401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING220_tree = 
                    (Object)adaptor.create(QUOTEDSTRING220)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING220_tree);
                    }

                    }
                    break;

            }


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:422:78: ( partition_clause )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==PARTITION) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:422:78: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_group_clause2406);
                    partition_clause221=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause221.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class group_item_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item_list"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:425:1: group_item_list : group_item ( COMMA group_item )* -> ( group_item )+ ;
    public final QueryParser.group_item_list_return group_item_list() throws RecognitionException {
        QueryParser.group_item_list_return retval = new QueryParser.group_item_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA223=null;
        QueryParser.group_item_return group_item222 =null;

        QueryParser.group_item_return group_item224 =null;


        Object COMMA223_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_group_item=new RewriteRuleSubtreeStream(adaptor,"rule group_item");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:425:17: ( group_item ( COMMA group_item )* -> ( group_item )+ )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:425:19: group_item ( COMMA group_item )*
            {
            pushFollow(FOLLOW_group_item_in_group_item_list2416);
            group_item222=group_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_item.add(group_item222.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:425:30: ( COMMA group_item )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==COMMA) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:425:32: COMMA group_item
            	    {
            	    COMMA223=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_item_list2420); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA223);


            	    pushFollow(FOLLOW_group_item_in_group_item_list2422);
            	    group_item224=group_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_group_item.add(group_item224.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            // AST REWRITE
            // elements: group_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 426:16: -> ( group_item )+
            {
                if ( !(stream_group_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_group_item.hasNext() ) {
                    adaptor.addChild(root_0, stream_group_item.nextTree());

                }
                stream_group_item.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item_list"


    public static class group_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:429:1: group_item : rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? ;
    public final QueryParser.group_item_return group_item() throws RecognitionException {
        QueryParser.group_item_return retval = new QueryParser.group_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ALL227=null;
        Token ANY228=null;
        Token set229=null;
        QueryParser.rel_return rel225 =null;

        QueryParser.join_group_by_clause_return join_group_by_clause226 =null;


        Object ALL227_tree=null;
        Object ANY228_tree=null;
        Object set229_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:429:12: ( rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:429:14: rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_rel_in_group_item2454);
            rel225=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel225.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:429:18: ( join_group_by_clause | ALL | ANY )
            int alt60=3;
            switch ( input.LA(1) ) {
            case BY:
                {
                alt60=1;
                }
                break;
            case ALL:
                {
                alt60=2;
                }
                break;
            case ANY:
                {
                alt60=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;

            }

            switch (alt60) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:429:20: join_group_by_clause
                    {
                    pushFollow(FOLLOW_join_group_by_clause_in_group_item2458);
                    join_group_by_clause226=join_group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_group_by_clause226.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:429:43: ALL
                    {
                    ALL227=(Token)match(input,ALL,FOLLOW_ALL_in_group_item2462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL227_tree = 
                    (Object)adaptor.create(ALL227)
                    ;
                    adaptor.addChild(root_0, ALL227_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:429:49: ANY
                    {
                    ANY228=(Token)match(input,ANY,FOLLOW_ANY_in_group_item2466); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANY228_tree = 
                    (Object)adaptor.create(ANY228)
                    ;
                    adaptor.addChild(root_0, ANY228_tree);
                    }

                    }
                    break;

            }


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:429:55: ( INNER | OUTER )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==INNER||LA61_0==OUTER) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
                    {
                    set229=(Token)input.LT(1);

                    if ( input.LA(1)==INNER||input.LA(1)==OUTER ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set229)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item"


    public static class identifier_plus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "identifier_plus"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:434:1: identifier_plus : ( IDENTIFIER | reserved_identifier_whitelist -> IDENTIFIER[$reserved_identifier_whitelist.text] );
    public final QueryParser.identifier_plus_return identifier_plus() throws RecognitionException {
        QueryParser.identifier_plus_return retval = new QueryParser.identifier_plus_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IDENTIFIER230=null;
        QueryParser.reserved_identifier_whitelist_return reserved_identifier_whitelist231 =null;


        Object IDENTIFIER230_tree=null;
        RewriteRuleSubtreeStream stream_reserved_identifier_whitelist=new RewriteRuleSubtreeStream(adaptor,"rule reserved_identifier_whitelist");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:434:17: ( IDENTIFIER | reserved_identifier_whitelist -> IDENTIFIER[$reserved_identifier_whitelist.text] )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==IDENTIFIER) ) {
                alt62=1;
            }
            else if ( (LA62_0==CUBE||(LA62_0 >= ELSE && LA62_0 <= END)||LA62_0==IN||LA62_0==RANK||LA62_0==THEN||LA62_0==WHEN) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;

            }
            switch (alt62) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:434:19: IDENTIFIER
                    {
                    root_0 = (Object)adaptor.nil();


                    IDENTIFIER230=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_identifier_plus2490); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER230_tree = 
                    (Object)adaptor.create(IDENTIFIER230)
                    ;
                    adaptor.addChild(root_0, IDENTIFIER230_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:434:32: reserved_identifier_whitelist
                    {
                    pushFollow(FOLLOW_reserved_identifier_whitelist_in_identifier_plus2494);
                    reserved_identifier_whitelist231=reserved_identifier_whitelist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reserved_identifier_whitelist.add(reserved_identifier_whitelist231.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 434:62: -> IDENTIFIER[$reserved_identifier_whitelist.text]
                    {
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(IDENTIFIER, (reserved_identifier_whitelist231!=null?input.toString(reserved_identifier_whitelist231.start,reserved_identifier_whitelist231.stop):null))
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "identifier_plus"


    public static class explicit_field_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explicit_field_def"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:437:1: explicit_field_def : ( identifier_plus ( COLON type )? -> ^( FIELD_DEF identifier_plus ( type )? ) | explicit_type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER explicit_type ) );
    public final QueryParser.explicit_field_def_return explicit_field_def() throws RecognitionException {
        QueryParser.explicit_field_def_return retval = new QueryParser.explicit_field_def_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON233=null;
        QueryParser.identifier_plus_return identifier_plus232 =null;

        QueryParser.type_return type234 =null;

        QueryParser.explicit_type_return explicit_type235 =null;


        Object COLON233_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_explicit_type=new RewriteRuleSubtreeStream(adaptor,"rule explicit_type");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:437:20: ( identifier_plus ( COLON type )? -> ^( FIELD_DEF identifier_plus ( type )? ) | explicit_type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER explicit_type ) )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==CUBE||(LA64_0 >= ELSE && LA64_0 <= END)||LA64_0==IDENTIFIER||LA64_0==IN||LA64_0==RANK||LA64_0==THEN||LA64_0==WHEN) ) {
                alt64=1;
            }
            else if ( ((LA64_0 >= BAG && LA64_0 <= BIGDECIMAL)||LA64_0==BIGINTEGER||LA64_0==BOOLEAN||LA64_0==BYTEARRAY||LA64_0==CHARARRAY||LA64_0==DATETIME||LA64_0==DOUBLE||LA64_0==FLOAT||LA64_0==INT||LA64_0==LONG||LA64_0==MAP||LA64_0==TUPLE) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }
            switch (alt64) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:437:22: identifier_plus ( COLON type )?
                    {
                    pushFollow(FOLLOW_identifier_plus_in_explicit_field_def2508);
                    identifier_plus232=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus232.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:437:38: ( COLON type )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==COLON) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:437:40: COLON type
                            {
                            COLON233=(Token)match(input,COLON,FOLLOW_COLON_in_explicit_field_def2512); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON233);


                            pushFollow(FOLLOW_type_in_explicit_field_def2514);
                            type234=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type234.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: identifier_plus, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 437:54: -> ^( FIELD_DEF identifier_plus ( type )? )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:437:57: ^( FIELD_DEF identifier_plus ( type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_DEF, "FIELD_DEF")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:437:86: ( type )?
                        if ( stream_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_type.nextTree());

                        }
                        stream_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:438:22: explicit_type
                    {
                    pushFollow(FOLLOW_explicit_type_in_explicit_field_def2553);
                    explicit_type235=explicit_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_type.add(explicit_type235.getTree());

                    // AST REWRITE
                    // elements: explicit_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 438:36: -> ^( FIELD_DEF_WITHOUT_IDENTIFIER explicit_type )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:438:39: ^( FIELD_DEF_WITHOUT_IDENTIFIER explicit_type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_DEF_WITHOUT_IDENTIFIER, "FIELD_DEF_WITHOUT_IDENTIFIER")
                        , root_1);

                        adaptor.addChild(root_1, stream_explicit_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explicit_field_def"


    public static class field_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:441:1: field_def : ( explicit_field_def | implicit_type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER implicit_type ) );
    public final QueryParser.field_def_return field_def() throws RecognitionException {
        QueryParser.field_def_return retval = new QueryParser.field_def_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.explicit_field_def_return explicit_field_def236 =null;

        QueryParser.implicit_type_return implicit_type237 =null;


        RewriteRuleSubtreeStream stream_implicit_type=new RewriteRuleSubtreeStream(adaptor,"rule implicit_type");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:441:11: ( explicit_field_def | implicit_type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER implicit_type ) )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( ((LA65_0 >= BAG && LA65_0 <= BIGDECIMAL)||LA65_0==BIGINTEGER||LA65_0==BOOLEAN||LA65_0==BYTEARRAY||LA65_0==CHARARRAY||(LA65_0 >= CUBE && LA65_0 <= DATETIME)||LA65_0==DOUBLE||(LA65_0 >= ELSE && LA65_0 <= END)||LA65_0==FLOAT||LA65_0==IDENTIFIER||LA65_0==IN||LA65_0==INT||LA65_0==LONG||LA65_0==MAP||LA65_0==RANK||LA65_0==THEN||LA65_0==TUPLE||LA65_0==WHEN) ) {
                alt65=1;
            }
            else if ( ((LA65_0 >= LEFT_BRACKET && LA65_0 <= LEFT_PAREN)) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }
            switch (alt65) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:441:13: explicit_field_def
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_explicit_field_def_in_field_def2572);
                    explicit_field_def236=explicit_field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_field_def236.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:442:13: implicit_type
                    {
                    pushFollow(FOLLOW_implicit_type_in_field_def2586);
                    implicit_type237=implicit_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implicit_type.add(implicit_type237.getTree());

                    // AST REWRITE
                    // elements: implicit_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 442:27: -> ^( FIELD_DEF_WITHOUT_IDENTIFIER implicit_type )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:442:30: ^( FIELD_DEF_WITHOUT_IDENTIFIER implicit_type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_DEF_WITHOUT_IDENTIFIER, "FIELD_DEF_WITHOUT_IDENTIFIER")
                        , root_1);

                        adaptor.addChild(root_1, stream_implicit_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def"


    public static class field_def_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def_list"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:445:1: field_def_list : field_def ( COMMA ! field_def )* ;
    public final QueryParser.field_def_list_return field_def_list() throws RecognitionException {
        QueryParser.field_def_list_return retval = new QueryParser.field_def_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA239=null;
        QueryParser.field_def_return field_def238 =null;

        QueryParser.field_def_return field_def240 =null;


        Object COMMA239_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:445:16: ( field_def ( COMMA ! field_def )* )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:445:18: field_def ( COMMA ! field_def )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_def_in_field_def_list2605);
            field_def238=field_def();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def238.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:445:28: ( COMMA ! field_def )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==COMMA) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:445:30: COMMA ! field_def
            	    {
            	    COMMA239=(Token)match(input,COMMA,FOLLOW_COMMA_in_field_def_list2609); if (state.failed) return retval;

            	    pushFollow(FOLLOW_field_def_in_field_def_list2612);
            	    field_def240=field_def();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def240.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def_list"


    public static class as_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "as_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:451:1: as_clause : AS ^ ( explicit_field_def | ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !) ) ;
    public final QueryParser.as_clause_return as_clause() throws RecognitionException {
        QueryParser.as_clause_return retval = new QueryParser.as_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AS241=null;
        Token LEFT_PAREN243=null;
        Token RIGHT_PAREN245=null;
        QueryParser.explicit_field_def_return explicit_field_def242 =null;

        QueryParser.field_def_list_return field_def_list244 =null;


        Object AS241_tree=null;
        Object LEFT_PAREN243_tree=null;
        Object RIGHT_PAREN245_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:451:11: ( AS ^ ( explicit_field_def | ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !) ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:451:13: AS ^ ( explicit_field_def | ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !) )
            {
            root_0 = (Object)adaptor.nil();


            AS241=(Token)match(input,AS,FOLLOW_AS_in_as_clause2627); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS241_tree = 
            (Object)adaptor.create(AS241)
            ;
            root_0 = (Object)adaptor.becomeRoot(AS241_tree, root_0);
            }

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:451:17: ( explicit_field_def | ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !) )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( ((LA68_0 >= BAG && LA68_0 <= BIGDECIMAL)||LA68_0==BIGINTEGER||LA68_0==BOOLEAN||LA68_0==BYTEARRAY||LA68_0==CHARARRAY||(LA68_0 >= CUBE && LA68_0 <= DATETIME)||LA68_0==DOUBLE||(LA68_0 >= ELSE && LA68_0 <= END)||LA68_0==FLOAT||LA68_0==IDENTIFIER||LA68_0==IN||LA68_0==INT||LA68_0==LONG||LA68_0==MAP||LA68_0==RANK||LA68_0==THEN||LA68_0==TUPLE||LA68_0==WHEN) ) {
                alt68=1;
            }
            else if ( (LA68_0==LEFT_PAREN) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;

            }
            switch (alt68) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:451:19: explicit_field_def
                    {
                    pushFollow(FOLLOW_explicit_field_def_in_as_clause2632);
                    explicit_field_def242=explicit_field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_field_def242.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:451:40: ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !)
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:451:40: ( LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !)
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:451:42: LEFT_PAREN ! ( field_def_list )? RIGHT_PAREN !
                    {
                    LEFT_PAREN243=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_as_clause2638); if (state.failed) return retval;

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:451:54: ( field_def_list )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( ((LA67_0 >= BAG && LA67_0 <= BIGDECIMAL)||LA67_0==BIGINTEGER||LA67_0==BOOLEAN||LA67_0==BYTEARRAY||LA67_0==CHARARRAY||(LA67_0 >= CUBE && LA67_0 <= DATETIME)||LA67_0==DOUBLE||(LA67_0 >= ELSE && LA67_0 <= END)||LA67_0==FLOAT||LA67_0==IDENTIFIER||LA67_0==IN||LA67_0==INT||(LA67_0 >= LEFT_BRACKET && LA67_0 <= LEFT_PAREN)||LA67_0==LONG||LA67_0==MAP||LA67_0==RANK||LA67_0==THEN||LA67_0==TUPLE||LA67_0==WHEN) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:451:54: field_def_list
                            {
                            pushFollow(FOLLOW_field_def_list_in_as_clause2641);
                            field_def_list244=field_def_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list244.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN245=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_as_clause2644); if (state.failed) return retval;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "as_clause"


    public static class stream_cmd_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd_list"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:456:1: stream_cmd_list : stream_cmd ( COMMA stream_cmd )* -> ( stream_cmd )+ ;
    public final QueryParser.stream_cmd_list_return stream_cmd_list() throws RecognitionException {
        QueryParser.stream_cmd_list_return retval = new QueryParser.stream_cmd_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA247=null;
        QueryParser.stream_cmd_return stream_cmd246 =null;

        QueryParser.stream_cmd_return stream_cmd248 =null;


        Object COMMA247_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_stream_cmd=new RewriteRuleSubtreeStream(adaptor,"rule stream_cmd");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:456:17: ( stream_cmd ( COMMA stream_cmd )* -> ( stream_cmd )+ )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:456:19: stream_cmd ( COMMA stream_cmd )*
            {
            pushFollow(FOLLOW_stream_cmd_in_stream_cmd_list2660);
            stream_cmd246=stream_cmd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stream_cmd.add(stream_cmd246.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:456:30: ( COMMA stream_cmd )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==COMMA) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:456:32: COMMA stream_cmd
            	    {
            	    COMMA247=(Token)match(input,COMMA,FOLLOW_COMMA_in_stream_cmd_list2664); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA247);


            	    pushFollow(FOLLOW_stream_cmd_in_stream_cmd_list2666);
            	    stream_cmd248=stream_cmd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stream_cmd.add(stream_cmd248.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            // AST REWRITE
            // elements: stream_cmd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 456:52: -> ( stream_cmd )+
            {
                if ( !(stream_stream_cmd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_stream_cmd.hasNext() ) {
                    adaptor.addChild(root_0, stream_stream_cmd.nextTree());

                }
                stream_stream_cmd.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd_list"


    public static class stream_cmd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:459:1: stream_cmd : ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! func_clause )? ;
    public final QueryParser.stream_cmd_return stream_cmd() throws RecognitionException {
        QueryParser.stream_cmd_return retval = new QueryParser.stream_cmd_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set249=null;
        Token USING250=null;
        QueryParser.func_clause_return func_clause251 =null;


        Object set249_tree=null;
        Object USING250_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:459:12: ( ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! func_clause )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:459:14: ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            set249=(Token)input.LT(1);

            set249=(Token)input.LT(1);

            if ( input.LA(1)==QUOTEDSTRING||(input.LA(1) >= STDIN && input.LA(1) <= STDOUT) ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set249)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:459:49: ( USING ! func_clause )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==USING) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:459:51: USING ! func_clause
                    {
                    USING250=(Token)match(input,USING,FOLLOW_USING_in_stream_cmd2700); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_stream_cmd2703);
                    func_clause251=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause251.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd"


    public static class cmd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cmd"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:462:1: cmd : EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* ;
    public final QueryParser.cmd_return cmd() throws RecognitionException {
        QueryParser.cmd_return retval = new QueryParser.cmd_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXECCOMMAND252=null;
        QueryParser.ship_clause_return ship_clause253 =null;

        QueryParser.cache_clause_return cache_clause254 =null;

        QueryParser.input_clause_return input_clause255 =null;

        QueryParser.output_clause_return output_clause256 =null;

        QueryParser.error_clause_return error_clause257 =null;


        Object EXECCOMMAND252_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:462:5: ( EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:462:7: EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
            {
            root_0 = (Object)adaptor.nil();


            EXECCOMMAND252=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_cmd2715); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECCOMMAND252_tree = 
            (Object)adaptor.create(EXECCOMMAND252)
            ;
            root_0 = (Object)adaptor.becomeRoot(EXECCOMMAND252_tree, root_0);
            }

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:462:20: ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
            loop71:
            do {
                int alt71=6;
                switch ( input.LA(1) ) {
                case SHIP:
                    {
                    alt71=1;
                    }
                    break;
                case CACHE:
                    {
                    alt71=2;
                    }
                    break;
                case INPUT:
                    {
                    alt71=3;
                    }
                    break;
                case OUTPUT:
                    {
                    alt71=4;
                    }
                    break;
                case STDERROR:
                    {
                    alt71=5;
                    }
                    break;

                }

                switch (alt71) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:462:22: ship_clause
            	    {
            	    pushFollow(FOLLOW_ship_clause_in_cmd2720);
            	    ship_clause253=ship_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ship_clause253.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:462:36: cache_clause
            	    {
            	    pushFollow(FOLLOW_cache_clause_in_cmd2724);
            	    cache_clause254=cache_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cache_clause254.getTree());

            	    }
            	    break;
            	case 3 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:462:51: input_clause
            	    {
            	    pushFollow(FOLLOW_input_clause_in_cmd2728);
            	    input_clause255=input_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, input_clause255.getTree());

            	    }
            	    break;
            	case 4 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:462:66: output_clause
            	    {
            	    pushFollow(FOLLOW_output_clause_in_cmd2732);
            	    output_clause256=output_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, output_clause256.getTree());

            	    }
            	    break;
            	case 5 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:462:82: error_clause
            	    {
            	    pushFollow(FOLLOW_error_clause_in_cmd2736);
            	    error_clause257=error_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, error_clause257.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmd"


    public static class rel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:465:1: rel : ( identifier_plus | previous_rel | nested_op_clause );
    public final QueryParser.rel_return rel() throws RecognitionException {
        QueryParser.rel_return retval = new QueryParser.rel_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.identifier_plus_return identifier_plus258 =null;

        QueryParser.previous_rel_return previous_rel259 =null;

        QueryParser.nested_op_clause_return nested_op_clause260 =null;



        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:465:5: ( identifier_plus | previous_rel | nested_op_clause )
            int alt72=3;
            switch ( input.LA(1) ) {
            case CUBE:
            case ELSE:
            case END:
            case IDENTIFIER:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                alt72=1;
                }
                break;
            case ARROBA:
                {
                alt72=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt72=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;

            }

            switch (alt72) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:465:7: identifier_plus
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_plus_in_rel2748);
                    identifier_plus258=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus258.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:465:25: previous_rel
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_previous_rel_in_rel2752);
                    previous_rel259=previous_rel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, previous_rel259.getTree());

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:465:40: nested_op_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_op_clause_in_rel2756);
                    nested_op_clause260=nested_op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_clause260.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel"


    public static class previous_rel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "previous_rel"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:468:1: previous_rel : ARROBA ;
    public final QueryParser.previous_rel_return previous_rel() throws RecognitionException {
        QueryParser.previous_rel_return retval = new QueryParser.previous_rel_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ARROBA261=null;

        Object ARROBA261_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:468:14: ( ARROBA )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:468:16: ARROBA
            {
            root_0 = (Object)adaptor.nil();


            ARROBA261=(Token)match(input,ARROBA,FOLLOW_ARROBA_in_previous_rel2765); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ARROBA261_tree = 
            (Object)adaptor.create(ARROBA261)
            ;
            adaptor.addChild(root_0, ARROBA261_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "previous_rel"


    public static class store_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "store_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:471:1: store_clause : STORE ^ rel INTO ! QUOTEDSTRING ( USING ! func_clause )? ;
    public final QueryParser.store_clause_return store_clause() throws RecognitionException {
        QueryParser.store_clause_return retval = new QueryParser.store_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STORE262=null;
        Token INTO264=null;
        Token QUOTEDSTRING265=null;
        Token USING266=null;
        QueryParser.rel_return rel263 =null;

        QueryParser.func_clause_return func_clause267 =null;


        Object STORE262_tree=null;
        Object INTO264_tree=null;
        Object QUOTEDSTRING265_tree=null;
        Object USING266_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:471:14: ( STORE ^ rel INTO ! QUOTEDSTRING ( USING ! func_clause )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:471:16: STORE ^ rel INTO ! QUOTEDSTRING ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            STORE262=(Token)match(input,STORE,FOLLOW_STORE_in_store_clause2774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STORE262_tree = 
            (Object)adaptor.create(STORE262)
            ;
            root_0 = (Object)adaptor.becomeRoot(STORE262_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_store_clause2777);
            rel263=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel263.getTree());

            INTO264=(Token)match(input,INTO,FOLLOW_INTO_in_store_clause2779); if (state.failed) return retval;

            QUOTEDSTRING265=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_store_clause2782); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING265_tree = 
            (Object)adaptor.create(QUOTEDSTRING265)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING265_tree);
            }

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:471:46: ( USING ! func_clause )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==USING) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:471:48: USING ! func_clause
                    {
                    USING266=(Token)match(input,USING,FOLLOW_USING_in_store_clause2786); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_store_clause2789);
                    func_clause267=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause267.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "store_clause"


    public static class filter_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filter_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:474:1: filter_clause : FILTER ^ rel BY ! cond ;
    public final QueryParser.filter_clause_return filter_clause() throws RecognitionException {
        QueryParser.filter_clause_return retval = new QueryParser.filter_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FILTER268=null;
        Token BY270=null;
        QueryParser.rel_return rel269 =null;

        QueryParser.cond_return cond271 =null;


        Object FILTER268_tree=null;
        Object BY270_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:474:15: ( FILTER ^ rel BY ! cond )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:474:17: FILTER ^ rel BY ! cond
            {
            root_0 = (Object)adaptor.nil();


            FILTER268=(Token)match(input,FILTER,FOLLOW_FILTER_in_filter_clause2801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER268_tree = 
            (Object)adaptor.create(FILTER268)
            ;
            root_0 = (Object)adaptor.becomeRoot(FILTER268_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_filter_clause2804);
            rel269=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel269.getTree());

            BY270=(Token)match(input,BY,FOLLOW_BY_in_filter_clause2806); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_filter_clause2809);
            cond271=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond271.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filter_clause"


    public static class stream_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:477:1: stream_clause : STREAM ^ rel THROUGH ! ( EXECCOMMAND | identifier_plus ) ( as_clause )? ;
    public final QueryParser.stream_clause_return stream_clause() throws RecognitionException {
        QueryParser.stream_clause_return retval = new QueryParser.stream_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STREAM272=null;
        Token THROUGH274=null;
        Token EXECCOMMAND275=null;
        QueryParser.rel_return rel273 =null;

        QueryParser.identifier_plus_return identifier_plus276 =null;

        QueryParser.as_clause_return as_clause277 =null;


        Object STREAM272_tree=null;
        Object THROUGH274_tree=null;
        Object EXECCOMMAND275_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:477:15: ( STREAM ^ rel THROUGH ! ( EXECCOMMAND | identifier_plus ) ( as_clause )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:477:17: STREAM ^ rel THROUGH ! ( EXECCOMMAND | identifier_plus ) ( as_clause )?
            {
            root_0 = (Object)adaptor.nil();


            STREAM272=(Token)match(input,STREAM,FOLLOW_STREAM_in_stream_clause2818); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STREAM272_tree = 
            (Object)adaptor.create(STREAM272)
            ;
            root_0 = (Object)adaptor.becomeRoot(STREAM272_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_stream_clause2821);
            rel273=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel273.getTree());

            THROUGH274=(Token)match(input,THROUGH,FOLLOW_THROUGH_in_stream_clause2823); if (state.failed) return retval;

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:477:38: ( EXECCOMMAND | identifier_plus )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==EXECCOMMAND) ) {
                alt74=1;
            }
            else if ( (LA74_0==CUBE||(LA74_0 >= ELSE && LA74_0 <= END)||LA74_0==IDENTIFIER||LA74_0==IN||LA74_0==RANK||LA74_0==THEN||LA74_0==WHEN) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;

            }
            switch (alt74) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:477:40: EXECCOMMAND
                    {
                    EXECCOMMAND275=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_stream_clause2828); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND275_tree = 
                    (Object)adaptor.create(EXECCOMMAND275)
                    ;
                    adaptor.addChild(root_0, EXECCOMMAND275_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:477:54: identifier_plus
                    {
                    pushFollow(FOLLOW_identifier_plus_in_stream_clause2832);
                    identifier_plus276=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus276.getTree());

                    }
                    break;

            }


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:477:72: ( as_clause )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==AS) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:477:72: as_clause
                    {
                    pushFollow(FOLLOW_as_clause_in_stream_clause2836);
                    as_clause277=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_clause277.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_clause"


    public static class mr_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mr_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:480:1: mr_clause : MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )? ;
    public final QueryParser.mr_clause_return mr_clause() throws RecognitionException {
        QueryParser.mr_clause_return retval = new QueryParser.mr_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MAPREDUCE278=null;
        Token QUOTEDSTRING279=null;
        Token LEFT_PAREN280=null;
        Token RIGHT_PAREN282=null;
        Token EXECCOMMAND285=null;
        QueryParser.path_list_return path_list281 =null;

        QueryParser.store_clause_return store_clause283 =null;

        QueryParser.load_clause_return load_clause284 =null;


        Object MAPREDUCE278_tree=null;
        Object QUOTEDSTRING279_tree=null;
        Object LEFT_PAREN280_tree=null;
        Object RIGHT_PAREN282_tree=null;
        Object EXECCOMMAND285_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:480:11: ( MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:480:13: MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )?
            {
            root_0 = (Object)adaptor.nil();


            MAPREDUCE278=(Token)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_mr_clause2846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAPREDUCE278_tree = 
            (Object)adaptor.create(MAPREDUCE278)
            ;
            root_0 = (Object)adaptor.becomeRoot(MAPREDUCE278_tree, root_0);
            }

            QUOTEDSTRING279=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_mr_clause2849); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING279_tree = 
            (Object)adaptor.create(QUOTEDSTRING279)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING279_tree);
            }

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:480:37: ( LEFT_PAREN ! path_list RIGHT_PAREN !)?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==LEFT_PAREN) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:480:39: LEFT_PAREN ! path_list RIGHT_PAREN !
                    {
                    LEFT_PAREN280=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_mr_clause2853); if (state.failed) return retval;

                    pushFollow(FOLLOW_path_list_in_mr_clause2856);
                    path_list281=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list281.getTree());

                    RIGHT_PAREN282=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_mr_clause2858); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_store_clause_in_mr_clause2864);
            store_clause283=store_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, store_clause283.getTree());

            pushFollow(FOLLOW_load_clause_in_mr_clause2866);
            load_clause284=load_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, load_clause284.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:480:102: ( EXECCOMMAND )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==EXECCOMMAND) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:480:102: EXECCOMMAND
                    {
                    EXECCOMMAND285=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_mr_clause2868); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND285_tree = 
                    (Object)adaptor.create(EXECCOMMAND285)
                    ;
                    adaptor.addChild(root_0, EXECCOMMAND285_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mr_clause"


    public static class split_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:483:1: split_clause : SPLIT ^ rel INTO ! split_branch split_branches ;
    public final QueryParser.split_clause_return split_clause() throws RecognitionException {
        QueryParser.split_clause_return retval = new QueryParser.split_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SPLIT286=null;
        Token INTO288=null;
        QueryParser.rel_return rel287 =null;

        QueryParser.split_branch_return split_branch289 =null;

        QueryParser.split_branches_return split_branches290 =null;


        Object SPLIT286_tree=null;
        Object INTO288_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:483:14: ( SPLIT ^ rel INTO ! split_branch split_branches )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:483:16: SPLIT ^ rel INTO ! split_branch split_branches
            {
            root_0 = (Object)adaptor.nil();


            SPLIT286=(Token)match(input,SPLIT,FOLLOW_SPLIT_in_split_clause2878); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SPLIT286_tree = 
            (Object)adaptor.create(SPLIT286)
            ;
            root_0 = (Object)adaptor.becomeRoot(SPLIT286_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_split_clause2881);
            rel287=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel287.getTree());

            INTO288=(Token)match(input,INTO,FOLLOW_INTO_in_split_clause2883); if (state.failed) return retval;

            pushFollow(FOLLOW_split_branch_in_split_clause2886);
            split_branch289=split_branch();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, split_branch289.getTree());

            pushFollow(FOLLOW_split_branches_in_split_clause2888);
            split_branches290=split_branches();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, split_branches290.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_clause"


    public static class split_branch_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_branch"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:486:1: split_branch : identifier_plus IF cond -> ^( SPLIT_BRANCH identifier_plus cond ) ;
    public final QueryParser.split_branch_return split_branch() throws RecognitionException {
        QueryParser.split_branch_return retval = new QueryParser.split_branch_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IF292=null;
        QueryParser.identifier_plus_return identifier_plus291 =null;

        QueryParser.cond_return cond293 =null;


        Object IF292_tree=null;
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:486:14: ( identifier_plus IF cond -> ^( SPLIT_BRANCH identifier_plus cond ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:486:16: identifier_plus IF cond
            {
            pushFollow(FOLLOW_identifier_plus_in_split_branch2897);
            identifier_plus291=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus291.getTree());

            IF292=(Token)match(input,IF,FOLLOW_IF_in_split_branch2899); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF.add(IF292);


            pushFollow(FOLLOW_cond_in_split_branch2901);
            cond293=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cond.add(cond293.getTree());

            // AST REWRITE
            // elements: identifier_plus, cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 486:40: -> ^( SPLIT_BRANCH identifier_plus cond )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:486:43: ^( SPLIT_BRANCH identifier_plus cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SPLIT_BRANCH, "SPLIT_BRANCH")
                , root_1);

                adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                adaptor.addChild(root_1, stream_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_branch"


    public static class split_otherwise_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_otherwise"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:489:1: split_otherwise : identifier_plus OTHERWISE ^;
    public final QueryParser.split_otherwise_return split_otherwise() throws RecognitionException {
        QueryParser.split_otherwise_return retval = new QueryParser.split_otherwise_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OTHERWISE295=null;
        QueryParser.identifier_plus_return identifier_plus294 =null;


        Object OTHERWISE295_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:489:17: ( identifier_plus OTHERWISE ^)
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:489:19: identifier_plus OTHERWISE ^
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_plus_in_split_otherwise2922);
            identifier_plus294=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus294.getTree());

            OTHERWISE295=(Token)match(input,OTHERWISE,FOLLOW_OTHERWISE_in_split_otherwise2924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OTHERWISE295_tree = 
            (Object)adaptor.create(OTHERWISE295)
            ;
            root_0 = (Object)adaptor.becomeRoot(OTHERWISE295_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_otherwise"


    public static class split_branches_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_branches"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:492:1: split_branches : ( COMMA ! split_branch ( split_branches )? | COMMA ! split_otherwise );
    public final QueryParser.split_branches_return split_branches() throws RecognitionException {
        QueryParser.split_branches_return retval = new QueryParser.split_branches_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA296=null;
        Token COMMA299=null;
        QueryParser.split_branch_return split_branch297 =null;

        QueryParser.split_branches_return split_branches298 =null;

        QueryParser.split_otherwise_return split_otherwise300 =null;


        Object COMMA296_tree=null;
        Object COMMA299_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:492:16: ( COMMA ! split_branch ( split_branches )? | COMMA ! split_otherwise )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==COMMA) ) {
                int LA79_1 = input.LA(2);

                if ( (LA79_1==IDENTIFIER) ) {
                    int LA79_2 = input.LA(3);

                    if ( (LA79_2==IF) ) {
                        alt79=1;
                    }
                    else if ( (LA79_2==OTHERWISE) ) {
                        alt79=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 79, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA79_1==CUBE||(LA79_1 >= ELSE && LA79_1 <= END)||LA79_1==IN||LA79_1==RANK||LA79_1==THEN||LA79_1==WHEN) ) {
                    int LA79_3 = input.LA(3);

                    if ( (LA79_3==IF) ) {
                        alt79=1;
                    }
                    else if ( (LA79_3==OTHERWISE) ) {
                        alt79=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 79, 3, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 79, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }
            switch (alt79) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:492:18: COMMA ! split_branch ( split_branches )?
                    {
                    root_0 = (Object)adaptor.nil();


                    COMMA296=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_branches2934); if (state.failed) return retval;

                    pushFollow(FOLLOW_split_branch_in_split_branches2937);
                    split_branch297=split_branch();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, split_branch297.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:492:38: ( split_branches )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==COMMA) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:492:38: split_branches
                            {
                            pushFollow(FOLLOW_split_branches_in_split_branches2939);
                            split_branches298=split_branches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, split_branches298.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:493:18: COMMA ! split_otherwise
                    {
                    root_0 = (Object)adaptor.nil();


                    COMMA299=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_branches2959); if (state.failed) return retval;

                    pushFollow(FOLLOW_split_otherwise_in_split_branches2962);
                    split_otherwise300=split_otherwise();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, split_otherwise300.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_branches"


    public static class limit_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limit_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:496:1: limit_clause : LIMIT ^ rel expr ;
    public final QueryParser.limit_clause_return limit_clause() throws RecognitionException {
        QueryParser.limit_clause_return retval = new QueryParser.limit_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LIMIT301=null;
        QueryParser.rel_return rel302 =null;

        QueryParser.expr_return expr303 =null;


        Object LIMIT301_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:496:14: ( LIMIT ^ rel expr )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:496:16: LIMIT ^ rel expr
            {
            root_0 = (Object)adaptor.nil();


            LIMIT301=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limit_clause2971); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT301_tree = 
            (Object)adaptor.create(LIMIT301)
            ;
            root_0 = (Object)adaptor.becomeRoot(LIMIT301_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_limit_clause2974);
            rel302=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel302.getTree());

            pushFollow(FOLLOW_expr_in_limit_clause2976);
            expr303=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr303.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limit_clause"


    public static class sample_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sample_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:499:1: sample_clause : SAMPLE ^ rel expr ;
    public final QueryParser.sample_clause_return sample_clause() throws RecognitionException {
        QueryParser.sample_clause_return retval = new QueryParser.sample_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SAMPLE304=null;
        QueryParser.rel_return rel305 =null;

        QueryParser.expr_return expr306 =null;


        Object SAMPLE304_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:499:15: ( SAMPLE ^ rel expr )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:499:17: SAMPLE ^ rel expr
            {
            root_0 = (Object)adaptor.nil();


            SAMPLE304=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_sample_clause2985); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAMPLE304_tree = 
            (Object)adaptor.create(SAMPLE304)
            ;
            root_0 = (Object)adaptor.becomeRoot(SAMPLE304_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_sample_clause2988);
            rel305=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel305.getTree());

            pushFollow(FOLLOW_expr_in_sample_clause2990);
            expr306=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr306.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sample_clause"


    public static class rank_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:502:1: rank_clause : RANK ^ rel ( rank_by_statement )? ;
    public final QueryParser.rank_clause_return rank_clause() throws RecognitionException {
        QueryParser.rank_clause_return retval = new QueryParser.rank_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RANK307=null;
        QueryParser.rel_return rel308 =null;

        QueryParser.rank_by_statement_return rank_by_statement309 =null;


        Object RANK307_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:502:13: ( RANK ^ rel ( rank_by_statement )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:502:15: RANK ^ rel ( rank_by_statement )?
            {
            root_0 = (Object)adaptor.nil();


            RANK307=(Token)match(input,RANK,FOLLOW_RANK_in_rank_clause2999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RANK307_tree = 
            (Object)adaptor.create(RANK307)
            ;
            root_0 = (Object)adaptor.becomeRoot(RANK307_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_rank_clause3002);
            rel308=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel308.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:502:25: ( rank_by_statement )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==BY) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:502:27: rank_by_statement
                    {
                    pushFollow(FOLLOW_rank_by_statement_in_rank_clause3006);
                    rank_by_statement309=rank_by_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_by_statement309.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_clause"


    public static class rank_by_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_by_statement"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:505:1: rank_by_statement : BY ^ rank_by_clause ( DENSE )? ;
    public final QueryParser.rank_by_statement_return rank_by_statement() throws RecognitionException {
        QueryParser.rank_by_statement_return retval = new QueryParser.rank_by_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BY310=null;
        Token DENSE312=null;
        QueryParser.rank_by_clause_return rank_by_clause311 =null;


        Object BY310_tree=null;
        Object DENSE312_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:505:19: ( BY ^ rank_by_clause ( DENSE )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:505:21: BY ^ rank_by_clause ( DENSE )?
            {
            root_0 = (Object)adaptor.nil();


            BY310=(Token)match(input,BY,FOLLOW_BY_in_rank_by_statement3018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY310_tree = 
            (Object)adaptor.create(BY310)
            ;
            root_0 = (Object)adaptor.becomeRoot(BY310_tree, root_0);
            }

            pushFollow(FOLLOW_rank_by_clause_in_rank_by_statement3021);
            rank_by_clause311=rank_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_by_clause311.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:505:40: ( DENSE )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==DENSE) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:505:40: DENSE
                    {
                    DENSE312=(Token)match(input,DENSE,FOLLOW_DENSE_in_rank_by_statement3023); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DENSE312_tree = 
                    (Object)adaptor.create(DENSE312)
                    ;
                    adaptor.addChild(root_0, DENSE312_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_by_statement"


    public static class rank_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_by_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:508:1: rank_by_clause : ( STAR ( ASC | DESC )? | rank_list );
    public final QueryParser.rank_by_clause_return rank_by_clause() throws RecognitionException {
        QueryParser.rank_by_clause_return retval = new QueryParser.rank_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR313=null;
        Token set314=null;
        QueryParser.rank_list_return rank_list315 =null;


        Object STAR313_tree=null;
        Object set314_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:508:16: ( STAR ( ASC | DESC )? | rank_list )
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==STAR) ) {
                alt83=1;
            }
            else if ( (LA83_0==CUBE||LA83_0==DOLLARVAR||(LA83_0 >= DOUBLE_PERIOD && LA83_0 <= END)||LA83_0==GROUP||LA83_0==IDENTIFIER||LA83_0==IN||LA83_0==RANK||LA83_0==THEN||LA83_0==WHEN) ) {
                alt83=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;

            }
            switch (alt83) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:508:18: STAR ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR313=(Token)match(input,STAR,FOLLOW_STAR_in_rank_by_clause3033); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR313_tree = 
                    (Object)adaptor.create(STAR313)
                    ;
                    adaptor.addChild(root_0, STAR313_tree);
                    }

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:508:23: ( ASC | DESC )?
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==ASC||LA82_0==DESC) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set314=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set314)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:509:18: rank_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rank_list_in_rank_by_clause3063);
                    rank_list315=rank_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_list315.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_by_clause"


    public static class rank_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_list"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:512:1: rank_list : rank_col ( COMMA rank_col )* -> ( rank_col )+ ;
    public final QueryParser.rank_list_return rank_list() throws RecognitionException {
        QueryParser.rank_list_return retval = new QueryParser.rank_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA317=null;
        QueryParser.rank_col_return rank_col316 =null;

        QueryParser.rank_col_return rank_col318 =null;


        Object COMMA317_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_rank_col=new RewriteRuleSubtreeStream(adaptor,"rule rank_col");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:512:11: ( rank_col ( COMMA rank_col )* -> ( rank_col )+ )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:512:13: rank_col ( COMMA rank_col )*
            {
            pushFollow(FOLLOW_rank_col_in_rank_list3072);
            rank_col316=rank_col();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rank_col.add(rank_col316.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:512:22: ( COMMA rank_col )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==COMMA) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:512:24: COMMA rank_col
            	    {
            	    COMMA317=(Token)match(input,COMMA,FOLLOW_COMMA_in_rank_list3076); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA317);


            	    pushFollow(FOLLOW_rank_col_in_rank_list3078);
            	    rank_col318=rank_col();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rank_col.add(rank_col318.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            // AST REWRITE
            // elements: rank_col
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 513:10: -> ( rank_col )+
            {
                if ( !(stream_rank_col.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rank_col.hasNext() ) {
                    adaptor.addChild(root_0, stream_rank_col.nextTree());

                }
                stream_rank_col.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_list"


    public static class rank_col_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_col"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:516:1: rank_col : ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? );
    public final QueryParser.rank_col_return rank_col() throws RecognitionException {
        QueryParser.rank_col_return retval = new QueryParser.rank_col_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set320=null;
        Token set322=null;
        QueryParser.col_range_return col_range319 =null;

        QueryParser.col_ref_return col_ref321 =null;


        Object set320_tree=null;
        Object set322_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:516:10: ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? )
            int alt87=2;
            switch ( input.LA(1) ) {
            case DOLLARVAR:
            case GROUP:
                {
                int LA87_1 = input.LA(2);

                if ( (LA87_1==DOUBLE_PERIOD) ) {
                    alt87=1;
                }
                else if ( (LA87_1==ASC||LA87_1==COMMA||(LA87_1 >= DENSE && LA87_1 <= DESC)||LA87_1==PARALLEL||LA87_1==RIGHT_PAREN||LA87_1==SEMI_COLON) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA87_2 = input.LA(2);

                if ( (LA87_2==DOUBLE_PERIOD) ) {
                    alt87=1;
                }
                else if ( (LA87_2==ASC||LA87_2==COMMA||(LA87_2 >= DENSE && LA87_2 <= DESC)||LA87_2==PARALLEL||LA87_2==RIGHT_PAREN||LA87_2==SEMI_COLON) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 2, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA87_3 = input.LA(2);

                if ( (LA87_3==DOUBLE_PERIOD) ) {
                    alt87=1;
                }
                else if ( (LA87_3==ASC||LA87_3==COMMA||(LA87_3 >= DENSE && LA87_3 <= DESC)||LA87_3==PARALLEL||LA87_3==RIGHT_PAREN||LA87_3==SEMI_COLON) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt87=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }

            switch (alt87) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:516:12: col_range ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_rank_col3104);
                    col_range319=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range319.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:516:22: ( ASC | DESC )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==ASC||LA85_0==DESC) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set320=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set320)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:517:12: col_ref ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_rank_col3128);
                    col_ref321=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref321.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:517:20: ( ASC | DESC )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==ASC||LA86_0==DESC) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set322=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set322)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_col"


    public static class order_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:520:1: order_clause : ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )? ;
    public final QueryParser.order_clause_return order_clause() throws RecognitionException {
        QueryParser.order_clause_return retval = new QueryParser.order_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ORDER323=null;
        Token BY325=null;
        Token USING327=null;
        QueryParser.rel_return rel324 =null;

        QueryParser.order_by_clause_return order_by_clause326 =null;

        QueryParser.func_clause_return func_clause328 =null;


        Object ORDER323_tree=null;
        Object BY325_tree=null;
        Object USING327_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:520:14: ( ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:520:16: ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            ORDER323=(Token)match(input,ORDER,FOLLOW_ORDER_in_order_clause3148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER323_tree = 
            (Object)adaptor.create(ORDER323)
            ;
            root_0 = (Object)adaptor.becomeRoot(ORDER323_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_order_clause3151);
            rel324=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel324.getTree());

            BY325=(Token)match(input,BY,FOLLOW_BY_in_order_clause3153); if (state.failed) return retval;

            pushFollow(FOLLOW_order_by_clause_in_order_clause3156);
            order_by_clause326=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause326.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:520:47: ( USING ! func_clause )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==USING) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:520:49: USING ! func_clause
                    {
                    USING327=(Token)match(input,USING,FOLLOW_USING_in_order_clause3160); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_order_clause3163);
                    func_clause328=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause328.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_clause"


    public static class order_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:523:1: order_by_clause : ( STAR ( ASC | DESC )? | order_col_list );
    public final QueryParser.order_by_clause_return order_by_clause() throws RecognitionException {
        QueryParser.order_by_clause_return retval = new QueryParser.order_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR329=null;
        Token set330=null;
        QueryParser.order_col_list_return order_col_list331 =null;


        Object STAR329_tree=null;
        Object set330_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:523:17: ( STAR ( ASC | DESC )? | order_col_list )
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==STAR) ) {
                alt90=1;
            }
            else if ( (LA90_0==CUBE||LA90_0==DOLLARVAR||(LA90_0 >= DOUBLE_PERIOD && LA90_0 <= END)||LA90_0==GROUP||LA90_0==IDENTIFIER||LA90_0==IN||LA90_0==LEFT_PAREN||LA90_0==RANK||LA90_0==THEN||LA90_0==WHEN) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;

            }
            switch (alt90) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:523:19: STAR ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR329=(Token)match(input,STAR,FOLLOW_STAR_in_order_by_clause3175); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR329_tree = 
                    (Object)adaptor.create(STAR329)
                    ;
                    adaptor.addChild(root_0, STAR329_tree);
                    }

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:523:24: ( ASC | DESC )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==ASC||LA89_0==DESC) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set330=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set330)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:524:19: order_col_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_order_col_list_in_order_by_clause3206);
                    order_col_list331=order_col_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_col_list331.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"


    public static class order_col_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col_list"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:527:1: order_col_list : order_col ( COMMA order_col )* -> ( order_col )+ ;
    public final QueryParser.order_col_list_return order_col_list() throws RecognitionException {
        QueryParser.order_col_list_return retval = new QueryParser.order_col_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA333=null;
        QueryParser.order_col_return order_col332 =null;

        QueryParser.order_col_return order_col334 =null;


        Object COMMA333_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_order_col=new RewriteRuleSubtreeStream(adaptor,"rule order_col");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:527:16: ( order_col ( COMMA order_col )* -> ( order_col )+ )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:527:18: order_col ( COMMA order_col )*
            {
            pushFollow(FOLLOW_order_col_in_order_col_list3215);
            order_col332=order_col();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_order_col.add(order_col332.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:527:28: ( COMMA order_col )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==COMMA) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:527:30: COMMA order_col
            	    {
            	    COMMA333=(Token)match(input,COMMA,FOLLOW_COMMA_in_order_col_list3219); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA333);


            	    pushFollow(FOLLOW_order_col_in_order_col_list3221);
            	    order_col334=order_col();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_order_col.add(order_col334.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            // AST REWRITE
            // elements: order_col
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 528:15: -> ( order_col )+
            {
                if ( !(stream_order_col.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_order_col.hasNext() ) {
                    adaptor.addChild(root_0, stream_order_col.nextTree());

                }
                stream_order_col.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col_list"


    public static class order_col_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:531:1: order_col : ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? | LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !);
    public final QueryParser.order_col_return order_col() throws RecognitionException {
        QueryParser.order_col_return retval = new QueryParser.order_col_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set336=null;
        Token set338=null;
        Token LEFT_PAREN339=null;
        Token set341=null;
        Token RIGHT_PAREN342=null;
        QueryParser.col_range_return col_range335 =null;

        QueryParser.col_ref_return col_ref337 =null;

        QueryParser.col_ref_return col_ref340 =null;


        Object set336_tree=null;
        Object set338_tree=null;
        Object LEFT_PAREN339_tree=null;
        Object set341_tree=null;
        Object RIGHT_PAREN342_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:531:11: ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? | LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !)
            int alt95=3;
            switch ( input.LA(1) ) {
            case DOLLARVAR:
            case GROUP:
                {
                int LA95_1 = input.LA(2);

                if ( (LA95_1==DOUBLE_PERIOD) ) {
                    alt95=1;
                }
                else if ( (LA95_1==ASC||LA95_1==COMMA||LA95_1==DESC||LA95_1==PARALLEL||LA95_1==RIGHT_PAREN||LA95_1==SEMI_COLON||LA95_1==USING) ) {
                    alt95=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA95_2 = input.LA(2);

                if ( (LA95_2==DOUBLE_PERIOD) ) {
                    alt95=1;
                }
                else if ( (LA95_2==ASC||LA95_2==COMMA||LA95_2==DESC||LA95_2==PARALLEL||LA95_2==RIGHT_PAREN||LA95_2==SEMI_COLON||LA95_2==USING) ) {
                    alt95=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 2, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA95_3 = input.LA(2);

                if ( (LA95_3==DOUBLE_PERIOD) ) {
                    alt95=1;
                }
                else if ( (LA95_3==ASC||LA95_3==COMMA||LA95_3==DESC||LA95_3==PARALLEL||LA95_3==RIGHT_PAREN||LA95_3==SEMI_COLON||LA95_3==USING) ) {
                    alt95=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt95=1;
                }
                break;
            case LEFT_PAREN:
                {
                alt95=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }

            switch (alt95) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:531:13: col_range ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_order_col3252);
                    col_range335=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range335.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:531:23: ( ASC | DESC )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==ASC||LA92_0==DESC) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set336=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set336)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:532:13: col_ref ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_order_col3275);
                    col_ref337=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref337.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:532:21: ( ASC | DESC )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==ASC||LA93_0==DESC) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set338=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set338)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:533:13: LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN339=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_order_col3300); if (state.failed) return retval;

                    pushFollow(FOLLOW_col_ref_in_order_col3303);
                    col_ref340=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref340.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:533:33: ( ASC | DESC )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==ASC||LA94_0==DESC) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set341=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set341)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    RIGHT_PAREN342=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_order_col3316); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col"


    public static class distinct_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "distinct_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:536:1: distinct_clause : DISTINCT ^ rel ( partition_clause )? ;
    public final QueryParser.distinct_clause_return distinct_clause() throws RecognitionException {
        QueryParser.distinct_clause_return retval = new QueryParser.distinct_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DISTINCT343=null;
        QueryParser.rel_return rel344 =null;

        QueryParser.partition_clause_return partition_clause345 =null;


        Object DISTINCT343_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:536:17: ( DISTINCT ^ rel ( partition_clause )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:536:19: DISTINCT ^ rel ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            DISTINCT343=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_distinct_clause3326); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT343_tree = 
            (Object)adaptor.create(DISTINCT343)
            ;
            root_0 = (Object)adaptor.becomeRoot(DISTINCT343_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_distinct_clause3329);
            rel344=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel344.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:536:33: ( partition_clause )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==PARTITION) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:536:33: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_distinct_clause3331);
                    partition_clause345=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause345.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "distinct_clause"


    public static class partition_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partition_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:539:1: partition_clause : PARTITION ^ BY ! func_name ;
    public final QueryParser.partition_clause_return partition_clause() throws RecognitionException {
        QueryParser.partition_clause_return retval = new QueryParser.partition_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PARTITION346=null;
        Token BY347=null;
        QueryParser.func_name_return func_name348 =null;


        Object PARTITION346_tree=null;
        Object BY347_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:539:18: ( PARTITION ^ BY ! func_name )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:539:20: PARTITION ^ BY ! func_name
            {
            root_0 = (Object)adaptor.nil();


            PARTITION346=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_partition_clause3341); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARTITION346_tree = 
            (Object)adaptor.create(PARTITION346)
            ;
            root_0 = (Object)adaptor.becomeRoot(PARTITION346_tree, root_0);
            }

            BY347=(Token)match(input,BY,FOLLOW_BY_in_partition_clause3344); if (state.failed) return retval;

            pushFollow(FOLLOW_func_name_in_partition_clause3347);
            func_name348=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, func_name348.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partition_clause"


    public static class rel_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_list"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:542:1: rel_list : rel ( COMMA rel )* -> ( rel )+ ;
    public final QueryParser.rel_list_return rel_list() throws RecognitionException {
        QueryParser.rel_list_return retval = new QueryParser.rel_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA350=null;
        QueryParser.rel_return rel349 =null;

        QueryParser.rel_return rel351 =null;


        Object COMMA350_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:542:10: ( rel ( COMMA rel )* -> ( rel )+ )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:542:12: rel ( COMMA rel )*
            {
            pushFollow(FOLLOW_rel_in_rel_list3356);
            rel349=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel349.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:542:16: ( COMMA rel )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==COMMA) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:542:18: COMMA rel
            	    {
            	    COMMA350=(Token)match(input,COMMA,FOLLOW_COMMA_in_rel_list3360); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA350);


            	    pushFollow(FOLLOW_rel_in_rel_list3362);
            	    rel351=rel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel.add(rel351.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            // AST REWRITE
            // elements: rel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 542:31: -> ( rel )+
            {
                if ( !(stream_rel.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rel.hasNext() ) {
                    adaptor.addChild(root_0, stream_rel.nextTree());

                }
                stream_rel.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_list"


    public static class cross_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cross_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:545:1: cross_clause : CROSS ^ rel_list ( partition_clause )? ;
    public final QueryParser.cross_clause_return cross_clause() throws RecognitionException {
        QueryParser.cross_clause_return retval = new QueryParser.cross_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CROSS352=null;
        QueryParser.rel_list_return rel_list353 =null;

        QueryParser.partition_clause_return partition_clause354 =null;


        Object CROSS352_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:545:14: ( CROSS ^ rel_list ( partition_clause )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:545:16: CROSS ^ rel_list ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            CROSS352=(Token)match(input,CROSS,FOLLOW_CROSS_in_cross_clause3379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS352_tree = 
            (Object)adaptor.create(CROSS352)
            ;
            root_0 = (Object)adaptor.becomeRoot(CROSS352_tree, root_0);
            }

            pushFollow(FOLLOW_rel_list_in_cross_clause3382);
            rel_list353=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_list353.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:545:32: ( partition_clause )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==PARTITION) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:545:32: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_cross_clause3384);
                    partition_clause354=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause354.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cross_clause"


    public static class join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:549:1: join_clause : JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )? ;
    public final QueryParser.join_clause_return join_clause() throws RecognitionException {
        QueryParser.join_clause_return retval = new QueryParser.join_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token JOIN355=null;
        Token USING357=null;
        QueryParser.join_sub_clause_return join_sub_clause356 =null;

        QueryParser.join_type_return join_type358 =null;

        QueryParser.partition_clause_return partition_clause359 =null;


        Object JOIN355_tree=null;
        Object USING357_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:549:13: ( JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:549:15: JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            JOIN355=(Token)match(input,JOIN,FOLLOW_JOIN_in_join_clause3395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN355_tree = 
            (Object)adaptor.create(JOIN355)
            ;
            root_0 = (Object)adaptor.becomeRoot(JOIN355_tree, root_0);
            }

            pushFollow(FOLLOW_join_sub_clause_in_join_clause3398);
            join_sub_clause356=join_sub_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_sub_clause356.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:549:37: ( USING ! join_type )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==USING) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:549:39: USING ! join_type
                    {
                    USING357=(Token)match(input,USING,FOLLOW_USING_in_join_clause3402); if (state.failed) return retval;

                    pushFollow(FOLLOW_join_type_in_join_clause3405);
                    join_type358=join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_type358.getTree());

                    }
                    break;

            }


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:549:59: ( partition_clause )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==PARTITION) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:549:59: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_join_clause3410);
                    partition_clause359=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause359.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_type"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:552:1: join_type : QUOTEDSTRING ;
    public final QueryParser.join_type_return join_type() throws RecognitionException {
        QueryParser.join_type_return retval = new QueryParser.join_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING360=null;

        Object QUOTEDSTRING360_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:552:11: ( QUOTEDSTRING )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:552:13: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING360=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_join_type3420); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING360_tree = 
            (Object)adaptor.create(QUOTEDSTRING360)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING360_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_type"


    public static class join_sub_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_sub_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:1: join_sub_clause : join_item ( ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item ) | ( ( COMMA ! join_item )+ ) ) ;
    public final QueryParser.join_sub_clause_return join_sub_clause() throws RecognitionException {
        QueryParser.join_sub_clause_return retval = new QueryParser.join_sub_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set362=null;
        Token OUTER363=null;
        Token COMMA364=null;
        Token COMMA366=null;
        QueryParser.join_item_return join_item361 =null;

        QueryParser.join_item_return join_item365 =null;

        QueryParser.join_item_return join_item367 =null;


        Object set362_tree=null;
        Object OUTER363_tree=null;
        Object COMMA364_tree=null;
        Object COMMA366_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:17: ( join_item ( ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item ) | ( ( COMMA ! join_item )+ ) ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:19: join_item ( ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item ) | ( ( COMMA ! join_item )+ ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_join_item_in_join_sub_clause3429);
            join_item361=join_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item361.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:29: ( ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item ) | ( ( COMMA ! join_item )+ ) )
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==FULL||LA103_0==LEFT||LA103_0==RIGHT) ) {
                alt103=1;
            }
            else if ( (LA103_0==COMMA) ) {
                alt103=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;

            }
            switch (alt103) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:31: ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item )
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:31: ( ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item )
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:33: ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item
                    {
                    set362=(Token)input.LT(1);

                    if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set362)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:57: ( OUTER )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==OUTER) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:57: OUTER
                            {
                            OUTER363=(Token)match(input,OUTER,FOLLOW_OUTER_in_join_sub_clause3449); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUTER363_tree = 
                            (Object)adaptor.create(OUTER363)
                            ;
                            adaptor.addChild(root_0, OUTER363_tree);
                            }

                            }
                            break;

                    }


                    COMMA364=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_sub_clause3452); if (state.failed) return retval;

                    pushFollow(FOLLOW_join_item_in_join_sub_clause3455);
                    join_item365=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item365.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:85: ( ( COMMA ! join_item )+ )
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:85: ( ( COMMA ! join_item )+ )
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:87: ( COMMA ! join_item )+
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:87: ( COMMA ! join_item )+
                    int cnt102=0;
                    loop102:
                    do {
                        int alt102=2;
                        int LA102_0 = input.LA(1);

                        if ( (LA102_0==COMMA) ) {
                            alt102=1;
                        }


                        switch (alt102) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:555:89: COMMA ! join_item
                    	    {
                    	    COMMA366=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_sub_clause3465); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_join_item_in_join_sub_clause3468);
                    	    join_item367=join_item();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item367.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt102 >= 1 ) break loop102;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(102, input);
                                throw eee;
                        }
                        cnt102++;
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_sub_clause"


    public static class join_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_item"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:558:1: join_item : rel join_group_by_clause -> ^( JOIN_ITEM rel join_group_by_clause ) ;
    public final QueryParser.join_item_return join_item() throws RecognitionException {
        QueryParser.join_item_return retval = new QueryParser.join_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.rel_return rel368 =null;

        QueryParser.join_group_by_clause_return join_group_by_clause369 =null;


        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        RewriteRuleSubtreeStream stream_join_group_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule join_group_by_clause");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:558:11: ( rel join_group_by_clause -> ^( JOIN_ITEM rel join_group_by_clause ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:558:13: rel join_group_by_clause
            {
            pushFollow(FOLLOW_rel_in_join_item3484);
            rel368=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel368.getTree());

            pushFollow(FOLLOW_join_group_by_clause_in_join_item3486);
            join_group_by_clause369=join_group_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_join_group_by_clause.add(join_group_by_clause369.getTree());

            // AST REWRITE
            // elements: rel, join_group_by_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 558:38: -> ^( JOIN_ITEM rel join_group_by_clause )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:558:41: ^( JOIN_ITEM rel join_group_by_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(JOIN_ITEM, "JOIN_ITEM")
                , root_1);

                adaptor.addChild(root_1, stream_rel.nextTree());

                adaptor.addChild(root_1, stream_join_group_by_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_item"


    public static class join_group_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:564:1: join_group_by_clause : BY ^ real_arg ;
    public final QueryParser.join_group_by_clause_return join_group_by_clause() throws RecognitionException {
        QueryParser.join_group_by_clause_return retval = new QueryParser.join_group_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BY370=null;
        QueryParser.real_arg_return real_arg371 =null;


        Object BY370_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:579:22: ( BY ^ real_arg )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:579:24: BY ^ real_arg
            {
            root_0 = (Object)adaptor.nil();


            BY370=(Token)match(input,BY,FOLLOW_BY_in_join_group_by_clause3545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY370_tree = 
            (Object)adaptor.create(BY370)
            ;
            root_0 = (Object)adaptor.becomeRoot(BY370_tree, root_0);
            }

            pushFollow(FOLLOW_real_arg_in_join_group_by_clause3548);
            real_arg371=real_arg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg371.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    Tree by = (Tree) retval.getTree();
                    Tree realArg = by.getChild(0);
                    if(realArg.getType() == TUPLE_VAL
                    || (realArg.getType() == FUNC_EVAL && realArg.getChild(0).getType() == TOTUPLE)) {
                        retval.tree = adaptor.create(by.getType(), by.getText());
                        for(int i = 0; i < realArg.getChildCount(); ++i) {
                            if(realArg.getChild(i).getType()!=TOTUPLE)
                            ((Tree)retval.tree).addChild(realArg.getChild(i));
                        }
                        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
                    }
                }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_clause"


    public static class union_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:582:1: union_clause : UNION ^ ( ONSCHEMA )? rel_list ;
    public final QueryParser.union_clause_return union_clause() throws RecognitionException {
        QueryParser.union_clause_return retval = new QueryParser.union_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token UNION372=null;
        Token ONSCHEMA373=null;
        QueryParser.rel_list_return rel_list374 =null;


        Object UNION372_tree=null;
        Object ONSCHEMA373_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:582:14: ( UNION ^ ( ONSCHEMA )? rel_list )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:582:16: UNION ^ ( ONSCHEMA )? rel_list
            {
            root_0 = (Object)adaptor.nil();


            UNION372=(Token)match(input,UNION,FOLLOW_UNION_in_union_clause3557); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UNION372_tree = 
            (Object)adaptor.create(UNION372)
            ;
            root_0 = (Object)adaptor.becomeRoot(UNION372_tree, root_0);
            }

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:582:23: ( ONSCHEMA )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==ONSCHEMA) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:582:23: ONSCHEMA
                    {
                    ONSCHEMA373=(Token)match(input,ONSCHEMA,FOLLOW_ONSCHEMA_in_union_clause3560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ONSCHEMA373_tree = 
                    (Object)adaptor.create(ONSCHEMA373)
                    ;
                    adaptor.addChild(root_0, ONSCHEMA373_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_rel_list_in_union_clause3563);
            rel_list374=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_list374.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_clause"


    public static class cube_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:585:1: cube_clause : CUBE rel BY cube_rollup_list ( COMMA cube_rollup_list )* -> ^( CUBE rel ^( BY ( cube_rollup_list )+ ) ) ;
    public final QueryParser.cube_clause_return cube_clause() throws RecognitionException {
        QueryParser.cube_clause_return retval = new QueryParser.cube_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CUBE375=null;
        Token BY377=null;
        Token COMMA379=null;
        QueryParser.rel_return rel376 =null;

        QueryParser.cube_rollup_list_return cube_rollup_list378 =null;

        QueryParser.cube_rollup_list_return cube_rollup_list380 =null;


        Object CUBE375_tree=null;
        Object BY377_tree=null;
        Object COMMA379_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_CUBE=new RewriteRuleTokenStream(adaptor,"token CUBE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_cube_rollup_list=new RewriteRuleSubtreeStream(adaptor,"rule cube_rollup_list");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:585:13: ( CUBE rel BY cube_rollup_list ( COMMA cube_rollup_list )* -> ^( CUBE rel ^( BY ( cube_rollup_list )+ ) ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:585:15: CUBE rel BY cube_rollup_list ( COMMA cube_rollup_list )*
            {
            CUBE375=(Token)match(input,CUBE,FOLLOW_CUBE_in_cube_clause3572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CUBE.add(CUBE375);


            pushFollow(FOLLOW_rel_in_cube_clause3574);
            rel376=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel376.getTree());

            BY377=(Token)match(input,BY,FOLLOW_BY_in_cube_clause3576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY377);


            pushFollow(FOLLOW_cube_rollup_list_in_cube_clause3578);
            cube_rollup_list378=cube_rollup_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cube_rollup_list.add(cube_rollup_list378.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:585:44: ( COMMA cube_rollup_list )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:585:46: COMMA cube_rollup_list
            	    {
            	    COMMA379=(Token)match(input,COMMA,FOLLOW_COMMA_in_cube_clause3582); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA379);


            	    pushFollow(FOLLOW_cube_rollup_list_in_cube_clause3584);
            	    cube_rollup_list380=cube_rollup_list();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cube_rollup_list.add(cube_rollup_list380.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            // AST REWRITE
            // elements: cube_rollup_list, CUBE, rel, BY
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 585:72: -> ^( CUBE rel ^( BY ( cube_rollup_list )+ ) )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:585:75: ^( CUBE rel ^( BY ( cube_rollup_list )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_CUBE.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_rel.nextTree());

                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:585:87: ^( BY ( cube_rollup_list )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                stream_BY.nextNode()
                , root_2);

                if ( !(stream_cube_rollup_list.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cube_rollup_list.hasNext() ) {
                    adaptor.addChild(root_2, stream_cube_rollup_list.nextTree());

                }
                stream_cube_rollup_list.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_clause"


    public static class cube_rollup_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_rollup_list"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:588:1: cube_rollup_list : ( CUBE | ROLLUP ) ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN !;
    public final QueryParser.cube_rollup_list_return cube_rollup_list() throws RecognitionException {
        QueryParser.cube_rollup_list_return retval = new QueryParser.cube_rollup_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set381=null;
        Token LEFT_PAREN382=null;
        Token COMMA384=null;
        Token RIGHT_PAREN386=null;
        QueryParser.real_arg_return real_arg383 =null;

        QueryParser.real_arg_return real_arg385 =null;


        Object set381_tree=null;
        Object LEFT_PAREN382_tree=null;
        Object COMMA384_tree=null;
        Object RIGHT_PAREN386_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:588:18: ( ( CUBE | ROLLUP ) ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN !)
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:588:20: ( CUBE | ROLLUP ) ^ LEFT_PAREN ! real_arg ( COMMA ! real_arg )* RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            set381=(Token)input.LT(1);

            set381=(Token)input.LT(1);

            if ( input.LA(1)==CUBE||input.LA(1)==ROLLUP ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set381)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            LEFT_PAREN382=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cube_rollup_list3626); if (state.failed) return retval;

            pushFollow(FOLLOW_real_arg_in_cube_rollup_list3629);
            real_arg383=real_arg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg383.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:588:60: ( COMMA ! real_arg )*
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==COMMA) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:588:62: COMMA ! real_arg
            	    {
            	    COMMA384=(Token)match(input,COMMA,FOLLOW_COMMA_in_cube_rollup_list3633); if (state.failed) return retval;

            	    pushFollow(FOLLOW_real_arg_in_cube_rollup_list3636);
            	    real_arg385=real_arg();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg385.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);


            RIGHT_PAREN386=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cube_rollup_list3641); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_rollup_list"


    public static class flatten_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:591:1: flatten_clause : FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !;
    public final QueryParser.flatten_clause_return flatten_clause() throws RecognitionException {
        QueryParser.flatten_clause_return retval = new QueryParser.flatten_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FLATTEN387=null;
        Token LEFT_PAREN388=null;
        Token RIGHT_PAREN390=null;
        QueryParser.expr_return expr389 =null;


        Object FLATTEN387_tree=null;
        Object LEFT_PAREN388_tree=null;
        Object RIGHT_PAREN390_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:591:16: ( FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !)
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:591:18: FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            FLATTEN387=(Token)match(input,FLATTEN,FOLLOW_FLATTEN_in_flatten_clause3651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLATTEN387_tree = 
            (Object)adaptor.create(FLATTEN387)
            ;
            root_0 = (Object)adaptor.becomeRoot(FLATTEN387_tree, root_0);
            }

            LEFT_PAREN388=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_clause3654); if (state.failed) return retval;

            pushFollow(FOLLOW_expr_in_flatten_clause3657);
            expr389=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr389.getTree());

            RIGHT_PAREN390=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_clause3659); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_clause"


    public static class generate_as_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generate_as_clause"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:596:1: generate_as_clause : AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | explicit_field_def ) ;
    public final QueryParser.generate_as_clause_return generate_as_clause() throws RecognitionException {
        QueryParser.generate_as_clause_return retval = new QueryParser.generate_as_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AS391=null;
        Token LEFT_PAREN392=null;
        Token RIGHT_PAREN394=null;
        QueryParser.field_def_list_return field_def_list393 =null;

        QueryParser.explicit_field_def_return explicit_field_def395 =null;


        Object AS391_tree=null;
        Object LEFT_PAREN392_tree=null;
        Object RIGHT_PAREN394_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:596:20: ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | explicit_field_def ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:596:23: AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | explicit_field_def )
            {
            root_0 = (Object)adaptor.nil();


            AS391=(Token)match(input,AS,FOLLOW_AS_in_generate_as_clause3672); if (state.failed) return retval;

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:596:27: ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | explicit_field_def )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==LEFT_PAREN) ) {
                alt107=1;
            }
            else if ( ((LA107_0 >= BAG && LA107_0 <= BIGDECIMAL)||LA107_0==BIGINTEGER||LA107_0==BOOLEAN||LA107_0==BYTEARRAY||LA107_0==CHARARRAY||(LA107_0 >= CUBE && LA107_0 <= DATETIME)||LA107_0==DOUBLE||(LA107_0 >= ELSE && LA107_0 <= END)||LA107_0==FLOAT||LA107_0==IDENTIFIER||LA107_0==IN||LA107_0==INT||LA107_0==LONG||LA107_0==MAP||LA107_0==RANK||LA107_0==THEN||LA107_0==TUPLE||LA107_0==WHEN) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }
            switch (alt107) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:596:29: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:596:29: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:596:31: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                    {
                    LEFT_PAREN392=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_generate_as_clause3679); if (state.failed) return retval;

                    pushFollow(FOLLOW_field_def_list_in_generate_as_clause3682);
                    field_def_list393=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list393.getTree());

                    RIGHT_PAREN394=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_generate_as_clause3684); if (state.failed) return retval;

                    }


                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:596:75: explicit_field_def
                    {
                    pushFollow(FOLLOW_explicit_field_def_in_generate_as_clause3691);
                    explicit_field_def395=explicit_field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_field_def395.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generate_as_clause"


    public static class flatten_generated_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_generated_item"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:599:1: flatten_generated_item : ( flatten_clause ( generate_as_clause )? | real_arg ( generate_as_clause )? );
    public final QueryParser.flatten_generated_item_return flatten_generated_item() throws RecognitionException {
        QueryParser.flatten_generated_item_return retval = new QueryParser.flatten_generated_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.flatten_clause_return flatten_clause396 =null;

        QueryParser.generate_as_clause_return generate_as_clause397 =null;

        QueryParser.real_arg_return real_arg398 =null;

        QueryParser.generate_as_clause_return generate_as_clause399 =null;



        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:599:24: ( flatten_clause ( generate_as_clause )? | real_arg ( generate_as_clause )? )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==FLATTEN) ) {
                alt110=1;
            }
            else if ( (LA110_0==ALL||LA110_0==AND||(LA110_0 >= AS && LA110_0 <= ASC)||LA110_0==BIGDECIMAL||LA110_0==BIGINTEGER||(LA110_0 >= BY && LA110_0 <= COGROUP)||(LA110_0 >= CROSS && LA110_0 <= DATETIME)||LA110_0==DEFINE||LA110_0==DESC||LA110_0==DISTINCT||LA110_0==DOLLARVAR||(LA110_0 >= DOUBLENUMBER && LA110_0 <= END)||LA110_0==FALSE||LA110_0==FILTER||(LA110_0 >= FLOATNUMBER && LA110_0 <= GROUP)||(LA110_0 >= IDENTIFIER && LA110_0 <= INPUT)||(LA110_0 >= INTEGER && LA110_0 <= LEFT_PAREN)||(LA110_0 >= LIMIT && LA110_0 <= LOAD)||LA110_0==LONGINTEGER||(LA110_0 >= MAPREDUCE && LA110_0 <= MINUS)||LA110_0==NULL||(LA110_0 >= OR && LA110_0 <= ORDER)||(LA110_0 >= OUTER && LA110_0 <= PARTITION)||(LA110_0 >= QUOTEDSTRING && LA110_0 <= RIGHT)||(LA110_0 >= ROLLUP && LA110_0 <= SAMPLE)||LA110_0==SHIP||(LA110_0 >= SPLIT && LA110_0 <= TRUE)||(LA110_0 >= UNION && LA110_0 <= USING)||LA110_0==WHEN||(LA110_0 >= BOOL && LA110_0 <= BOOL_COND)||LA110_0==REALIAS) ) {
                alt110=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }
            switch (alt110) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:599:26: flatten_clause ( generate_as_clause )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_flatten_clause_in_flatten_generated_item3702);
                    flatten_clause396=flatten_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, flatten_clause396.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:599:41: ( generate_as_clause )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==AS) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:599:41: generate_as_clause
                            {
                            pushFollow(FOLLOW_generate_as_clause_in_flatten_generated_item3704);
                            generate_as_clause397=generate_as_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, generate_as_clause397.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:600:26: real_arg ( generate_as_clause )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_real_arg_in_flatten_generated_item3732);
                    real_arg398=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, real_arg398.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:600:35: ( generate_as_clause )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==AS) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:600:35: generate_as_clause
                            {
                            pushFollow(FOLLOW_generate_as_clause_in_flatten_generated_item3734);
                            generate_as_clause399=generate_as_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, generate_as_clause399.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_generated_item"


    public static class real_arg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_arg"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:608:1: real_arg : ( expr | STAR | col_range );
    public final QueryParser.real_arg_return real_arg() throws RecognitionException {
        QueryParser.real_arg_return retval = new QueryParser.real_arg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR401=null;
        QueryParser.expr_return expr400 =null;

        QueryParser.col_range_return col_range402 =null;


        Object STAR401_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:608:10: ( expr | STAR | col_range )
            int alt111=3;
            switch ( input.LA(1) ) {
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BIGDECIMAL:
            case BIGINTEGER:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CASE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INTEGER:
            case INTO:
            case INVOKE:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONGINTEGER:
            case MAPREDUCE:
            case MINUS:
            case NULL:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt111=1;
                }
                break;
            case DOLLARVAR:
            case GROUP:
                {
                int LA111_2 = input.LA(2);

                if ( (LA111_2==AS||LA111_2==COMMA||LA111_2==DIV||LA111_2==FULL||LA111_2==INNER||LA111_2==LEFT||LA111_2==MINUS||LA111_2==OUTER||(LA111_2 >= PARALLEL && LA111_2 <= POUND)||(LA111_2 >= RIGHT && LA111_2 <= RIGHT_PAREN)||LA111_2==SEMI_COLON||LA111_2==STAR||LA111_2==USING) ) {
                    alt111=1;
                }
                else if ( (LA111_2==DOUBLE_PERIOD) ) {
                    alt111=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA111_3 = input.LA(2);

                if ( (LA111_3==AS||LA111_3==COMMA||(LA111_3 >= DIV && LA111_3 <= DOLLAR)||LA111_3==FULL||LA111_3==INNER||LA111_3==LEFT||LA111_3==LEFT_PAREN||LA111_3==MINUS||LA111_3==OUTER||(LA111_3 >= PARALLEL && LA111_3 <= POUND)||(LA111_3 >= RIGHT && LA111_3 <= RIGHT_PAREN)||LA111_3==SEMI_COLON||LA111_3==STAR||LA111_3==USING) ) {
                    alt111=1;
                }
                else if ( (LA111_3==DOUBLE_PERIOD) ) {
                    alt111=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 3, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA111_4 = input.LA(2);

                if ( (LA111_4==AS||LA111_4==COMMA||(LA111_4 >= DIV && LA111_4 <= DOLLAR)||LA111_4==FULL||LA111_4==INNER||LA111_4==LEFT||LA111_4==LEFT_PAREN||LA111_4==MINUS||LA111_4==OUTER||(LA111_4 >= PARALLEL && LA111_4 <= POUND)||(LA111_4 >= RIGHT && LA111_4 <= RIGHT_PAREN)||LA111_4==SEMI_COLON||LA111_4==STAR||LA111_4==USING) ) {
                    alt111=1;
                }
                else if ( (LA111_4==DOUBLE_PERIOD) ) {
                    alt111=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 4, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                alt111=2;
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt111=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }

            switch (alt111) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:608:12: expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_real_arg3749);
                    expr400=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr400.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:609:12: STAR
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR401=(Token)match(input,STAR,FOLLOW_STAR_in_real_arg3762); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR401_tree = 
                    (Object)adaptor.create(STAR401)
                    ;
                    adaptor.addChild(root_0, STAR401_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:610:12: col_range
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_real_arg3775);
                    col_range402=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range402.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_arg"


    public static class cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cond"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:613:1: cond : and_cond ( OR ^ and_cond )* ;
    public final QueryParser.cond_return cond() throws RecognitionException {
        QueryParser.cond_return retval = new QueryParser.cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OR404=null;
        QueryParser.and_cond_return and_cond403 =null;

        QueryParser.and_cond_return and_cond405 =null;


        Object OR404_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:613:6: ( and_cond ( OR ^ and_cond )* )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:613:8: and_cond ( OR ^ and_cond )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_and_cond_in_cond3784);
            and_cond403=and_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_cond403.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:613:18: ( OR ^ and_cond )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==OR) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:613:20: OR ^ and_cond
            	    {
            	    OR404=(Token)match(input,OR,FOLLOW_OR_in_cond3789); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR404_tree = 
            	    (Object)adaptor.create(OR404)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(OR404_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_and_cond_in_cond3792);
            	    and_cond405=and_cond();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_cond405.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cond"


    public static class and_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "and_cond"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:616:1: and_cond : not_cond ( AND ^ not_cond )* ;
    public final QueryParser.and_cond_return and_cond() throws RecognitionException {
        QueryParser.and_cond_return retval = new QueryParser.and_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AND407=null;
        QueryParser.not_cond_return not_cond406 =null;

        QueryParser.not_cond_return not_cond408 =null;


        Object AND407_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:616:10: ( not_cond ( AND ^ not_cond )* )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:616:12: not_cond ( AND ^ not_cond )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_not_cond_in_and_cond3804);
            not_cond406=not_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, not_cond406.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:616:21: ( AND ^ not_cond )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==AND) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:616:23: AND ^ not_cond
            	    {
            	    AND407=(Token)match(input,AND,FOLLOW_AND_in_and_cond3808); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AND407_tree = 
            	    (Object)adaptor.create(AND407)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(AND407_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_not_cond_in_and_cond3811);
            	    not_cond408=not_cond();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_cond408.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_cond"


    public static class not_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "not_cond"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:619:1: not_cond : ( NOT ^)? unary_cond ;
    public final QueryParser.not_cond_return not_cond() throws RecognitionException {
        QueryParser.not_cond_return retval = new QueryParser.not_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NOT409=null;
        QueryParser.unary_cond_return unary_cond410 =null;


        Object NOT409_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:619:10: ( ( NOT ^)? unary_cond )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:619:12: ( NOT ^)? unary_cond
            {
            root_0 = (Object)adaptor.nil();


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:619:15: ( NOT ^)?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==NOT) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:619:15: NOT ^
                    {
                    NOT409=(Token)match(input,NOT,FOLLOW_NOT_in_not_cond3823); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT409_tree = 
                    (Object)adaptor.create(NOT409)
                    ;
                    root_0 = (Object)adaptor.becomeRoot(NOT409_tree, root_0);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_unary_cond_in_not_cond3827);
            unary_cond410=unary_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_cond410.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "not_cond"


    public static class unary_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unary_cond"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:622:1: unary_cond : exp1= expr ( ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) ) | ( IN LEFT_PAREN ( expr ( COMMA expr )* ) RIGHT_PAREN -> ^( IN ( expr )+ ) ) | ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) ) | ( -> ^( BOOL_COND expr ) ) ) ;
    public final QueryParser.unary_cond_return unary_cond() throws RecognitionException {
        QueryParser.unary_cond_return retval = new QueryParser.unary_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IS411=null;
        Token NOT412=null;
        Token NULL413=null;
        Token IN414=null;
        Token LEFT_PAREN415=null;
        Token COMMA417=null;
        Token RIGHT_PAREN419=null;
        QueryParser.expr_return exp1 =null;

        QueryParser.expr_return exp2 =null;

        QueryParser.expr_return expr416 =null;

        QueryParser.expr_return expr418 =null;

        QueryParser.rel_op_return rel_op420 =null;


        Object IS411_tree=null;
        Object NOT412_tree=null;
        Object NULL413_tree=null;
        Object IN414_tree=null;
        Object LEFT_PAREN415_tree=null;
        Object COMMA417_tree=null;
        Object RIGHT_PAREN419_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_NULL=new RewriteRuleTokenStream(adaptor,"token NULL");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:662:5: (exp1= expr ( ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) ) | ( IN LEFT_PAREN ( expr ( COMMA expr )* ) RIGHT_PAREN -> ^( IN ( expr )+ ) ) | ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) ) | ( -> ^( BOOL_COND expr ) ) ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:662:7: exp1= expr ( ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) ) | ( IN LEFT_PAREN ( expr ( COMMA expr )* ) RIGHT_PAREN -> ^( IN ( expr )+ ) ) | ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) ) | ( -> ^( BOOL_COND expr ) ) )
            {
            pushFollow(FOLLOW_expr_in_unary_cond3857);
            exp1=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(exp1.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:663:9: ( ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) ) | ( IN LEFT_PAREN ( expr ( COMMA expr )* ) RIGHT_PAREN -> ^( IN ( expr )+ ) ) | ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) ) | ( -> ^( BOOL_COND expr ) ) )
            int alt117=4;
            switch ( input.LA(1) ) {
            case IS:
                {
                alt117=1;
                }
                break;
            case IN:
                {
                alt117=2;
                }
                break;
            case NUM_OP_EQ:
            case NUM_OP_GT:
            case NUM_OP_GTE:
            case NUM_OP_LT:
            case NUM_OP_LTE:
            case NUM_OP_NE:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt117=3;
                }
                break;
            case AND:
            case COMMA:
            case OR:
            case PARALLEL:
            case QMARK:
            case RIGHT_PAREN:
            case SEMI_COLON:
            case THEN:
                {
                alt117=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }

            switch (alt117) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:663:11: ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) )
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:663:11: ( IS ( NOT )? NULL -> ^( NULL $exp1 ( NOT )? ) )
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:663:13: IS ( NOT )? NULL
                    {
                    IS411=(Token)match(input,IS,FOLLOW_IS_in_unary_cond3871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IS.add(IS411);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:663:16: ( NOT )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==NOT) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:663:16: NOT
                            {
                            NOT412=(Token)match(input,NOT,FOLLOW_NOT_in_unary_cond3873); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT.add(NOT412);


                            }
                            break;

                    }


                    NULL413=(Token)match(input,NULL,FOLLOW_NULL_in_unary_cond3876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NULL.add(NULL413);


                    // AST REWRITE
                    // elements: NOT, NULL, exp1
                    // token labels: 
                    // rule labels: retval, exp1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 663:26: -> ^( NULL $exp1 ( NOT )? )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:663:29: ^( NULL $exp1 ( NOT )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_NULL.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_exp1.nextTree());

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:663:43: ( NOT )?
                        if ( stream_NOT.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_NOT.nextNode()
                            );

                        }
                        stream_NOT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:664:11: ( IN LEFT_PAREN ( expr ( COMMA expr )* ) RIGHT_PAREN -> ^( IN ( expr )+ ) )
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:664:11: ( IN LEFT_PAREN ( expr ( COMMA expr )* ) RIGHT_PAREN -> ^( IN ( expr )+ ) )
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:664:13: IN LEFT_PAREN ( expr ( COMMA expr )* ) RIGHT_PAREN
                    {
                    IN414=(Token)match(input,IN,FOLLOW_IN_in_unary_cond3906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IN.add(IN414);


                    LEFT_PAREN415=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_cond3908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN415);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:664:27: ( expr ( COMMA expr )* )
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:664:29: expr ( COMMA expr )*
                    {
                    pushFollow(FOLLOW_expr_in_unary_cond3912);
                    expr416=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr416.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:664:34: ( COMMA expr )*
                    loop116:
                    do {
                        int alt116=2;
                        int LA116_0 = input.LA(1);

                        if ( (LA116_0==COMMA) ) {
                            alt116=1;
                        }


                        switch (alt116) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:664:36: COMMA expr
                    	    {
                    	    COMMA417=(Token)match(input,COMMA,FOLLOW_COMMA_in_unary_cond3916); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA417);


                    	    pushFollow(FOLLOW_expr_in_unary_cond3918);
                    	    expr418=expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expr.add(expr418.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop116;
                        }
                    } while (true);


                    }


                    RIGHT_PAREN419=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_cond3925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN419);


                    // AST REWRITE
                    // elements: expr, IN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 664:64: -> ^( IN ( expr )+ )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:664:67: ^( IN ( expr )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_IN.nextNode()
                        , root_1);

                        if ( !(stream_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:665:11: ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) )
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:665:11: ( rel_op exp2= expr -> ^( rel_op $exp1 $exp2) )
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:665:13: rel_op exp2= expr
                    {
                    pushFollow(FOLLOW_rel_op_in_unary_cond3952);
                    rel_op420=rel_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel_op.add(rel_op420.getTree());

                    pushFollow(FOLLOW_expr_in_unary_cond3958);
                    exp2=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(exp2.getTree());

                    // AST REWRITE
                    // elements: exp2, exp1, rel_op
                    // token labels: 
                    // rule labels: retval, exp2, exp1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_exp2=new RewriteRuleSubtreeStream(adaptor,"rule exp2",exp2!=null?exp2.tree:null);
                    RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 665:32: -> ^( rel_op $exp1 $exp2)
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:665:35: ^( rel_op $exp1 $exp2)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_rel_op.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_exp1.nextTree());

                        adaptor.addChild(root_1, stream_exp2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 4 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:666:11: ( -> ^( BOOL_COND expr ) )
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:666:11: ( -> ^( BOOL_COND expr ) )
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:666:13: 
                    {
                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 666:13: -> ^( BOOL_COND expr )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:666:16: ^( BOOL_COND expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BOOL_COND, "BOOL_COND")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    // Expressions in parentheses are a little tricky to match as
                    // they could contain either "cond" rules or "expr" rules. If
                    // they are "expr" rules then they're put under a BOOL_COND node
                    // in the tree, but "cond" rules put no extra tokens in the tree.
                    // As we're matching non-recursively we'll parse whatever's in the
                    // brackets, and if the AST has a boolean expression at its root
                    // then we'll assume we've just got a "cond" expression in
                    // brackets, and otherwise we'll assume its an "expr" (and so
                    // we'll have to strip off the BOOL_COND token the "cast_expr"
                    // rule added)
                    BaseTree tree = (BaseTree) retval.getTree();
                    if(tree.getType() == BOOL_COND
                    && tree.getChild(0).getType() == EXPR_IN_PAREN
                    && BOOLEAN_TOKENS.contains(tree.getChild(0).getChild(0).getType())) {
                        retval.tree = tree.getChild(0).getChild(0);
                        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
                    }

                    // For IN expression, we clone the lhs expression (1st child of the
                    // returned tree) and insert it before every rhs expression. For example,
                    //
                    //   lhs IN (rhs1, rhs2, rhs3)
                    // =>
                    //   ^( IN lhs, rhs1, lhs, rhs2, lhs, rhs3 )
                    //
                    // Note that lhs appears three times at index 0, 2 and 4.
                    //
                    // This is needed because in LogicalPlanGenerator.g, we translate this
                    // tree to nested or expressions, and we need to construct a new
                    // LogicalExpression object per rhs expression.
                    if(tree.getType() == IN) {
                        Tree lhs = tree.getChild(0);
                        for(int i = 2; i < tree.getChildCount(); i = i + 2) {
                            tree.insertChild(i, deepCopy(lhs));
                        }
                    }
                }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_cond"


    public static class expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:669:1: expr : multi_expr ( ( PLUS | MINUS ) ^ multi_expr )* ;
    public final QueryParser.expr_return expr() throws RecognitionException {
        QueryParser.expr_return retval = new QueryParser.expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set422=null;
        QueryParser.multi_expr_return multi_expr421 =null;

        QueryParser.multi_expr_return multi_expr423 =null;


        Object set422_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:669:6: ( multi_expr ( ( PLUS | MINUS ) ^ multi_expr )* )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:669:8: multi_expr ( ( PLUS | MINUS ) ^ multi_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_multi_expr_in_expr4007);
            multi_expr421=multi_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_expr421.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:669:19: ( ( PLUS | MINUS ) ^ multi_expr )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==MINUS||LA118_0==PLUS) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:669:21: ( PLUS | MINUS ) ^ multi_expr
            	    {
            	    set422=(Token)input.LT(1);

            	    set422=(Token)input.LT(1);

            	    if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
            	        (Object)adaptor.create(set422)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_multi_expr_in_expr4022);
            	    multi_expr423=multi_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_expr423.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class multi_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_expr"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:672:1: multi_expr : cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )* ;
    public final QueryParser.multi_expr_return multi_expr() throws RecognitionException {
        QueryParser.multi_expr_return retval = new QueryParser.multi_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set425=null;
        QueryParser.cast_expr_return cast_expr424 =null;

        QueryParser.cast_expr_return cast_expr426 =null;


        Object set425_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:672:12: ( cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )* )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:672:14: cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_expr_in_multi_expr4034);
            cast_expr424=cast_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expr424.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:672:24: ( ( STAR | DIV | PERCENT ) ^ cast_expr )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==DIV||LA119_0==PERCENT||LA119_0==STAR) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:672:26: ( STAR | DIV | PERCENT ) ^ cast_expr
            	    {
            	    set425=(Token)input.LT(1);

            	    set425=(Token)input.LT(1);

            	    if ( input.LA(1)==DIV||input.LA(1)==PERCENT||input.LA(1)==STAR ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
            	        (Object)adaptor.create(set425)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_cast_expr_in_multi_expr4053);
            	    cast_expr426=cast_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expr426.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_expr"


    public static class func_name_suffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name_suffix"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:675:1: func_name_suffix : ( ( DOLLAR | PERIOD ) eid )+ ;
    public final QueryParser.func_name_suffix_return func_name_suffix() throws RecognitionException {
        QueryParser.func_name_suffix_return retval = new QueryParser.func_name_suffix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set427=null;
        QueryParser.eid_return eid428 =null;


        Object set427_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:675:18: ( ( ( DOLLAR | PERIOD ) eid )+ )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:675:20: ( ( DOLLAR | PERIOD ) eid )+
            {
            root_0 = (Object)adaptor.nil();


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:675:20: ( ( DOLLAR | PERIOD ) eid )+
            int cnt120=0;
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==DOLLAR||LA120_0==PERIOD) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:675:22: ( DOLLAR | PERIOD ) eid
            	    {
            	    set427=(Token)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set427)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_eid_in_func_name_suffix4077);
            	    eid428=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid428.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        throw eee;
                }
                cnt120++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name_suffix"


    public static class cast_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expr"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:678:1: cast_expr : ( scalar | MINUS cast_expr -> ^( NEG cast_expr ) | col_ref_without_identifier ( projection )* | invoker_func ( projection )* | identifier_plus ( projection )* | identifier_plus ( func_name_suffix )? LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* ) ( projection )* | func_name_without_columns LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL func_name_without_columns ( real_arg )* ) ( projection )* | CASE ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN expr THEN expr ( WHEN expr THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_EXPR ( expr )+ ) ( projection )* ) | paren_expr | curly_expr | bracket_expr );
    public final QueryParser.cast_expr_return cast_expr() throws RecognitionException {
        QueryParser.cast_expr_return retval = new QueryParser.cast_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MINUS430=null;
        Token LEFT_PAREN440=null;
        Token COMMA442=null;
        Token RIGHT_PAREN444=null;
        Token LEFT_PAREN447=null;
        Token COMMA449=null;
        Token RIGHT_PAREN451=null;
        Token CASE453=null;
        Token WHEN454=null;
        Token THEN456=null;
        Token WHEN458=null;
        Token THEN460=null;
        Token ELSE462=null;
        Token END464=null;
        Token WHEN467=null;
        Token THEN469=null;
        Token WHEN471=null;
        Token THEN473=null;
        Token ELSE475=null;
        Token END477=null;
        QueryParser.scalar_return scalar429 =null;

        QueryParser.cast_expr_return cast_expr431 =null;

        QueryParser.col_ref_without_identifier_return col_ref_without_identifier432 =null;

        QueryParser.projection_return projection433 =null;

        QueryParser.invoker_func_return invoker_func434 =null;

        QueryParser.projection_return projection435 =null;

        QueryParser.identifier_plus_return identifier_plus436 =null;

        QueryParser.projection_return projection437 =null;

        QueryParser.identifier_plus_return identifier_plus438 =null;

        QueryParser.func_name_suffix_return func_name_suffix439 =null;

        QueryParser.real_arg_return real_arg441 =null;

        QueryParser.real_arg_return real_arg443 =null;

        QueryParser.projection_return projection445 =null;

        QueryParser.func_name_without_columns_return func_name_without_columns446 =null;

        QueryParser.real_arg_return real_arg448 =null;

        QueryParser.real_arg_return real_arg450 =null;

        QueryParser.projection_return projection452 =null;

        QueryParser.cond_return cond455 =null;

        QueryParser.expr_return expr457 =null;

        QueryParser.cond_return cond459 =null;

        QueryParser.expr_return expr461 =null;

        QueryParser.expr_return expr463 =null;

        QueryParser.projection_return projection465 =null;

        QueryParser.expr_return expr466 =null;

        QueryParser.expr_return expr468 =null;

        QueryParser.expr_return expr470 =null;

        QueryParser.expr_return expr472 =null;

        QueryParser.expr_return expr474 =null;

        QueryParser.expr_return expr476 =null;

        QueryParser.projection_return projection478 =null;

        QueryParser.paren_expr_return paren_expr479 =null;

        QueryParser.curly_expr_return curly_expr480 =null;

        QueryParser.bracket_expr_return bracket_expr481 =null;


        Object MINUS430_tree=null;
        Object LEFT_PAREN440_tree=null;
        Object COMMA442_tree=null;
        Object RIGHT_PAREN444_tree=null;
        Object LEFT_PAREN447_tree=null;
        Object COMMA449_tree=null;
        Object RIGHT_PAREN451_tree=null;
        Object CASE453_tree=null;
        Object WHEN454_tree=null;
        Object THEN456_tree=null;
        Object WHEN458_tree=null;
        Object THEN460_tree=null;
        Object ELSE462_tree=null;
        Object END464_tree=null;
        Object WHEN467_tree=null;
        Object THEN469_tree=null;
        Object WHEN471_tree=null;
        Object THEN473_tree=null;
        Object ELSE475_tree=null;
        Object END477_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_func_name_without_columns=new RewriteRuleSubtreeStream(adaptor,"rule func_name_without_columns");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
        RewriteRuleSubtreeStream stream_projection=new RewriteRuleSubtreeStream(adaptor,"rule projection");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        RewriteRuleSubtreeStream stream_func_name_suffix=new RewriteRuleSubtreeStream(adaptor,"rule func_name_suffix");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:744:11: ( scalar | MINUS cast_expr -> ^( NEG cast_expr ) | col_ref_without_identifier ( projection )* | invoker_func ( projection )* | identifier_plus ( projection )* | identifier_plus ( func_name_suffix )? LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* ) ( projection )* | func_name_without_columns LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL func_name_without_columns ( real_arg )* ) ( projection )* | CASE ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN expr THEN expr ( WHEN expr THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_EXPR ( expr )+ ) ( projection )* ) | paren_expr | curly_expr | bracket_expr )
            int alt138=11;
            alt138 = dfa138.predict(input);
            switch (alt138) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:744:13: scalar
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_scalar_in_cast_expr4112);
                    scalar429=scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scalar429.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:745:13: MINUS cast_expr
                    {
                    MINUS430=(Token)match(input,MINUS,FOLLOW_MINUS_in_cast_expr4126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS430);


                    pushFollow(FOLLOW_cast_expr_in_cast_expr4128);
                    cast_expr431=cast_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expr.add(cast_expr431.getTree());

                    // AST REWRITE
                    // elements: cast_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 745:29: -> ^( NEG cast_expr )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:745:32: ^( NEG cast_expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NEG, "NEG")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:749:13: col_ref_without_identifier ( projection )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_without_identifier_in_cast_expr4185);
                    col_ref_without_identifier432=col_ref_without_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref_without_identifier432.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:749:40: ( projection )*
                    loop121:
                    do {
                        int alt121=2;
                        int LA121_0 = input.LA(1);

                        if ( (LA121_0==PERIOD||LA121_0==POUND) ) {
                            alt121=1;
                        }


                        switch (alt121) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:749:40: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4187);
                    	    projection433=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, projection433.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop121;
                        }
                    } while (true);


                    }
                    break;
                case 4 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:750:13: invoker_func ( projection )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_invoker_func_in_cast_expr4202);
                    invoker_func434=invoker_func();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_func434.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:750:26: ( projection )*
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);

                        if ( (LA122_0==PERIOD||LA122_0==POUND) ) {
                            alt122=1;
                        }


                        switch (alt122) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:750:26: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4204);
                    	    projection435=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, projection435.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop122;
                        }
                    } while (true);


                    }
                    break;
                case 5 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:751:13: identifier_plus ( projection )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_plus_in_cast_expr4219);
                    identifier_plus436=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus436.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:751:29: ( projection )*
                    loop123:
                    do {
                        int alt123=2;
                        int LA123_0 = input.LA(1);

                        if ( (LA123_0==PERIOD||LA123_0==POUND) ) {
                            alt123=1;
                        }


                        switch (alt123) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:751:29: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4221);
                    	    projection437=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, projection437.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop123;
                        }
                    } while (true);


                    }
                    break;
                case 6 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:752:13: identifier_plus ( func_name_suffix )? LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )*
                    {
                    pushFollow(FOLLOW_identifier_plus_in_cast_expr4236);
                    identifier_plus438=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus438.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:752:29: ( func_name_suffix )?
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==DOLLAR||LA124_0==PERIOD) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:752:29: func_name_suffix
                            {
                            pushFollow(FOLLOW_func_name_suffix_in_cast_expr4238);
                            func_name_suffix439=func_name_suffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_func_name_suffix.add(func_name_suffix439.getTree());

                            }
                            break;

                    }


                    LEFT_PAREN440=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cast_expr4241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN440);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:752:58: ( real_arg ( COMMA real_arg )* )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==ALL||LA126_0==AND||(LA126_0 >= AS && LA126_0 <= ASC)||LA126_0==BIGDECIMAL||LA126_0==BIGINTEGER||(LA126_0 >= BY && LA126_0 <= COGROUP)||(LA126_0 >= CROSS && LA126_0 <= DATETIME)||LA126_0==DEFINE||LA126_0==DESC||LA126_0==DISTINCT||LA126_0==DOLLARVAR||(LA126_0 >= DOUBLENUMBER && LA126_0 <= END)||LA126_0==FALSE||LA126_0==FILTER||(LA126_0 >= FLOATNUMBER && LA126_0 <= GROUP)||(LA126_0 >= IDENTIFIER && LA126_0 <= INPUT)||(LA126_0 >= INTEGER && LA126_0 <= LEFT_PAREN)||(LA126_0 >= LIMIT && LA126_0 <= LOAD)||LA126_0==LONGINTEGER||(LA126_0 >= MAPREDUCE && LA126_0 <= MINUS)||LA126_0==NULL||(LA126_0 >= OR && LA126_0 <= ORDER)||(LA126_0 >= OUTER && LA126_0 <= PARTITION)||(LA126_0 >= QUOTEDSTRING && LA126_0 <= RIGHT)||(LA126_0 >= ROLLUP && LA126_0 <= SAMPLE)||LA126_0==SHIP||(LA126_0 >= SPLIT && LA126_0 <= TRUE)||(LA126_0 >= UNION && LA126_0 <= USING)||LA126_0==WHEN||(LA126_0 >= BOOL && LA126_0 <= BOOL_COND)||LA126_0==REALIAS) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:752:60: real_arg ( COMMA real_arg )*
                            {
                            pushFollow(FOLLOW_real_arg_in_cast_expr4245);
                            real_arg441=real_arg();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_real_arg.add(real_arg441.getTree());

                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:752:69: ( COMMA real_arg )*
                            loop125:
                            do {
                                int alt125=2;
                                int LA125_0 = input.LA(1);

                                if ( (LA125_0==COMMA) ) {
                                    alt125=1;
                                }


                                switch (alt125) {
                            	case 1 :
                            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:752:71: COMMA real_arg
                            	    {
                            	    COMMA442=(Token)match(input,COMMA,FOLLOW_COMMA_in_cast_expr4249); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA442);


                            	    pushFollow(FOLLOW_real_arg_in_cast_expr4251);
                            	    real_arg443=real_arg();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg443.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop125;
                                }
                            } while (true);


                            }
                            break;

                    }


                    RIGHT_PAREN444=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cast_expr4259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN444);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:752:104: ( projection )*
                    loop127:
                    do {
                        int alt127=2;
                        int LA127_0 = input.LA(1);

                        if ( (LA127_0==PERIOD||LA127_0==POUND) ) {
                            alt127=1;
                        }


                        switch (alt127) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:752:104: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4261);
                    	    projection445=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection445.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop127;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection, func_name_suffix, real_arg, identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 752:116: -> ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* ) ( projection )*
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:752:119: ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:752:148: ( func_name_suffix )?
                        if ( stream_func_name_suffix.hasNext() ) {
                            adaptor.addChild(root_1, stream_func_name_suffix.nextTree());

                        }
                        stream_func_name_suffix.reset();

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:752:166: ( real_arg )*
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:752:178: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:753:13: func_name_without_columns LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )*
                    {
                    pushFollow(FOLLOW_func_name_without_columns_in_cast_expr4295);
                    func_name_without_columns446=func_name_without_columns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name_without_columns.add(func_name_without_columns446.getTree());

                    LEFT_PAREN447=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cast_expr4297); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN447);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:753:50: ( real_arg ( COMMA real_arg )* )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==ALL||LA129_0==AND||(LA129_0 >= AS && LA129_0 <= ASC)||LA129_0==BIGDECIMAL||LA129_0==BIGINTEGER||(LA129_0 >= BY && LA129_0 <= COGROUP)||(LA129_0 >= CROSS && LA129_0 <= DATETIME)||LA129_0==DEFINE||LA129_0==DESC||LA129_0==DISTINCT||LA129_0==DOLLARVAR||(LA129_0 >= DOUBLENUMBER && LA129_0 <= END)||LA129_0==FALSE||LA129_0==FILTER||(LA129_0 >= FLOATNUMBER && LA129_0 <= GROUP)||(LA129_0 >= IDENTIFIER && LA129_0 <= INPUT)||(LA129_0 >= INTEGER && LA129_0 <= LEFT_PAREN)||(LA129_0 >= LIMIT && LA129_0 <= LOAD)||LA129_0==LONGINTEGER||(LA129_0 >= MAPREDUCE && LA129_0 <= MINUS)||LA129_0==NULL||(LA129_0 >= OR && LA129_0 <= ORDER)||(LA129_0 >= OUTER && LA129_0 <= PARTITION)||(LA129_0 >= QUOTEDSTRING && LA129_0 <= RIGHT)||(LA129_0 >= ROLLUP && LA129_0 <= SAMPLE)||LA129_0==SHIP||(LA129_0 >= SPLIT && LA129_0 <= TRUE)||(LA129_0 >= UNION && LA129_0 <= USING)||LA129_0==WHEN||(LA129_0 >= BOOL && LA129_0 <= BOOL_COND)||LA129_0==REALIAS) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:753:52: real_arg ( COMMA real_arg )*
                            {
                            pushFollow(FOLLOW_real_arg_in_cast_expr4301);
                            real_arg448=real_arg();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_real_arg.add(real_arg448.getTree());

                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:753:61: ( COMMA real_arg )*
                            loop128:
                            do {
                                int alt128=2;
                                int LA128_0 = input.LA(1);

                                if ( (LA128_0==COMMA) ) {
                                    alt128=1;
                                }


                                switch (alt128) {
                            	case 1 :
                            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:753:63: COMMA real_arg
                            	    {
                            	    COMMA449=(Token)match(input,COMMA,FOLLOW_COMMA_in_cast_expr4305); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA449);


                            	    pushFollow(FOLLOW_real_arg_in_cast_expr4307);
                            	    real_arg450=real_arg();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg450.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop128;
                                }
                            } while (true);


                            }
                            break;

                    }


                    RIGHT_PAREN451=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cast_expr4315); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN451);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:753:96: ( projection )*
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);

                        if ( (LA130_0==PERIOD||LA130_0==POUND) ) {
                            alt130=1;
                        }


                        switch (alt130) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:753:96: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_cast_expr4317);
                    	    projection452=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection452.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop130;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: real_arg, func_name_without_columns, projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 753:108: -> ^( FUNC_EVAL func_name_without_columns ( real_arg )* ) ( projection )*
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:753:111: ^( FUNC_EVAL func_name_without_columns ( real_arg )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name_without_columns.nextTree());

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:753:150: ( real_arg )*
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:753:162: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:13: CASE ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN expr THEN expr ( WHEN expr THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_EXPR ( expr )+ ) ( projection )* )
                    {
                    CASE453=(Token)match(input,CASE,FOLLOW_CASE_in_cast_expr4348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE453);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:18: ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN expr THEN expr ( WHEN expr THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_EXPR ( expr )+ ) ( projection )* )
                    int alt137=2;
                    alt137 = dfa137.predict(input);
                    switch (alt137) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:20: ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )*
                            {
                            WHEN454=(Token)match(input,WHEN,FOLLOW_WHEN_in_cast_expr4357); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHEN.add(WHEN454);


                            pushFollow(FOLLOW_cond_in_cast_expr4359);
                            cond455=cond();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_cond.add(cond455.getTree());

                            THEN456=(Token)match(input,THEN,FOLLOW_THEN_in_cast_expr4361); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN456);


                            pushFollow(FOLLOW_expr_in_cast_expr4363);
                            expr457=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr457.getTree());

                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:49: ( WHEN cond THEN expr )*
                            loop131:
                            do {
                                int alt131=2;
                                int LA131_0 = input.LA(1);

                                if ( (LA131_0==WHEN) ) {
                                    alt131=1;
                                }


                                switch (alt131) {
                            	case 1 :
                            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:51: WHEN cond THEN expr
                            	    {
                            	    WHEN458=(Token)match(input,WHEN,FOLLOW_WHEN_in_cast_expr4367); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_WHEN.add(WHEN458);


                            	    pushFollow(FOLLOW_cond_in_cast_expr4369);
                            	    cond459=cond();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_cond.add(cond459.getTree());

                            	    THEN460=(Token)match(input,THEN,FOLLOW_THEN_in_cast_expr4371); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_THEN.add(THEN460);


                            	    pushFollow(FOLLOW_expr_in_cast_expr4373);
                            	    expr461=expr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expr.add(expr461.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop131;
                                }
                            } while (true);


                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:74: ( ELSE expr )?
                            int alt132=2;
                            int LA132_0 = input.LA(1);

                            if ( (LA132_0==ELSE) ) {
                                alt132=1;
                            }
                            switch (alt132) {
                                case 1 :
                                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:76: ELSE expr
                                    {
                                    ELSE462=(Token)match(input,ELSE,FOLLOW_ELSE_in_cast_expr4380); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ELSE.add(ELSE462);


                                    pushFollow(FOLLOW_expr_in_cast_expr4382);
                                    expr463=expr();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expr.add(expr463.getTree());

                                    }
                                    break;

                            }


                            END464=(Token)match(input,END,FOLLOW_END_in_cast_expr4387); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_END.add(END464);


                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:93: ( projection )*
                            loop133:
                            do {
                                int alt133=2;
                                int LA133_0 = input.LA(1);

                                if ( (LA133_0==PERIOD||LA133_0==POUND) ) {
                                    alt133=1;
                                }


                                switch (alt133) {
                            	case 1 :
                            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:93: projection
                            	    {
                            	    pushFollow(FOLLOW_projection_in_cast_expr4389);
                            	    projection465=projection();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_projection.add(projection465.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop133;
                                }
                            } while (true);


                            // AST REWRITE
                            // elements: expr, cond, WHEN, projection, THEN
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 754:105: -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )*
                            {
                                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:108: ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(CASE_COND, "CASE_COND")
                                , root_1);

                                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:121: ^( WHEN ( cond )+ )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(
                                stream_WHEN.nextNode()
                                , root_2);

                                if ( !(stream_cond.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_cond.hasNext() ) {
                                    adaptor.addChild(root_2, stream_cond.nextTree());

                                }
                                stream_cond.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:135: ^( THEN ( expr )+ )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(
                                stream_THEN.nextNode()
                                , root_2);

                                if ( !(stream_expr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expr.hasNext() ) {
                                    adaptor.addChild(root_2, stream_expr.nextTree());

                                }
                                stream_expr.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:151: ( projection )*
                                while ( stream_projection.hasNext() ) {
                                    adaptor.addChild(root_0, stream_projection.nextTree());

                                }
                                stream_projection.reset();

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 2 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:755:20: expr WHEN expr THEN expr ( WHEN expr THEN expr )* ( ELSE expr )? END ( projection )*
                            {
                            pushFollow(FOLLOW_expr_in_cast_expr4436);
                            expr466=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr466.getTree());

                            WHEN467=(Token)match(input,WHEN,FOLLOW_WHEN_in_cast_expr4438); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHEN.add(WHEN467);


                            pushFollow(FOLLOW_expr_in_cast_expr4440);
                            expr468=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr468.getTree());

                            THEN469=(Token)match(input,THEN,FOLLOW_THEN_in_cast_expr4442); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN469);


                            pushFollow(FOLLOW_expr_in_cast_expr4444);
                            expr470=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr470.getTree());

                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:755:45: ( WHEN expr THEN expr )*
                            loop134:
                            do {
                                int alt134=2;
                                int LA134_0 = input.LA(1);

                                if ( (LA134_0==WHEN) ) {
                                    alt134=1;
                                }


                                switch (alt134) {
                            	case 1 :
                            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:755:47: WHEN expr THEN expr
                            	    {
                            	    WHEN471=(Token)match(input,WHEN,FOLLOW_WHEN_in_cast_expr4448); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_WHEN.add(WHEN471);


                            	    pushFollow(FOLLOW_expr_in_cast_expr4450);
                            	    expr472=expr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expr.add(expr472.getTree());

                            	    THEN473=(Token)match(input,THEN,FOLLOW_THEN_in_cast_expr4452); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_THEN.add(THEN473);


                            	    pushFollow(FOLLOW_expr_in_cast_expr4454);
                            	    expr474=expr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expr.add(expr474.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop134;
                                }
                            } while (true);


                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:755:70: ( ELSE expr )?
                            int alt135=2;
                            int LA135_0 = input.LA(1);

                            if ( (LA135_0==ELSE) ) {
                                alt135=1;
                            }
                            switch (alt135) {
                                case 1 :
                                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:755:72: ELSE expr
                                    {
                                    ELSE475=(Token)match(input,ELSE,FOLLOW_ELSE_in_cast_expr4461); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ELSE.add(ELSE475);


                                    pushFollow(FOLLOW_expr_in_cast_expr4463);
                                    expr476=expr();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expr.add(expr476.getTree());

                                    }
                                    break;

                            }


                            END477=(Token)match(input,END,FOLLOW_END_in_cast_expr4468); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_END.add(END477);


                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:755:89: ( projection )*
                            loop136:
                            do {
                                int alt136=2;
                                int LA136_0 = input.LA(1);

                                if ( (LA136_0==PERIOD||LA136_0==POUND) ) {
                                    alt136=1;
                                }


                                switch (alt136) {
                            	case 1 :
                            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:755:89: projection
                            	    {
                            	    pushFollow(FOLLOW_projection_in_cast_expr4470);
                            	    projection478=projection();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_projection.add(projection478.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop136;
                                }
                            } while (true);


                            // AST REWRITE
                            // elements: expr, projection
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 755:101: -> ^( CASE_EXPR ( expr )+ ) ( projection )*
                            {
                                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:755:104: ^( CASE_EXPR ( expr )+ )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(CASE_EXPR, "CASE_EXPR")
                                , root_1);

                                if ( !(stream_expr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expr.nextTree());

                                }
                                stream_expr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:755:125: ( projection )*
                                while ( stream_projection.hasNext() ) {
                                    adaptor.addChild(root_0, stream_projection.nextTree());

                                }
                                stream_projection.reset();

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:757:13: paren_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_paren_expr_in_cast_expr4518);
                    paren_expr479=paren_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_expr479.getTree());

                    }
                    break;
                case 10 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:758:13: curly_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_curly_expr_in_cast_expr4532);
                    curly_expr480=curly_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, curly_expr480.getTree());

                    }
                    break;
                case 11 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:759:13: bracket_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bracket_expr_in_cast_expr4546);
                    bracket_expr481=bracket_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_expr481.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    BaseTree tree = (BaseTree) retval.getTree();

                    // the parser does an initial optimisation step: it removes TOTUPLE / TOMAP / TOBAG
                    // function calls if it knows they'll just return the input (i.e. because the function's
                    // argument is a literal). We'll do this here by post-processing the result:
                    if(tree.getType() == FUNC_EVAL) {
                        Integer func = FUNC_TO_LITERAL.get(tree.getChild(0).getType());
                        if(func != null) {
                            boolean canBeOptimised = true;
                            for(int arg = 1; arg < tree.getChildCount() && canBeOptimised; ++arg) {
                                canBeOptimised &= LITERAL_TOKENS.contains(tree.getChild(arg).getType());
                            }
                            if(canBeOptimised) {
                                retval.tree = adaptor.create(func, func.toString());
                                ((BaseTree)retval.tree).addChildren(tree.getChildren());
                                ((BaseTree)retval.tree).deleteChild(0); // the (e.g.) TOBAG token
                                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
                            }
                        }
                    }

                    // a minor correction to the token text for formatting -
                    // we want NEG's text to be the same as MINUSes
                    if(tree.getType() == NEG) {
                        ((CommonTree)tree).token.setText("-");
                    }

                    // As noted below, brackets around a single literal mean a tuple
                    // of that literal, not a nested expression which evaluates to
                    // that literal. Remember that a NULL with children is a boolean
                    // expression, not a literal!
                    if(tree.getType() == EXPR_IN_PAREN
                    && LITERAL_TOKENS.contains(tree.getChild(0).getType())
                    && (tree.getChild(0).getType() != NULL || tree.getChild(0).getChildCount() == 0)) {
                        ((CommonTree)tree).token.setType(TUPLE_VAL);
                    }

                    // For CASE statement, we clone the case expression (1st child of the
                    // returned tree) and insert it before every when expression. For example,
                    //
                    //   CASE e1
                    //     WHEN e2 THEN e3
                    //     WHEN e4 THEN e5
                    //     ELSE e6
                    //   END
                    // =>
                    //   ^( CASE e1, e2, e3, e1, e4, e5, e6 )
                    //
                    // Note that e1 appears twice at index 0 and 3.
                    //
                    // This is needed because in LogicalPlanGenerator.g, we translate this
                    // tree to nested bincond expressions, and we need to construct a new
                    // LogicalExpression object per when branch.
                    if(tree.getType() == CASE_EXPR) {
                        Tree caseExpr = tree.getChild(0);
                        int childCount = tree.getChildCount();
                        boolean hasElse = childCount % 2 == 0;
                        int whenBranchCount = ( childCount - (hasElse ? 2 : 1) ) / 2;
                        for(int i = 1; i < whenBranchCount; i++) {
                            tree.insertChild(3*i, deepCopy(caseExpr));
                        }
                    }
                }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expr"


    public static class invoker_func_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "invoker_func"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:762:1: invoker_func : INVOKE ( AMPERSAND | LEFT_PAREN real_arg RIGHT_PAREN ) (packageName= identifier_plus PERIOD )* methodName= identifier_plus LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN -> ^( INVOKER_FUNC_EVAL IDENTIFIER[Joiner.on(\".\").join(packageStr)] IDENTIFIER[methodStr] IDENTIFIER[staticStr] ( real_arg )* ) ;
    public final QueryParser.invoker_func_return invoker_func() throws RecognitionException {
        QueryParser.invoker_func_return retval = new QueryParser.invoker_func_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INVOKE482=null;
        Token AMPERSAND483=null;
        Token LEFT_PAREN484=null;
        Token RIGHT_PAREN486=null;
        Token PERIOD487=null;
        Token LEFT_PAREN488=null;
        Token COMMA490=null;
        Token RIGHT_PAREN492=null;
        QueryParser.identifier_plus_return packageName =null;

        QueryParser.identifier_plus_return methodName =null;

        QueryParser.real_arg_return real_arg485 =null;

        QueryParser.real_arg_return real_arg489 =null;

        QueryParser.real_arg_return real_arg491 =null;


        Object INVOKE482_tree=null;
        Object AMPERSAND483_tree=null;
        Object LEFT_PAREN484_tree=null;
        Object RIGHT_PAREN486_tree=null;
        Object PERIOD487_tree=null;
        Object LEFT_PAREN488_tree=null;
        Object COMMA490_tree=null;
        Object RIGHT_PAREN492_tree=null;
        RewriteRuleTokenStream stream_AMPERSAND=new RewriteRuleTokenStream(adaptor,"token AMPERSAND");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_INVOKE=new RewriteRuleTokenStream(adaptor,"token INVOKE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");

            String staticStr = "true";
            List<String> packageStr = Lists.newArrayList();
            String methodStr = null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:768:3: ( INVOKE ( AMPERSAND | LEFT_PAREN real_arg RIGHT_PAREN ) (packageName= identifier_plus PERIOD )* methodName= identifier_plus LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN -> ^( INVOKER_FUNC_EVAL IDENTIFIER[Joiner.on(\".\").join(packageStr)] IDENTIFIER[methodStr] IDENTIFIER[staticStr] ( real_arg )* ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:768:3: INVOKE ( AMPERSAND | LEFT_PAREN real_arg RIGHT_PAREN ) (packageName= identifier_plus PERIOD )* methodName= identifier_plus LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN
            {
            INVOKE482=(Token)match(input,INVOKE,FOLLOW_INVOKE_in_invoker_func4560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INVOKE.add(INVOKE482);


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:768:10: ( AMPERSAND | LEFT_PAREN real_arg RIGHT_PAREN )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==AMPERSAND) ) {
                alt139=1;
            }
            else if ( (LA139_0==LEFT_PAREN) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;

            }
            switch (alt139) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:768:12: AMPERSAND
                    {
                    AMPERSAND483=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_invoker_func4564); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AMPERSAND.add(AMPERSAND483);


                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:768:24: LEFT_PAREN real_arg RIGHT_PAREN
                    {
                    LEFT_PAREN484=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_invoker_func4568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN484);


                    pushFollow(FOLLOW_real_arg_in_invoker_func4570);
                    real_arg485=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg485.getTree());

                    if ( state.backtracking==0 ) { staticStr = "false"; }

                    RIGHT_PAREN486=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_invoker_func4574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN486);


                    }
                    break;

            }


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:768:83: (packageName= identifier_plus PERIOD )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==IDENTIFIER) ) {
                    int LA140_1 = input.LA(2);

                    if ( (LA140_1==PERIOD) ) {
                        alt140=1;
                    }


                }
                else if ( (LA140_0==CUBE||(LA140_0 >= ELSE && LA140_0 <= END)||LA140_0==IN||LA140_0==RANK||LA140_0==THEN||LA140_0==WHEN) ) {
                    int LA140_2 = input.LA(2);

                    if ( (LA140_2==PERIOD) ) {
                        alt140=1;
                    }


                }


                switch (alt140) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:768:85: packageName= identifier_plus PERIOD
            	    {
            	    pushFollow(FOLLOW_identifier_plus_in_invoker_func4582);
            	    packageName=identifier_plus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_identifier_plus.add(packageName.getTree());

            	    PERIOD487=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_invoker_func4584); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD487);


            	    if ( state.backtracking==0 ) { packageStr.add((packageName!=null?input.toString(packageName.start,packageName.stop):null)); }

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            pushFollow(FOLLOW_identifier_plus_in_invoker_func4593);
            methodName=identifier_plus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier_plus.add(methodName.getTree());

            if ( state.backtracking==0 ) { methodStr=(methodName!=null?input.toString(methodName.start,methodName.stop):null); }

            LEFT_PAREN488=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_invoker_func4597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN488);


            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:768:232: ( real_arg ( COMMA real_arg )* )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==ALL||LA142_0==AND||(LA142_0 >= AS && LA142_0 <= ASC)||LA142_0==BIGDECIMAL||LA142_0==BIGINTEGER||(LA142_0 >= BY && LA142_0 <= COGROUP)||(LA142_0 >= CROSS && LA142_0 <= DATETIME)||LA142_0==DEFINE||LA142_0==DESC||LA142_0==DISTINCT||LA142_0==DOLLARVAR||(LA142_0 >= DOUBLENUMBER && LA142_0 <= END)||LA142_0==FALSE||LA142_0==FILTER||(LA142_0 >= FLOATNUMBER && LA142_0 <= GROUP)||(LA142_0 >= IDENTIFIER && LA142_0 <= INPUT)||(LA142_0 >= INTEGER && LA142_0 <= LEFT_PAREN)||(LA142_0 >= LIMIT && LA142_0 <= LOAD)||LA142_0==LONGINTEGER||(LA142_0 >= MAPREDUCE && LA142_0 <= MINUS)||LA142_0==NULL||(LA142_0 >= OR && LA142_0 <= ORDER)||(LA142_0 >= OUTER && LA142_0 <= PARTITION)||(LA142_0 >= QUOTEDSTRING && LA142_0 <= RIGHT)||(LA142_0 >= ROLLUP && LA142_0 <= SAMPLE)||LA142_0==SHIP||(LA142_0 >= SPLIT && LA142_0 <= TRUE)||(LA142_0 >= UNION && LA142_0 <= USING)||LA142_0==WHEN||(LA142_0 >= BOOL && LA142_0 <= BOOL_COND)||LA142_0==REALIAS) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:768:234: real_arg ( COMMA real_arg )*
                    {
                    pushFollow(FOLLOW_real_arg_in_invoker_func4601);
                    real_arg489=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg489.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:768:243: ( COMMA real_arg )*
                    loop141:
                    do {
                        int alt141=2;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==COMMA) ) {
                            alt141=1;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:768:245: COMMA real_arg
                    	    {
                    	    COMMA490=(Token)match(input,COMMA,FOLLOW_COMMA_in_invoker_func4605); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA490);


                    	    pushFollow(FOLLOW_real_arg_in_invoker_func4607);
                    	    real_arg491=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg491.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop141;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN492=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_invoker_func4615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN492);


            // AST REWRITE
            // elements: real_arg
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 769:15: -> ^( INVOKER_FUNC_EVAL IDENTIFIER[Joiner.on(\".\").join(packageStr)] IDENTIFIER[methodStr] IDENTIFIER[staticStr] ( real_arg )* )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:769:18: ^( INVOKER_FUNC_EVAL IDENTIFIER[Joiner.on(\".\").join(packageStr)] IDENTIFIER[methodStr] IDENTIFIER[staticStr] ( real_arg )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INVOKER_FUNC_EVAL, "INVOKER_FUNC_EVAL")
                , root_1);

                adaptor.addChild(root_1, 
                (Object)adaptor.create(IDENTIFIER, Joiner.on(".").join(packageStr))
                );

                adaptor.addChild(root_1, 
                (Object)adaptor.create(IDENTIFIER, methodStr)
                );

                adaptor.addChild(root_1, 
                (Object)adaptor.create(IDENTIFIER, staticStr)
                );

                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:769:127: ( real_arg )*
                while ( stream_real_arg.hasNext() ) {
                    adaptor.addChild(root_1, stream_real_arg.nextTree());

                }
                stream_real_arg.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "invoker_func"


    public static class paren_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "paren_expr"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:779:1: paren_expr : LEFT_PAREN ! try_implicit_map_cast ;
    public final QueryParser.paren_expr_return paren_expr() throws RecognitionException {
        QueryParser.paren_expr_return retval = new QueryParser.paren_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN493=null;
        QueryParser.try_implicit_map_cast_return try_implicit_map_cast494 =null;


        Object LEFT_PAREN493_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:819:5: ( LEFT_PAREN ! try_implicit_map_cast )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:819:7: LEFT_PAREN ! try_implicit_map_cast
            {
            root_0 = (Object)adaptor.nil();


            LEFT_PAREN493=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_paren_expr4682); if (state.failed) return retval;

            pushFollow(FOLLOW_try_implicit_map_cast_in_paren_expr4685);
            try_implicit_map_cast494=try_implicit_map_cast();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, try_implicit_map_cast494.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    BaseTree tree = (BaseTree)retval.getTree();

                    // the other side of the @after block in unary_cond: if we've
                    // matched an EXPR_IN_PAREN we expect the nested expression to
                    // be an "expr", not a "cond", so we should strip off the
                    // BOOL_COND token.
                    if(tree.getType() == EXPR_IN_PAREN
                    && tree.getChild(0).getType() == BOOL_COND) {
                        int type = tree.getChild(0).getChild(0).getType();
                        // NULL is a special case - if it has children it's a boolean
                        // expression, and if not it's a literal NULL. Note that we
                        // replace *all* children
                        if(!BOOLEAN_TOKENS.contains(type)
                        || (type == NULL && tree.getChild(0).getChild(0).getChildCount() == 0)) {
                            Tree addChildrenOf = tree.getChild(0);
                            for(int i = 0; i < tree.getChildCount(); ++i)
                                tree.deleteChild(i);
                            for(int i = 0; i < addChildrenOf.getChildCount(); ++i)
                                tree.addChild(addChildrenOf.getChild(i));
                        }
                    }

                    // A function call to TOTUPLE is inserted into the AST for
                    // some tuple literals - but as we assume the first expression
                    // after an open bracket is a "cond" rule, and as "cond" rules
                    // nest "expr" rules under a BOOL_COND token we get an invalid
                    // AST. We'll remove this BOOL_COND here:
                    if(tree.getType() == FUNC_EVAL
                    && tree.getChild(0).getType() == TOTUPLE
                    && tree.getChildCount() > 1
                    && tree.getChild(1).getType() == BOOL_COND) {
                        Tree insertChildrenOf = tree.getChild(1);
                        tree.deleteChild(1);
                        for(int i = insertChildrenOf.getChildCount() - 1; i >= 0; --i)
                            tree.insertChild(1, insertChildrenOf.getChild(i));
                    }
                }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "paren_expr"


    public static class try_implicit_map_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_implicit_map_cast"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:822:1: try_implicit_map_cast : ( ( implicit_map_type RIGHT_PAREN cast_expr )=> implicit_map_type RIGHT_PAREN cast_expr -> ^( CAST_EXPR implicit_map_type cast_expr ) | after_left_paren );
    public final QueryParser.try_implicit_map_cast_return try_implicit_map_cast() throws RecognitionException {
        QueryParser.try_implicit_map_cast_return retval = new QueryParser.try_implicit_map_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RIGHT_PAREN496=null;
        QueryParser.implicit_map_type_return implicit_map_type495 =null;

        QueryParser.cast_expr_return cast_expr497 =null;

        QueryParser.after_left_paren_return after_left_paren498 =null;


        Object RIGHT_PAREN496_tree=null;
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
        RewriteRuleSubtreeStream stream_implicit_map_type=new RewriteRuleSubtreeStream(adaptor,"rule implicit_map_type");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:829:12: ( ( implicit_map_type RIGHT_PAREN cast_expr )=> implicit_map_type RIGHT_PAREN cast_expr -> ^( CAST_EXPR implicit_map_type cast_expr ) | after_left_paren )
            int alt143=2;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:829:14: ( implicit_map_type RIGHT_PAREN cast_expr )=> implicit_map_type RIGHT_PAREN cast_expr
                    {
                    pushFollow(FOLLOW_implicit_map_type_in_try_implicit_map_cast4788);
                    implicit_map_type495=implicit_map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implicit_map_type.add(implicit_map_type495.getTree());

                    RIGHT_PAREN496=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_try_implicit_map_cast4790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN496);


                    pushFollow(FOLLOW_cast_expr_in_try_implicit_map_cast4792);
                    cast_expr497=cast_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expr.add(cast_expr497.getTree());

                    // AST REWRITE
                    // elements: implicit_map_type, cast_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 829:100: -> ^( CAST_EXPR implicit_map_type cast_expr )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:829:103: ^( CAST_EXPR implicit_map_type cast_expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CAST_EXPR, "CAST_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_implicit_map_type.nextTree());

                        adaptor.addChild(root_1, stream_cast_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:830:14: after_left_paren
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_after_left_paren_in_try_implicit_map_cast4819);
                    after_left_paren498=after_left_paren();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, after_left_paren498.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_implicit_map_cast"


    public static class after_left_paren_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "after_left_paren"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:833:1: after_left_paren : ( explicit_type_cast RIGHT_PAREN cast_expr -> ^( CAST_EXPR explicit_type_cast cast_expr ) | RIGHT_PAREN ( projection )* -> ^( TUPLE_VAL ) ( projection )* | STAR ( COMMA real_arg )* RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE STAR ( real_arg )* ) ( projection )* | col_range ( COMMA real_arg )* RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE col_range ( real_arg )* ) ( projection )* | cond ( ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* ) | ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) ) | ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ) ) );
    public final QueryParser.after_left_paren_return after_left_paren() throws RecognitionException {
        QueryParser.after_left_paren_return retval = new QueryParser.after_left_paren_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RIGHT_PAREN500=null;
        Token RIGHT_PAREN502=null;
        Token STAR504=null;
        Token COMMA505=null;
        Token RIGHT_PAREN507=null;
        Token COMMA510=null;
        Token RIGHT_PAREN512=null;
        Token COMMA515=null;
        Token RIGHT_PAREN517=null;
        Token RIGHT_PAREN519=null;
        Token QMARK520=null;
        Token COLON521=null;
        Token RIGHT_PAREN522=null;
        QueryParser.expr_return exp1 =null;

        QueryParser.expr_return exp2 =null;

        QueryParser.explicit_type_cast_return explicit_type_cast499 =null;

        QueryParser.cast_expr_return cast_expr501 =null;

        QueryParser.projection_return projection503 =null;

        QueryParser.real_arg_return real_arg506 =null;

        QueryParser.projection_return projection508 =null;

        QueryParser.col_range_return col_range509 =null;

        QueryParser.real_arg_return real_arg511 =null;

        QueryParser.projection_return projection513 =null;

        QueryParser.cond_return cond514 =null;

        QueryParser.real_arg_return real_arg516 =null;

        QueryParser.projection_return projection518 =null;


        Object RIGHT_PAREN500_tree=null;
        Object RIGHT_PAREN502_tree=null;
        Object STAR504_tree=null;
        Object COMMA505_tree=null;
        Object RIGHT_PAREN507_tree=null;
        Object COMMA510_tree=null;
        Object RIGHT_PAREN512_tree=null;
        Object COMMA515_tree=null;
        Object RIGHT_PAREN517_tree=null;
        Object RIGHT_PAREN519_tree=null;
        Object QMARK520_tree=null;
        Object COLON521_tree=null;
        Object RIGHT_PAREN522_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");
        RewriteRuleSubtreeStream stream_explicit_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule explicit_type_cast");
        RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
        RewriteRuleSubtreeStream stream_projection=new RewriteRuleSubtreeStream(adaptor,"rule projection");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        RewriteRuleSubtreeStream stream_col_range=new RewriteRuleSubtreeStream(adaptor,"rule col_range");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:833:18: ( explicit_type_cast RIGHT_PAREN cast_expr -> ^( CAST_EXPR explicit_type_cast cast_expr ) | RIGHT_PAREN ( projection )* -> ^( TUPLE_VAL ) ( projection )* | STAR ( COMMA real_arg )* RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE STAR ( real_arg )* ) ( projection )* | col_range ( COMMA real_arg )* RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE col_range ( real_arg )* ) ( projection )* | cond ( ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* ) | ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) ) | ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ) ) )
            int alt152=5;
            switch ( input.LA(1) ) {
            case BIGINTEGER:
                {
                int LA152_1 = input.LA(2);

                if ( (LA152_1==RIGHT_PAREN) ) {
                    alt152=1;
                }
                else if ( (LA152_1==DOLLAR||LA152_1==LEFT_PAREN||LA152_1==PERIOD) ) {
                    alt152=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 152, 1, input);

                    throw nvae;

                }
                }
                break;
            case BAG:
            case BOOLEAN:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case MAP:
            case TUPLE:
                {
                alt152=1;
                }
                break;
            case RIGHT_PAREN:
                {
                alt152=2;
                }
                break;
            case STAR:
                {
                alt152=3;
                }
                break;
            case DOLLARVAR:
            case GROUP:
                {
                int LA152_5 = input.LA(2);

                if ( (LA152_5==DOUBLE_PERIOD) ) {
                    alt152=4;
                }
                else if ( (LA152_5==AND||LA152_5==COMMA||LA152_5==DIV||LA152_5==IN||LA152_5==IS||LA152_5==MINUS||(LA152_5 >= NUM_OP_EQ && LA152_5 <= NUM_OP_NE)||LA152_5==OR||(LA152_5 >= PERCENT && LA152_5 <= QMARK)||LA152_5==RIGHT_PAREN||LA152_5==STAR||(LA152_5 >= STR_OP_EQ && LA152_5 <= STR_OP_NE)) ) {
                    alt152=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 152, 5, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA152_6 = input.LA(2);

                if ( (LA152_6==DOUBLE_PERIOD) ) {
                    alt152=4;
                }
                else if ( (LA152_6==AND||LA152_6==COMMA||(LA152_6 >= DIV && LA152_6 <= DOLLAR)||LA152_6==IN||LA152_6==IS||LA152_6==LEFT_PAREN||LA152_6==MINUS||(LA152_6 >= NUM_OP_EQ && LA152_6 <= NUM_OP_NE)||LA152_6==OR||(LA152_6 >= PERCENT && LA152_6 <= QMARK)||LA152_6==RIGHT_PAREN||LA152_6==STAR||(LA152_6 >= STR_OP_EQ && LA152_6 <= STR_OP_NE)) ) {
                    alt152=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 152, 6, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA152_7 = input.LA(2);

                if ( (LA152_7==DOUBLE_PERIOD) ) {
                    alt152=4;
                }
                else if ( (LA152_7==AND||LA152_7==COMMA||(LA152_7 >= DIV && LA152_7 <= DOLLAR)||LA152_7==IN||LA152_7==IS||LA152_7==LEFT_PAREN||LA152_7==MINUS||(LA152_7 >= NUM_OP_EQ && LA152_7 <= NUM_OP_NE)||LA152_7==OR||(LA152_7 >= PERCENT && LA152_7 <= QMARK)||LA152_7==RIGHT_PAREN||LA152_7==STAR||(LA152_7 >= STR_OP_EQ && LA152_7 <= STR_OP_NE)) ) {
                    alt152=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 152, 7, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt152=4;
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BY:
            case CACHE:
            case CASE:
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INTEGER:
            case INTO:
            case INVOKE:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONGINTEGER:
            case MAPREDUCE:
            case MINUS:
            case NOT:
            case NULL:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt152=5;
                }
                break;
            case BIGDECIMAL:
                {
                int LA152_10 = input.LA(2);

                if ( (LA152_10==RIGHT_PAREN) ) {
                    alt152=1;
                }
                else if ( (LA152_10==DOLLAR||LA152_10==LEFT_PAREN||LA152_10==PERIOD) ) {
                    alt152=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 152, 10, input);

                    throw nvae;

                }
                }
                break;
            case DATETIME:
                {
                int LA152_11 = input.LA(2);

                if ( (LA152_11==RIGHT_PAREN) ) {
                    alt152=1;
                }
                else if ( (LA152_11==DOLLAR||LA152_11==LEFT_PAREN||LA152_11==PERIOD) ) {
                    alt152=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 152, 11, input);

                    throw nvae;

                }
                }
                break;
            case CHARARRAY:
                {
                int LA152_12 = input.LA(2);

                if ( (LA152_12==RIGHT_PAREN) ) {
                    alt152=1;
                }
                else if ( (LA152_12==DOLLAR||LA152_12==LEFT_PAREN||LA152_12==PERIOD) ) {
                    alt152=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 152, 12, input);

                    throw nvae;

                }
                }
                break;
            case BYTEARRAY:
                {
                int LA152_13 = input.LA(2);

                if ( (LA152_13==RIGHT_PAREN) ) {
                    alt152=1;
                }
                else if ( (LA152_13==DOLLAR||LA152_13==LEFT_PAREN||LA152_13==PERIOD) ) {
                    alt152=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 152, 13, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;

            }

            switch (alt152) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:833:20: explicit_type_cast RIGHT_PAREN cast_expr
                    {
                    pushFollow(FOLLOW_explicit_type_cast_in_after_left_paren4828);
                    explicit_type_cast499=explicit_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_type_cast.add(explicit_type_cast499.getTree());

                    RIGHT_PAREN500=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren4830); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN500);


                    pushFollow(FOLLOW_cast_expr_in_after_left_paren4832);
                    cast_expr501=cast_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expr.add(cast_expr501.getTree());

                    // AST REWRITE
                    // elements: explicit_type_cast, cast_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 833:61: -> ^( CAST_EXPR explicit_type_cast cast_expr )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:833:64: ^( CAST_EXPR explicit_type_cast cast_expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CAST_EXPR, "CAST_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_explicit_type_cast.nextTree());

                        adaptor.addChild(root_1, stream_cast_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:835:20: RIGHT_PAREN ( projection )*
                    {
                    RIGHT_PAREN502=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren4883); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN502);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:835:32: ( projection )*
                    loop144:
                    do {
                        int alt144=2;
                        int LA144_0 = input.LA(1);

                        if ( (LA144_0==PERIOD||LA144_0==POUND) ) {
                            alt144=1;
                        }


                        switch (alt144) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:835:32: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_after_left_paren4885);
                    	    projection503=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection503.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop144;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 835:44: -> ^( TUPLE_VAL ) ( projection )*
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:835:47: ^( TUPLE_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:835:62: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:836:20: STAR ( COMMA real_arg )* RIGHT_PAREN ( projection )*
                    {
                    STAR504=(Token)match(input,STAR,FOLLOW_STAR_in_after_left_paren4918); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(STAR504);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:836:25: ( COMMA real_arg )*
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==COMMA) ) {
                            alt145=1;
                        }


                        switch (alt145) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:836:27: COMMA real_arg
                    	    {
                    	    COMMA505=(Token)match(input,COMMA,FOLLOW_COMMA_in_after_left_paren4922); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA505);


                    	    pushFollow(FOLLOW_real_arg_in_after_left_paren4924);
                    	    real_arg506=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg506.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop145;
                        }
                    } while (true);


                    RIGHT_PAREN507=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren4929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN507);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:836:57: ( projection )*
                    loop146:
                    do {
                        int alt146=2;
                        int LA146_0 = input.LA(1);

                        if ( (LA146_0==PERIOD||LA146_0==POUND) ) {
                            alt146=1;
                        }


                        switch (alt146) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:836:57: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_after_left_paren4931);
                    	    projection508=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection508.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop146;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection, real_arg, STAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 836:69: -> ^( FUNC_EVAL TOTUPLE STAR ( real_arg )* ) ( projection )*
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:836:72: ^( FUNC_EVAL TOTUPLE STAR ( real_arg )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOTUPLE, "TOTUPLE")
                        );

                        adaptor.addChild(root_1, 
                        stream_STAR.nextNode()
                        );

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:836:98: ( real_arg )*
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:836:110: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:837:20: col_range ( COMMA real_arg )* RIGHT_PAREN ( projection )*
                    {
                    pushFollow(FOLLOW_col_range_in_after_left_paren4971);
                    col_range509=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_range.add(col_range509.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:837:30: ( COMMA real_arg )*
                    loop147:
                    do {
                        int alt147=2;
                        int LA147_0 = input.LA(1);

                        if ( (LA147_0==COMMA) ) {
                            alt147=1;
                        }


                        switch (alt147) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:837:32: COMMA real_arg
                    	    {
                    	    COMMA510=(Token)match(input,COMMA,FOLLOW_COMMA_in_after_left_paren4975); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA510);


                    	    pushFollow(FOLLOW_real_arg_in_after_left_paren4977);
                    	    real_arg511=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg511.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop147;
                        }
                    } while (true);


                    RIGHT_PAREN512=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren4982); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN512);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:837:62: ( projection )*
                    loop148:
                    do {
                        int alt148=2;
                        int LA148_0 = input.LA(1);

                        if ( (LA148_0==PERIOD||LA148_0==POUND) ) {
                            alt148=1;
                        }


                        switch (alt148) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:837:62: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_after_left_paren4984);
                    	    projection513=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection513.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop148;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection, col_range, real_arg
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 837:74: -> ^( FUNC_EVAL TOTUPLE col_range ( real_arg )* ) ( projection )*
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:837:77: ^( FUNC_EVAL TOTUPLE col_range ( real_arg )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOTUPLE, "TOTUPLE")
                        );

                        adaptor.addChild(root_1, stream_col_range.nextTree());

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:837:108: ( real_arg )*
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:837:120: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:842:20: cond ( ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* ) | ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) ) | ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ) )
                    {
                    pushFollow(FOLLOW_cond_in_after_left_paren5096);
                    cond514=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cond.add(cond514.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:843:20: ( ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* ) | ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) ) | ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ) )
                    int alt151=3;
                    switch ( input.LA(1) ) {
                    case COMMA:
                        {
                        alt151=1;
                        }
                        break;
                    case RIGHT_PAREN:
                        {
                        alt151=2;
                        }
                        break;
                    case QMARK:
                        {
                        alt151=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 151, 0, input);

                        throw nvae;

                    }

                    switch (alt151) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:843:22: ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* )
                            {
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:843:22: ( ( COMMA real_arg )+ RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )* )
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:843:24: ( COMMA real_arg )+ RIGHT_PAREN ( projection )*
                            {
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:843:24: ( COMMA real_arg )+
                            int cnt149=0;
                            loop149:
                            do {
                                int alt149=2;
                                int LA149_0 = input.LA(1);

                                if ( (LA149_0==COMMA) ) {
                                    alt149=1;
                                }


                                switch (alt149) {
                            	case 1 :
                            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:843:26: COMMA real_arg
                            	    {
                            	    COMMA515=(Token)match(input,COMMA,FOLLOW_COMMA_in_after_left_paren5123); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA515);


                            	    pushFollow(FOLLOW_real_arg_in_after_left_paren5125);
                            	    real_arg516=real_arg();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg516.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt149 >= 1 ) break loop149;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(149, input);
                                        throw eee;
                                }
                                cnt149++;
                            } while (true);


                            RIGHT_PAREN517=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5130); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN517);


                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:843:56: ( projection )*
                            loop150:
                            do {
                                int alt150=2;
                                int LA150_0 = input.LA(1);

                                if ( (LA150_0==PERIOD||LA150_0==POUND) ) {
                                    alt150=1;
                                }


                                switch (alt150) {
                            	case 1 :
                            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:843:56: projection
                            	    {
                            	    pushFollow(FOLLOW_projection_in_after_left_paren5132);
                            	    projection518=projection();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_projection.add(projection518.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop150;
                                }
                            } while (true);


                            // AST REWRITE
                            // elements: projection, cond, real_arg
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 843:68: -> ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ ) ( projection )*
                            {
                                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:843:71: ^( FUNC_EVAL TOTUPLE cond ( real_arg )+ )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                                , root_1);

                                adaptor.addChild(root_1, 
                                (Object)adaptor.create(TOTUPLE, "TOTUPLE")
                                );

                                adaptor.addChild(root_1, stream_cond.nextTree());

                                if ( !(stream_real_arg.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_real_arg.hasNext() ) {
                                    adaptor.addChild(root_1, stream_real_arg.nextTree());

                                }
                                stream_real_arg.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:843:109: ( projection )*
                                while ( stream_projection.hasNext() ) {
                                    adaptor.addChild(root_0, stream_projection.nextTree());

                                }
                                stream_projection.reset();

                            }


                            retval.tree = root_0;
                            }

                            }


                            }
                            break;
                        case 2 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:844:22: ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) )
                            {
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:844:22: ( RIGHT_PAREN -> ^( EXPR_IN_PAREN cond ) )
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:844:24: RIGHT_PAREN
                            {
                            RIGHT_PAREN519=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5178); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN519);


                            // AST REWRITE
                            // elements: cond
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 844:36: -> ^( EXPR_IN_PAREN cond )
                            {
                                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:844:39: ^( EXPR_IN_PAREN cond )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(EXPR_IN_PAREN, "EXPR_IN_PAREN")
                                , root_1);

                                adaptor.addChild(root_1, stream_cond.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }


                            }
                            break;
                        case 3 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:845:22: ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) )
                            {
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:845:22: ( QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) )
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:845:24: QMARK exp1= expr COLON exp2= expr RIGHT_PAREN
                            {
                            QMARK520=(Token)match(input,QMARK,FOLLOW_QMARK_in_after_left_paren5215); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QMARK.add(QMARK520);


                            pushFollow(FOLLOW_expr_in_after_left_paren5221);
                            exp1=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(exp1.getTree());

                            COLON521=(Token)match(input,COLON,FOLLOW_COLON_in_after_left_paren5223); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON521);


                            pushFollow(FOLLOW_expr_in_after_left_paren5229);
                            exp2=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(exp2.getTree());

                            RIGHT_PAREN522=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_after_left_paren5231); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN522);


                            // AST REWRITE
                            // elements: exp2, cond, exp1
                            // token labels: 
                            // rule labels: retval, exp2, exp1
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_exp2=new RewriteRuleSubtreeStream(adaptor,"rule exp2",exp2!=null?exp2.tree:null);
                            RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 845:72: -> ^( BIN_EXPR cond $exp1 $exp2)
                            {
                                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:845:75: ^( BIN_EXPR cond $exp1 $exp2)
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(BIN_EXPR, "BIN_EXPR")
                                , root_1);

                                adaptor.addChild(root_1, stream_cond.nextTree());

                                adaptor.addChild(root_1, stream_exp1.nextTree());

                                adaptor.addChild(root_1, stream_exp2.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "after_left_paren"


    public static class curly_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "curly_expr"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:848:1: curly_expr : ( LEFT_CURLY real_arg ( COMMA real_arg )* RIGHT_CURLY ( projection )* -> ^( FUNC_EVAL TOBAG ( real_arg )+ ) ( projection )* | LEFT_CURLY RIGHT_CURLY ( projection )* -> ^( BAG_VAL ) ( projection )* );
    public final QueryParser.curly_expr_return curly_expr() throws RecognitionException {
        QueryParser.curly_expr_return retval = new QueryParser.curly_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY523=null;
        Token COMMA525=null;
        Token RIGHT_CURLY527=null;
        Token LEFT_CURLY529=null;
        Token RIGHT_CURLY530=null;
        QueryParser.real_arg_return real_arg524 =null;

        QueryParser.real_arg_return real_arg526 =null;

        QueryParser.projection_return projection528 =null;

        QueryParser.projection_return projection531 =null;


        Object LEFT_CURLY523_tree=null;
        Object COMMA525_tree=null;
        Object RIGHT_CURLY527_tree=null;
        Object LEFT_CURLY529_tree=null;
        Object RIGHT_CURLY530_tree=null;
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_projection=new RewriteRuleSubtreeStream(adaptor,"rule projection");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:848:12: ( LEFT_CURLY real_arg ( COMMA real_arg )* RIGHT_CURLY ( projection )* -> ^( FUNC_EVAL TOBAG ( real_arg )+ ) ( projection )* | LEFT_CURLY RIGHT_CURLY ( projection )* -> ^( BAG_VAL ) ( projection )* )
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==LEFT_CURLY) ) {
                int LA156_1 = input.LA(2);

                if ( (LA156_1==RIGHT_CURLY) ) {
                    alt156=2;
                }
                else if ( (LA156_1==ALL||LA156_1==AND||(LA156_1 >= AS && LA156_1 <= ASC)||LA156_1==BIGDECIMAL||LA156_1==BIGINTEGER||(LA156_1 >= BY && LA156_1 <= COGROUP)||(LA156_1 >= CROSS && LA156_1 <= DATETIME)||LA156_1==DEFINE||LA156_1==DESC||LA156_1==DISTINCT||LA156_1==DOLLARVAR||(LA156_1 >= DOUBLENUMBER && LA156_1 <= END)||LA156_1==FALSE||LA156_1==FILTER||(LA156_1 >= FLOATNUMBER && LA156_1 <= GROUP)||(LA156_1 >= IDENTIFIER && LA156_1 <= INPUT)||(LA156_1 >= INTEGER && LA156_1 <= LEFT_PAREN)||(LA156_1 >= LIMIT && LA156_1 <= LOAD)||LA156_1==LONGINTEGER||(LA156_1 >= MAPREDUCE && LA156_1 <= MINUS)||LA156_1==NULL||(LA156_1 >= OR && LA156_1 <= ORDER)||(LA156_1 >= OUTER && LA156_1 <= PARTITION)||(LA156_1 >= QUOTEDSTRING && LA156_1 <= RIGHT)||(LA156_1 >= ROLLUP && LA156_1 <= SAMPLE)||LA156_1==SHIP||(LA156_1 >= SPLIT && LA156_1 <= TRUE)||(LA156_1 >= UNION && LA156_1 <= USING)||LA156_1==WHEN||(LA156_1 >= BOOL && LA156_1 <= BOOL_COND)||LA156_1==REALIAS) ) {
                    alt156=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;

            }
            switch (alt156) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:848:14: LEFT_CURLY real_arg ( COMMA real_arg )* RIGHT_CURLY ( projection )*
                    {
                    LEFT_CURLY523=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_curly_expr5260); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY523);


                    pushFollow(FOLLOW_real_arg_in_curly_expr5262);
                    real_arg524=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg524.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:848:34: ( COMMA real_arg )*
                    loop153:
                    do {
                        int alt153=2;
                        int LA153_0 = input.LA(1);

                        if ( (LA153_0==COMMA) ) {
                            alt153=1;
                        }


                        switch (alt153) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:848:36: COMMA real_arg
                    	    {
                    	    COMMA525=(Token)match(input,COMMA,FOLLOW_COMMA_in_curly_expr5266); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA525);


                    	    pushFollow(FOLLOW_real_arg_in_curly_expr5268);
                    	    real_arg526=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg526.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop153;
                        }
                    } while (true);


                    RIGHT_CURLY527=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_curly_expr5273); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY527);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:848:66: ( projection )*
                    loop154:
                    do {
                        int alt154=2;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==PERIOD||LA154_0==POUND) ) {
                            alt154=1;
                        }


                        switch (alt154) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:848:66: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_curly_expr5275);
                    	    projection528=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection528.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection, real_arg
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 848:78: -> ^( FUNC_EVAL TOBAG ( real_arg )+ ) ( projection )*
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:848:81: ^( FUNC_EVAL TOBAG ( real_arg )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOBAG, "TOBAG")
                        );

                        if ( !(stream_real_arg.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:848:112: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:849:14: LEFT_CURLY RIGHT_CURLY ( projection )*
                    {
                    LEFT_CURLY529=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_curly_expr5307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY529);


                    RIGHT_CURLY530=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_curly_expr5309); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY530);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:849:37: ( projection )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( (LA155_0==PERIOD||LA155_0==POUND) ) {
                            alt155=1;
                        }


                        switch (alt155) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:849:37: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_curly_expr5311);
                    	    projection531=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection531.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 849:49: -> ^( BAG_VAL ) ( projection )*
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:849:52: ^( BAG_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:849:65: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "curly_expr"


    public static class bracket_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bracket_expr"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:852:1: bracket_expr : ( LEFT_BRACKET real_arg ( COMMA real_arg )* RIGHT_BRACKET ( projection )* -> ^( FUNC_EVAL TOMAP ( real_arg )+ ) ( projection )* | LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET ( projection )* -> ^( MAP_VAL ( keyvalue )+ ) ( projection )* | LEFT_BRACKET RIGHT_BRACKET ( projection )* -> ^( MAP_VAL ) ( projection )* );
    public final QueryParser.bracket_expr_return bracket_expr() throws RecognitionException {
        QueryParser.bracket_expr_return retval = new QueryParser.bracket_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_BRACKET532=null;
        Token COMMA534=null;
        Token RIGHT_BRACKET536=null;
        Token LEFT_BRACKET538=null;
        Token COMMA540=null;
        Token RIGHT_BRACKET542=null;
        Token LEFT_BRACKET544=null;
        Token RIGHT_BRACKET545=null;
        QueryParser.real_arg_return real_arg533 =null;

        QueryParser.real_arg_return real_arg535 =null;

        QueryParser.projection_return projection537 =null;

        QueryParser.keyvalue_return keyvalue539 =null;

        QueryParser.keyvalue_return keyvalue541 =null;

        QueryParser.projection_return projection543 =null;

        QueryParser.projection_return projection546 =null;


        Object LEFT_BRACKET532_tree=null;
        Object COMMA534_tree=null;
        Object RIGHT_BRACKET536_tree=null;
        Object LEFT_BRACKET538_tree=null;
        Object COMMA540_tree=null;
        Object RIGHT_BRACKET542_tree=null;
        Object LEFT_BRACKET544_tree=null;
        Object RIGHT_BRACKET545_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_projection=new RewriteRuleSubtreeStream(adaptor,"rule projection");
        RewriteRuleSubtreeStream stream_keyvalue=new RewriteRuleSubtreeStream(adaptor,"rule keyvalue");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:852:14: ( LEFT_BRACKET real_arg ( COMMA real_arg )* RIGHT_BRACKET ( projection )* -> ^( FUNC_EVAL TOMAP ( real_arg )+ ) ( projection )* | LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET ( projection )* -> ^( MAP_VAL ( keyvalue )+ ) ( projection )* | LEFT_BRACKET RIGHT_BRACKET ( projection )* -> ^( MAP_VAL ) ( projection )* )
            int alt162=3;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==LEFT_BRACKET) ) {
                switch ( input.LA(2) ) {
                case RIGHT_BRACKET:
                    {
                    alt162=3;
                    }
                    break;
                case QUOTEDSTRING:
                    {
                    int LA162_3 = input.LA(3);

                    if ( (LA162_3==POUND) ) {
                        alt162=2;
                    }
                    else if ( (LA162_3==COMMA||LA162_3==DIV||LA162_3==MINUS||LA162_3==PERCENT||LA162_3==PLUS||LA162_3==RIGHT_BRACKET||LA162_3==STAR) ) {
                        alt162=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 162, 3, input);

                        throw nvae;

                    }
                    }
                    break;
                case ALL:
                case AND:
                case AS:
                case ASC:
                case BIGDECIMAL:
                case BIGINTEGER:
                case BY:
                case BYTEARRAY:
                case CACHE:
                case CASE:
                case CHARARRAY:
                case COGROUP:
                case CROSS:
                case CUBE:
                case DATETIME:
                case DEFINE:
                case DESC:
                case DISTINCT:
                case DOLLARVAR:
                case DOUBLENUMBER:
                case DOUBLE_PERIOD:
                case ELSE:
                case END:
                case FALSE:
                case FILTER:
                case FLOATNUMBER:
                case FOREACH:
                case FULL:
                case GENERATE:
                case GROUP:
                case IDENTIFIER:
                case IF:
                case IMPORT:
                case IN:
                case INNER:
                case INPUT:
                case INTEGER:
                case INTO:
                case INVOKE:
                case IS:
                case JOIN:
                case LEFT:
                case LEFT_BRACKET:
                case LEFT_CURLY:
                case LEFT_PAREN:
                case LIMIT:
                case LOAD:
                case LONGINTEGER:
                case MAPREDUCE:
                case MINUS:
                case NULL:
                case OR:
                case ORDER:
                case OUTER:
                case OUTPUT:
                case PARALLEL:
                case PARTITION:
                case RANK:
                case RETURNS:
                case RIGHT:
                case ROLLUP:
                case SAMPLE:
                case SHIP:
                case SPLIT:
                case STAR:
                case STDERROR:
                case STDIN:
                case STDOUT:
                case STORE:
                case STREAM:
                case STR_OP_EQ:
                case STR_OP_GT:
                case STR_OP_GTE:
                case STR_OP_LT:
                case STR_OP_LTE:
                case STR_OP_MATCHES:
                case STR_OP_NE:
                case THEN:
                case THROUGH:
                case TRUE:
                case UNION:
                case USING:
                case WHEN:
                case BOOL:
                case BOOL_COND:
                case REALIAS:
                    {
                    alt162=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;

            }
            switch (alt162) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:852:16: LEFT_BRACKET real_arg ( COMMA real_arg )* RIGHT_BRACKET ( projection )*
                    {
                    LEFT_BRACKET532=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_bracket_expr5332); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET532);


                    pushFollow(FOLLOW_real_arg_in_bracket_expr5334);
                    real_arg533=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg533.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:852:38: ( COMMA real_arg )*
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);

                        if ( (LA157_0==COMMA) ) {
                            alt157=1;
                        }


                        switch (alt157) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:852:40: COMMA real_arg
                    	    {
                    	    COMMA534=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_expr5338); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA534);


                    	    pushFollow(FOLLOW_real_arg_in_bracket_expr5340);
                    	    real_arg535=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg535.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop157;
                        }
                    } while (true);


                    RIGHT_BRACKET536=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_bracket_expr5345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET536);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:852:72: ( projection )*
                    loop158:
                    do {
                        int alt158=2;
                        int LA158_0 = input.LA(1);

                        if ( (LA158_0==PERIOD||LA158_0==POUND) ) {
                            alt158=1;
                        }


                        switch (alt158) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:852:72: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_bracket_expr5347);
                    	    projection537=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection537.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: real_arg, projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 852:84: -> ^( FUNC_EVAL TOMAP ( real_arg )+ ) ( projection )*
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:852:87: ^( FUNC_EVAL TOMAP ( real_arg )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOMAP, "TOMAP")
                        );

                        if ( !(stream_real_arg.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:852:118: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:853:16: LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET ( projection )*
                    {
                    LEFT_BRACKET538=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_bracket_expr5381); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET538);


                    pushFollow(FOLLOW_keyvalue_in_bracket_expr5383);
                    keyvalue539=keyvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue539.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:853:38: ( COMMA keyvalue )*
                    loop159:
                    do {
                        int alt159=2;
                        int LA159_0 = input.LA(1);

                        if ( (LA159_0==COMMA) ) {
                            alt159=1;
                        }


                        switch (alt159) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:853:40: COMMA keyvalue
                    	    {
                    	    COMMA540=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_expr5387); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA540);


                    	    pushFollow(FOLLOW_keyvalue_in_bracket_expr5389);
                    	    keyvalue541=keyvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue541.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop159;
                        }
                    } while (true);


                    RIGHT_BRACKET542=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_bracket_expr5394); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET542);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:853:72: ( projection )*
                    loop160:
                    do {
                        int alt160=2;
                        int LA160_0 = input.LA(1);

                        if ( (LA160_0==PERIOD||LA160_0==POUND) ) {
                            alt160=1;
                        }


                        switch (alt160) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:853:72: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_bracket_expr5396);
                    	    projection543=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection543.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop160;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: keyvalue, projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 853:84: -> ^( MAP_VAL ( keyvalue )+ ) ( projection )*
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:853:87: ^( MAP_VAL ( keyvalue )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        if ( !(stream_keyvalue.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyvalue.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyvalue.nextTree());

                        }
                        stream_keyvalue.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:853:110: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:854:16: LEFT_BRACKET RIGHT_BRACKET ( projection )*
                    {
                    LEFT_BRACKET544=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_bracket_expr5428); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET544);


                    RIGHT_BRACKET545=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_bracket_expr5430); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET545);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:854:43: ( projection )*
                    loop161:
                    do {
                        int alt161=2;
                        int LA161_0 = input.LA(1);

                        if ( (LA161_0==PERIOD||LA161_0==POUND) ) {
                            alt161=1;
                        }


                        switch (alt161) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:854:43: projection
                    	    {
                    	    pushFollow(FOLLOW_projection_in_bracket_expr5432);
                    	    projection546=projection();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_projection.add(projection546.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop161;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: projection
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 854:55: -> ^( MAP_VAL ) ( projection )*
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:854:58: ^( MAP_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:854:71: ( projection )*
                        while ( stream_projection.hasNext() ) {
                            adaptor.addChild(root_0, stream_projection.nextTree());

                        }
                        stream_projection.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bracket_expr"


    public static class projection_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "projection"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:857:1: projection : ( PERIOD ( col_ref | LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) -> ^( PERIOD ( col_ref )+ ) | POUND ^ ( QUOTEDSTRING | NULL ) );
    public final QueryParser.projection_return projection() throws RecognitionException {
        QueryParser.projection_return retval = new QueryParser.projection_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD547=null;
        Token LEFT_PAREN549=null;
        Token COMMA551=null;
        Token RIGHT_PAREN553=null;
        Token POUND554=null;
        Token set555=null;
        QueryParser.col_ref_return col_ref548 =null;

        QueryParser.col_ref_return col_ref550 =null;

        QueryParser.col_ref_return col_ref552 =null;


        Object PERIOD547_tree=null;
        Object LEFT_PAREN549_tree=null;
        Object COMMA551_tree=null;
        Object RIGHT_PAREN553_tree=null;
        Object POUND554_tree=null;
        Object set555_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:857:12: ( PERIOD ( col_ref | LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) -> ^( PERIOD ( col_ref )+ ) | POUND ^ ( QUOTEDSTRING | NULL ) )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==PERIOD) ) {
                alt165=1;
            }
            else if ( (LA165_0==POUND) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;

            }
            switch (alt165) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:857:14: PERIOD ( col_ref | LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    {
                    PERIOD547=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_projection5453); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD547);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:857:21: ( col_ref | LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==CUBE||LA164_0==DOLLARVAR||(LA164_0 >= ELSE && LA164_0 <= END)||LA164_0==GROUP||LA164_0==IDENTIFIER||LA164_0==IN||LA164_0==RANK||LA164_0==THEN||LA164_0==WHEN) ) {
                        alt164=1;
                    }
                    else if ( (LA164_0==LEFT_PAREN) ) {
                        alt164=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 164, 0, input);

                        throw nvae;

                    }
                    switch (alt164) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:857:23: col_ref
                            {
                            pushFollow(FOLLOW_col_ref_in_projection5457);
                            col_ref548=col_ref();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_col_ref.add(col_ref548.getTree());

                            }
                            break;
                        case 2 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:857:33: LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN
                            {
                            LEFT_PAREN549=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_projection5461); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN549);


                            pushFollow(FOLLOW_col_ref_in_projection5463);
                            col_ref550=col_ref();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_col_ref.add(col_ref550.getTree());

                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:857:52: ( COMMA col_ref )*
                            loop163:
                            do {
                                int alt163=2;
                                int LA163_0 = input.LA(1);

                                if ( (LA163_0==COMMA) ) {
                                    alt163=1;
                                }


                                switch (alt163) {
                            	case 1 :
                            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:857:54: COMMA col_ref
                            	    {
                            	    COMMA551=(Token)match(input,COMMA,FOLLOW_COMMA_in_projection5467); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA551);


                            	    pushFollow(FOLLOW_col_ref_in_projection5469);
                            	    col_ref552=col_ref();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_col_ref.add(col_ref552.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop163;
                                }
                            } while (true);


                            RIGHT_PAREN553=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_projection5474); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN553);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: PERIOD, col_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 857:85: -> ^( PERIOD ( col_ref )+ )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:857:88: ^( PERIOD ( col_ref )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_PERIOD.nextNode()
                        , root_1);

                        if ( !(stream_col_ref.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_col_ref.hasNext() ) {
                            adaptor.addChild(root_1, stream_col_ref.nextTree());

                        }
                        stream_col_ref.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:858:14: POUND ^ ( QUOTEDSTRING | NULL )
                    {
                    root_0 = (Object)adaptor.nil();


                    POUND554=(Token)match(input,POUND,FOLLOW_POUND_in_projection5502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    POUND554_tree = 
                    (Object)adaptor.create(POUND554)
                    ;
                    root_0 = (Object)adaptor.becomeRoot(POUND554_tree, root_0);
                    }

                    set555=(Token)input.LT(1);

                    if ( input.LA(1)==NULL||input.LA(1)==QUOTEDSTRING ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set555)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "projection"


    public static class col_ref_without_identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref_without_identifier"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:864:1: col_ref_without_identifier : ( GROUP | DOLLARVAR );
    public final QueryParser.col_ref_without_identifier_return col_ref_without_identifier() throws RecognitionException {
        QueryParser.col_ref_without_identifier_return retval = new QueryParser.col_ref_without_identifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set556=null;

        Object set556_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:864:28: ( GROUP | DOLLARVAR )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set556=(Token)input.LT(1);

            if ( input.LA(1)==DOLLARVAR||input.LA(1)==GROUP ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set556)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref_without_identifier"


    public static class col_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:867:1: col_ref : ( col_ref_without_identifier | identifier_plus );
    public final QueryParser.col_ref_return col_ref() throws RecognitionException {
        QueryParser.col_ref_return retval = new QueryParser.col_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.col_ref_without_identifier_return col_ref_without_identifier557 =null;

        QueryParser.identifier_plus_return identifier_plus558 =null;



        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:867:9: ( col_ref_without_identifier | identifier_plus )
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==DOLLARVAR||LA166_0==GROUP) ) {
                alt166=1;
            }
            else if ( (LA166_0==CUBE||(LA166_0 >= ELSE && LA166_0 <= END)||LA166_0==IDENTIFIER||LA166_0==IN||LA166_0==RANK||LA166_0==THEN||LA166_0==WHEN) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;

            }
            switch (alt166) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:867:11: col_ref_without_identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_without_identifier_in_col_ref5538);
                    col_ref_without_identifier557=col_ref_without_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref_without_identifier557.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:867:40: identifier_plus
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_plus_in_col_ref5542);
                    identifier_plus558=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_plus558.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref"


    public static class col_range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_range"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:870:1: col_range : (c1= col_ref DOUBLE_PERIOD (c2= col_ref )? -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? ) | DOUBLE_PERIOD col_ref -> ^( COL_RANGE DOUBLE_PERIOD col_ref ) );
    public final QueryParser.col_range_return col_range() throws RecognitionException {
        QueryParser.col_range_return retval = new QueryParser.col_range_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOUBLE_PERIOD559=null;
        Token DOUBLE_PERIOD560=null;
        QueryParser.col_ref_return c1 =null;

        QueryParser.col_ref_return c2 =null;

        QueryParser.col_ref_return col_ref561 =null;


        Object DOUBLE_PERIOD559_tree=null;
        Object DOUBLE_PERIOD560_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:870:11: (c1= col_ref DOUBLE_PERIOD (c2= col_ref )? -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? ) | DOUBLE_PERIOD col_ref -> ^( COL_RANGE DOUBLE_PERIOD col_ref ) )
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==CUBE||LA168_0==DOLLARVAR||(LA168_0 >= ELSE && LA168_0 <= END)||LA168_0==GROUP||LA168_0==IDENTIFIER||LA168_0==IN||LA168_0==RANK||LA168_0==THEN||LA168_0==WHEN) ) {
                alt168=1;
            }
            else if ( (LA168_0==DOUBLE_PERIOD) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;

            }
            switch (alt168) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:870:13: c1= col_ref DOUBLE_PERIOD (c2= col_ref )?
                    {
                    pushFollow(FOLLOW_col_ref_in_col_range5555);
                    c1=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(c1.getTree());

                    DOUBLE_PERIOD559=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range5557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD559);


                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:870:43: (c2= col_ref )?
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==CUBE||LA167_0==DOLLARVAR||(LA167_0 >= ELSE && LA167_0 <= END)||LA167_0==GROUP||LA167_0==IDENTIFIER||LA167_0==IN||LA167_0==RANK||LA167_0==THEN||LA167_0==WHEN) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:870:43: c2= col_ref
                            {
                            pushFollow(FOLLOW_col_ref_in_col_range5563);
                            c2=col_ref();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_col_ref.add(c2.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: c1, c2, DOUBLE_PERIOD
                    // token labels: 
                    // rule labels: retval, c1, c2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_c1=new RewriteRuleSubtreeStream(adaptor,"rule c1",c1!=null?c1.tree:null);
                    RewriteRuleSubtreeStream stream_c2=new RewriteRuleSubtreeStream(adaptor,"rule c2",c2!=null?c2.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 870:54: -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:870:57: ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(COL_RANGE, "COL_RANGE")
                        , root_1);

                        adaptor.addChild(root_1, stream_c1.nextTree());

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_PERIOD.nextNode()
                        );

                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:870:88: ( $c2)?
                        if ( stream_c2.hasNext() ) {
                            adaptor.addChild(root_1, stream_c2.nextTree());

                        }
                        stream_c2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:871:14: DOUBLE_PERIOD col_ref
                    {
                    DOUBLE_PERIOD560=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range5594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD560);


                    pushFollow(FOLLOW_col_ref_in_col_range5596);
                    col_ref561=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref561.getTree());

                    // AST REWRITE
                    // elements: col_ref, DOUBLE_PERIOD
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 871:36: -> ^( COL_RANGE DOUBLE_PERIOD col_ref )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:871:39: ^( COL_RANGE DOUBLE_PERIOD col_ref )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(COL_RANGE, "COL_RANGE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_PERIOD.nextNode()
                        );

                        adaptor.addChild(root_1, stream_col_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_range"


    public static class scalar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scalar"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:874:1: scalar : ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER | QUOTEDSTRING | NULL | TRUE | FALSE );
    public final QueryParser.scalar_return scalar() throws RecognitionException {
        QueryParser.scalar_return retval = new QueryParser.scalar_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set562=null;

        Object set562_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:874:8: ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER | QUOTEDSTRING | NULL | TRUE | FALSE )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set562=(Token)input.LT(1);

            if ( input.LA(1)==DOUBLENUMBER||input.LA(1)==FALSE||input.LA(1)==FLOATNUMBER||input.LA(1)==INTEGER||input.LA(1)==LONGINTEGER||input.LA(1)==NULL||input.LA(1)==QUOTEDSTRING||input.LA(1)==TRUE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set562)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scalar"


    public static class keyvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyvalue"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:884:1: keyvalue : QUOTEDSTRING POUND literal -> ^( KEY_VAL_PAIR QUOTEDSTRING literal ) ;
    public final QueryParser.keyvalue_return keyvalue() throws RecognitionException {
        QueryParser.keyvalue_return retval = new QueryParser.keyvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING563=null;
        Token POUND564=null;
        QueryParser.literal_return literal565 =null;


        Object QUOTEDSTRING563_tree=null;
        Object POUND564_tree=null;
        RewriteRuleTokenStream stream_QUOTEDSTRING=new RewriteRuleTokenStream(adaptor,"token QUOTEDSTRING");
        RewriteRuleTokenStream stream_POUND=new RewriteRuleTokenStream(adaptor,"token POUND");
        RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:884:10: ( QUOTEDSTRING POUND literal -> ^( KEY_VAL_PAIR QUOTEDSTRING literal ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:884:12: QUOTEDSTRING POUND literal
            {
            QUOTEDSTRING563=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_keyvalue5701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING563);


            POUND564=(Token)match(input,POUND,FOLLOW_POUND_in_keyvalue5703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_POUND.add(POUND564);


            pushFollow(FOLLOW_literal_in_keyvalue5705);
            literal565=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_literal.add(literal565.getTree());

            // AST REWRITE
            // elements: QUOTEDSTRING, literal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 884:39: -> ^( KEY_VAL_PAIR QUOTEDSTRING literal )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:884:42: ^( KEY_VAL_PAIR QUOTEDSTRING literal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(KEY_VAL_PAIR, "KEY_VAL_PAIR")
                , root_1);

                adaptor.addChild(root_1, 
                stream_QUOTEDSTRING.nextNode()
                );

                adaptor.addChild(root_1, stream_literal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyvalue"


    public static class literal_map_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal_map"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:887:1: literal_map : ( LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET -> ^( MAP_VAL ( keyvalue )+ ) | LEFT_BRACKET RIGHT_BRACKET -> ^( MAP_VAL ) );
    public final QueryParser.literal_map_return literal_map() throws RecognitionException {
        QueryParser.literal_map_return retval = new QueryParser.literal_map_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_BRACKET566=null;
        Token COMMA568=null;
        Token RIGHT_BRACKET570=null;
        Token LEFT_BRACKET571=null;
        Token RIGHT_BRACKET572=null;
        QueryParser.keyvalue_return keyvalue567 =null;

        QueryParser.keyvalue_return keyvalue569 =null;


        Object LEFT_BRACKET566_tree=null;
        Object COMMA568_tree=null;
        Object RIGHT_BRACKET570_tree=null;
        Object LEFT_BRACKET571_tree=null;
        Object RIGHT_BRACKET572_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_keyvalue=new RewriteRuleSubtreeStream(adaptor,"rule keyvalue");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:887:13: ( LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET -> ^( MAP_VAL ( keyvalue )+ ) | LEFT_BRACKET RIGHT_BRACKET -> ^( MAP_VAL ) )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==LEFT_BRACKET) ) {
                int LA170_1 = input.LA(2);

                if ( (LA170_1==RIGHT_BRACKET) ) {
                    alt170=2;
                }
                else if ( (LA170_1==QUOTEDSTRING) ) {
                    alt170=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 170, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;

            }
            switch (alt170) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:887:15: LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET
                    {
                    LEFT_BRACKET566=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_literal_map5726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET566);


                    pushFollow(FOLLOW_keyvalue_in_literal_map5728);
                    keyvalue567=keyvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue567.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:887:37: ( COMMA keyvalue )*
                    loop169:
                    do {
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==COMMA) ) {
                            alt169=1;
                        }


                        switch (alt169) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:887:39: COMMA keyvalue
                    	    {
                    	    COMMA568=(Token)match(input,COMMA,FOLLOW_COMMA_in_literal_map5732); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA568);


                    	    pushFollow(FOLLOW_keyvalue_in_literal_map5734);
                    	    keyvalue569=keyvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue569.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop169;
                        }
                    } while (true);


                    RIGHT_BRACKET570=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_literal_map5739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET570);


                    // AST REWRITE
                    // elements: keyvalue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 887:71: -> ^( MAP_VAL ( keyvalue )+ )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:887:74: ^( MAP_VAL ( keyvalue )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        if ( !(stream_keyvalue.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyvalue.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyvalue.nextTree());

                        }
                        stream_keyvalue.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:888:15: LEFT_BRACKET RIGHT_BRACKET
                    {
                    LEFT_BRACKET571=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_literal_map5766); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET571);


                    RIGHT_BRACKET572=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_literal_map5768); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET572);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 888:42: -> ^( MAP_VAL )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:888:45: ^( MAP_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal_map"


    public static class literal_bag_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal_bag"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:892:1: literal_bag : ( LEFT_CURLY literal_tuple ( COMMA literal_tuple )* RIGHT_CURLY -> ^( BAG_VAL ( literal_tuple )+ ) | LEFT_CURLY RIGHT_CURLY -> ^( BAG_VAL ) );
    public final QueryParser.literal_bag_return literal_bag() throws RecognitionException {
        QueryParser.literal_bag_return retval = new QueryParser.literal_bag_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY573=null;
        Token COMMA575=null;
        Token RIGHT_CURLY577=null;
        Token LEFT_CURLY578=null;
        Token RIGHT_CURLY579=null;
        QueryParser.literal_tuple_return literal_tuple574 =null;

        QueryParser.literal_tuple_return literal_tuple576 =null;


        Object LEFT_CURLY573_tree=null;
        Object COMMA575_tree=null;
        Object RIGHT_CURLY577_tree=null;
        Object LEFT_CURLY578_tree=null;
        Object RIGHT_CURLY579_tree=null;
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_literal_tuple=new RewriteRuleSubtreeStream(adaptor,"rule literal_tuple");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:892:13: ( LEFT_CURLY literal_tuple ( COMMA literal_tuple )* RIGHT_CURLY -> ^( BAG_VAL ( literal_tuple )+ ) | LEFT_CURLY RIGHT_CURLY -> ^( BAG_VAL ) )
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==LEFT_CURLY) ) {
                int LA172_1 = input.LA(2);

                if ( (LA172_1==RIGHT_CURLY) ) {
                    alt172=2;
                }
                else if ( (LA172_1==LEFT_PAREN) ) {
                    alt172=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 172, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;

            }
            switch (alt172) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:892:15: LEFT_CURLY literal_tuple ( COMMA literal_tuple )* RIGHT_CURLY
                    {
                    LEFT_CURLY573=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_literal_bag5786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY573);


                    pushFollow(FOLLOW_literal_tuple_in_literal_bag5788);
                    literal_tuple574=literal_tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_literal_tuple.add(literal_tuple574.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:892:40: ( COMMA literal_tuple )*
                    loop171:
                    do {
                        int alt171=2;
                        int LA171_0 = input.LA(1);

                        if ( (LA171_0==COMMA) ) {
                            alt171=1;
                        }


                        switch (alt171) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:892:42: COMMA literal_tuple
                    	    {
                    	    COMMA575=(Token)match(input,COMMA,FOLLOW_COMMA_in_literal_bag5792); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA575);


                    	    pushFollow(FOLLOW_literal_tuple_in_literal_bag5794);
                    	    literal_tuple576=literal_tuple();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_literal_tuple.add(literal_tuple576.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop171;
                        }
                    } while (true);


                    RIGHT_CURLY577=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_literal_bag5799); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY577);


                    // AST REWRITE
                    // elements: literal_tuple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 892:77: -> ^( BAG_VAL ( literal_tuple )+ )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:892:80: ^( BAG_VAL ( literal_tuple )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        if ( !(stream_literal_tuple.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_literal_tuple.hasNext() ) {
                            adaptor.addChild(root_1, stream_literal_tuple.nextTree());

                        }
                        stream_literal_tuple.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:893:15: LEFT_CURLY RIGHT_CURLY
                    {
                    LEFT_CURLY578=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_literal_bag5826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY578);


                    RIGHT_CURLY579=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_literal_bag5828); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY579);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 893:38: -> ^( BAG_VAL )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:893:41: ^( BAG_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal_bag"


    public static class literal_tuple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal_tuple"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:896:1: literal_tuple : ( LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN -> ^( TUPLE_VAL ( literal )+ ) | LEFT_PAREN RIGHT_PAREN -> ^( TUPLE_VAL ) );
    public final QueryParser.literal_tuple_return literal_tuple() throws RecognitionException {
        QueryParser.literal_tuple_return retval = new QueryParser.literal_tuple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN580=null;
        Token COMMA582=null;
        Token RIGHT_PAREN584=null;
        Token LEFT_PAREN585=null;
        Token RIGHT_PAREN586=null;
        QueryParser.literal_return literal581 =null;

        QueryParser.literal_return literal583 =null;


        Object LEFT_PAREN580_tree=null;
        Object COMMA582_tree=null;
        Object RIGHT_PAREN584_tree=null;
        Object LEFT_PAREN585_tree=null;
        Object RIGHT_PAREN586_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:896:15: ( LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN -> ^( TUPLE_VAL ( literal )+ ) | LEFT_PAREN RIGHT_PAREN -> ^( TUPLE_VAL ) )
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==LEFT_PAREN) ) {
                int LA174_1 = input.LA(2);

                if ( (LA174_1==RIGHT_PAREN) ) {
                    alt174=2;
                }
                else if ( (LA174_1==DOUBLENUMBER||LA174_1==FALSE||LA174_1==FLOATNUMBER||LA174_1==INTEGER||(LA174_1 >= LEFT_BRACKET && LA174_1 <= LEFT_PAREN)||LA174_1==LONGINTEGER||LA174_1==NULL||LA174_1==QUOTEDSTRING||LA174_1==TRUE) ) {
                    alt174=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 174, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;

            }
            switch (alt174) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:896:17: LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN
                    {
                    LEFT_PAREN580=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_literal_tuple5845); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN580);


                    pushFollow(FOLLOW_literal_in_literal_tuple5847);
                    literal581=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_literal.add(literal581.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:896:36: ( COMMA literal )*
                    loop173:
                    do {
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==COMMA) ) {
                            alt173=1;
                        }


                        switch (alt173) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:896:38: COMMA literal
                    	    {
                    	    COMMA582=(Token)match(input,COMMA,FOLLOW_COMMA_in_literal_tuple5851); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA582);


                    	    pushFollow(FOLLOW_literal_in_literal_tuple5853);
                    	    literal583=literal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_literal.add(literal583.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop173;
                        }
                    } while (true);


                    RIGHT_PAREN584=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_literal_tuple5858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN584);


                    // AST REWRITE
                    // elements: literal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 896:67: -> ^( TUPLE_VAL ( literal )+ )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:896:70: ^( TUPLE_VAL ( literal )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        if ( !(stream_literal.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_literal.hasNext() ) {
                            adaptor.addChild(root_1, stream_literal.nextTree());

                        }
                        stream_literal.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:897:17: LEFT_PAREN RIGHT_PAREN
                    {
                    LEFT_PAREN585=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_literal_tuple5887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN585);


                    RIGHT_PAREN586=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_literal_tuple5889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN586);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 897:40: -> ^( TUPLE_VAL )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:897:43: ^( TUPLE_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal_tuple"


    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:900:1: literal : ( scalar | literal_map | literal_bag | literal_tuple );
    public final QueryParser.literal_return literal() throws RecognitionException {
        QueryParser.literal_return retval = new QueryParser.literal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.scalar_return scalar587 =null;

        QueryParser.literal_map_return literal_map588 =null;

        QueryParser.literal_bag_return literal_bag589 =null;

        QueryParser.literal_tuple_return literal_tuple590 =null;



        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:900:9: ( scalar | literal_map | literal_bag | literal_tuple )
            int alt175=4;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case NULL:
            case QUOTEDSTRING:
            case TRUE:
                {
                alt175=1;
                }
                break;
            case LEFT_BRACKET:
                {
                alt175=2;
                }
                break;
            case LEFT_CURLY:
                {
                alt175=3;
                }
                break;
            case LEFT_PAREN:
                {
                alt175=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;

            }

            switch (alt175) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:900:11: scalar
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_scalar_in_literal5906);
                    scalar587=scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scalar587.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:900:20: literal_map
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_literal_map_in_literal5910);
                    literal_map588=literal_map();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_map588.getTree());

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:900:34: literal_bag
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_literal_bag_in_literal5914);
                    literal_bag589=literal_bag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_bag589.getTree());

                    }
                    break;
                case 4 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:900:48: literal_tuple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_literal_tuple_in_literal5918);
                    literal_tuple590=literal_tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_tuple590.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class nested_blk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_blk"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:905:1: nested_blk : ( nested_command SEMI_COLON )* GENERATE flatten_generated_item ( COMMA flatten_generated_item )* SEMI_COLON -> ( nested_command )* ^( GENERATE ( flatten_generated_item )+ ) ;
    public final QueryParser.nested_blk_return nested_blk() throws RecognitionException {
        QueryParser.nested_blk_return retval = new QueryParser.nested_blk_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON592=null;
        Token GENERATE593=null;
        Token COMMA595=null;
        Token SEMI_COLON597=null;
        QueryParser.nested_command_return nested_command591 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item594 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item596 =null;


        Object SEMI_COLON592_tree=null;
        Object GENERATE593_tree=null;
        Object COMMA595_tree=null;
        Object SEMI_COLON597_tree=null;
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_GENERATE=new RewriteRuleTokenStream(adaptor,"token GENERATE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_flatten_generated_item=new RewriteRuleSubtreeStream(adaptor,"rule flatten_generated_item");
        RewriteRuleSubtreeStream stream_nested_command=new RewriteRuleSubtreeStream(adaptor,"rule nested_command");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:905:12: ( ( nested_command SEMI_COLON )* GENERATE flatten_generated_item ( COMMA flatten_generated_item )* SEMI_COLON -> ( nested_command )* ^( GENERATE ( flatten_generated_item )+ ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:905:14: ( nested_command SEMI_COLON )* GENERATE flatten_generated_item ( COMMA flatten_generated_item )* SEMI_COLON
            {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:905:14: ( nested_command SEMI_COLON )*
            loop176:
            do {
                int alt176=2;
                int LA176_0 = input.LA(1);

                if ( (LA176_0==CUBE||(LA176_0 >= ELSE && LA176_0 <= END)||LA176_0==IDENTIFIER||LA176_0==IN||LA176_0==RANK||LA176_0==THEN||LA176_0==WHEN) ) {
                    alt176=1;
                }


                switch (alt176) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:905:16: nested_command SEMI_COLON
            	    {
            	    pushFollow(FOLLOW_nested_command_in_nested_blk5931);
            	    nested_command591=nested_command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nested_command.add(nested_command591.getTree());

            	    SEMI_COLON592=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_nested_blk5933); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON592);


            	    }
            	    break;

            	default :
            	    break loop176;
                }
            } while (true);


            GENERATE593=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_nested_blk5938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GENERATE.add(GENERATE593);


            pushFollow(FOLLOW_flatten_generated_item_in_nested_blk5940);
            flatten_generated_item594=flatten_generated_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item594.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:905:77: ( COMMA flatten_generated_item )*
            loop177:
            do {
                int alt177=2;
                int LA177_0 = input.LA(1);

                if ( (LA177_0==COMMA) ) {
                    alt177=1;
                }


                switch (alt177) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:905:79: COMMA flatten_generated_item
            	    {
            	    COMMA595=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_blk5944); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA595);


            	    pushFollow(FOLLOW_flatten_generated_item_in_nested_blk5946);
            	    flatten_generated_item596=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item596.getTree());

            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);


            SEMI_COLON597=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_nested_blk5951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON597);


            // AST REWRITE
            // elements: GENERATE, nested_command, flatten_generated_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 906:5: -> ( nested_command )* ^( GENERATE ( flatten_generated_item )+ )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:906:8: ( nested_command )*
                while ( stream_nested_command.hasNext() ) {
                    adaptor.addChild(root_0, stream_nested_command.nextTree());

                }
                stream_nested_command.reset();

                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:906:24: ^( GENERATE ( flatten_generated_item )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_GENERATE.nextNode()
                , root_1);

                if ( !(stream_flatten_generated_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_flatten_generated_item.hasNext() ) {
                    adaptor.addChild(root_1, stream_flatten_generated_item.nextTree());

                }
                stream_flatten_generated_item.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_blk"


    public static class nested_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_command"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:909:1: nested_command : ( ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier_plus EQUAL nested_proj ) -> ^( NESTED_CMD identifier_plus nested_proj ) | identifier_plus EQUAL expr -> ^( NESTED_CMD_ASSI identifier_plus expr ) | identifier_plus EQUAL nested_op -> ^( NESTED_CMD identifier_plus nested_op ) );
    public final QueryParser.nested_command_return nested_command() throws RecognitionException {
        QueryParser.nested_command_return retval = new QueryParser.nested_command_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL599=null;
        Token EQUAL602=null;
        Token EQUAL605=null;
        QueryParser.identifier_plus_return identifier_plus598 =null;

        QueryParser.nested_proj_return nested_proj600 =null;

        QueryParser.identifier_plus_return identifier_plus601 =null;

        QueryParser.expr_return expr603 =null;

        QueryParser.identifier_plus_return identifier_plus604 =null;

        QueryParser.nested_op_return nested_op606 =null;


        Object EQUAL599_tree=null;
        Object EQUAL602_tree=null;
        Object EQUAL605_tree=null;
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_identifier_plus=new RewriteRuleSubtreeStream(adaptor,"rule identifier_plus");
        RewriteRuleSubtreeStream stream_nested_proj=new RewriteRuleSubtreeStream(adaptor,"rule nested_proj");
        RewriteRuleSubtreeStream stream_nested_op=new RewriteRuleSubtreeStream(adaptor,"rule nested_op");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:909:16: ( ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier_plus EQUAL nested_proj ) -> ^( NESTED_CMD identifier_plus nested_proj ) | identifier_plus EQUAL expr -> ^( NESTED_CMD_ASSI identifier_plus expr ) | identifier_plus EQUAL nested_op -> ^( NESTED_CMD identifier_plus nested_op ) )
            int alt178=3;
            alt178 = dfa178.predict(input);
            switch (alt178) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:909:18: ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier_plus EQUAL nested_proj )
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:909:108: ( identifier_plus EQUAL nested_proj )
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:909:110: identifier_plus EQUAL nested_proj
                    {
                    pushFollow(FOLLOW_identifier_plus_in_nested_command5998);
                    identifier_plus598=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus598.getTree());

                    EQUAL599=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command6000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL599);


                    pushFollow(FOLLOW_nested_proj_in_nested_command6002);
                    nested_proj600=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nested_proj.add(nested_proj600.getTree());

                    }


                    // AST REWRITE
                    // elements: nested_proj, identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 910:15: -> ^( NESTED_CMD identifier_plus nested_proj )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:910:18: ^( NESTED_CMD identifier_plus nested_proj )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD, "NESTED_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        adaptor.addChild(root_1, stream_nested_proj.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:911:18: identifier_plus EQUAL expr
                    {
                    pushFollow(FOLLOW_identifier_plus_in_nested_command6049);
                    identifier_plus601=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus601.getTree());

                    EQUAL602=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command6051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL602);


                    pushFollow(FOLLOW_expr_in_nested_command6053);
                    expr603=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr603.getTree());

                    // AST REWRITE
                    // elements: expr, identifier_plus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 912:15: -> ^( NESTED_CMD_ASSI identifier_plus expr )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:912:18: ^( NESTED_CMD_ASSI identifier_plus expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD_ASSI, "NESTED_CMD_ASSI")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:913:18: identifier_plus EQUAL nested_op
                    {
                    pushFollow(FOLLOW_identifier_plus_in_nested_command6098);
                    identifier_plus604=identifier_plus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier_plus.add(identifier_plus604.getTree());

                    EQUAL605=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command6100); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL605);


                    pushFollow(FOLLOW_nested_op_in_nested_command6102);
                    nested_op606=nested_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nested_op.add(nested_op606.getTree());

                    // AST REWRITE
                    // elements: identifier_plus, nested_op
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 914:15: -> ^( NESTED_CMD identifier_plus nested_op )
                    {
                        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:914:18: ^( NESTED_CMD identifier_plus nested_op )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD, "NESTED_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier_plus.nextTree());

                        adaptor.addChild(root_1, stream_nested_op.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_command"


    public static class nested_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:917:1: nested_op : ( nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach );
    public final QueryParser.nested_op_return nested_op() throws RecognitionException {
        QueryParser.nested_op_return retval = new QueryParser.nested_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.nested_filter_return nested_filter607 =null;

        QueryParser.nested_sort_return nested_sort608 =null;

        QueryParser.nested_distinct_return nested_distinct609 =null;

        QueryParser.nested_limit_return nested_limit610 =null;

        QueryParser.nested_cross_return nested_cross611 =null;

        QueryParser.nested_foreach_return nested_foreach612 =null;



        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:917:11: ( nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach )
            int alt179=6;
            switch ( input.LA(1) ) {
            case FILTER:
                {
                alt179=1;
                }
                break;
            case ORDER:
                {
                alt179=2;
                }
                break;
            case DISTINCT:
                {
                alt179=3;
                }
                break;
            case LIMIT:
                {
                alt179=4;
                }
                break;
            case CROSS:
                {
                alt179=5;
                }
                break;
            case FOREACH:
                {
                alt179=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;

            }

            switch (alt179) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:917:13: nested_filter
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_filter_in_nested_op6137);
                    nested_filter607=nested_filter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_filter607.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:918:13: nested_sort
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_sort_in_nested_op6151);
                    nested_sort608=nested_sort();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_sort608.getTree());

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:919:13: nested_distinct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_distinct_in_nested_op6165);
                    nested_distinct609=nested_distinct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_distinct609.getTree());

                    }
                    break;
                case 4 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:920:13: nested_limit
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_limit_in_nested_op6179);
                    nested_limit610=nested_limit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_limit610.getTree());

                    }
                    break;
                case 5 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:921:13: nested_cross
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_cross_in_nested_op6193);
                    nested_cross611=nested_cross();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_cross611.getTree());

                    }
                    break;
                case 6 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:922:13: nested_foreach
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_foreach_in_nested_op6207);
                    nested_foreach612=nested_foreach();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_foreach612.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op"


    public static class nested_proj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_proj"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:925:1: nested_proj : col_ref PERIOD col_ref_list -> ^( NESTED_PROJ col_ref col_ref_list ) ;
    public final QueryParser.nested_proj_return nested_proj() throws RecognitionException {
        QueryParser.nested_proj_return retval = new QueryParser.nested_proj_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD614=null;
        QueryParser.col_ref_return col_ref613 =null;

        QueryParser.col_ref_list_return col_ref_list615 =null;


        Object PERIOD614_tree=null;
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_col_ref_list=new RewriteRuleSubtreeStream(adaptor,"rule col_ref_list");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:925:13: ( col_ref PERIOD col_ref_list -> ^( NESTED_PROJ col_ref col_ref_list ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:925:15: col_ref PERIOD col_ref_list
            {
            pushFollow(FOLLOW_col_ref_in_nested_proj6216);
            col_ref613=col_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_col_ref.add(col_ref613.getTree());

            PERIOD614=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_nested_proj6218); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD614);


            pushFollow(FOLLOW_col_ref_list_in_nested_proj6220);
            col_ref_list615=col_ref_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_col_ref_list.add(col_ref_list615.getTree());

            // AST REWRITE
            // elements: col_ref, col_ref_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 926:12: -> ^( NESTED_PROJ col_ref col_ref_list )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:926:15: ^( NESTED_PROJ col_ref col_ref_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NESTED_PROJ, "NESTED_PROJ")
                , root_1);

                adaptor.addChild(root_1, stream_col_ref.nextTree());

                adaptor.addChild(root_1, stream_col_ref_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_proj"


    public static class col_ref_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref_list"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:929:1: col_ref_list : ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) ) -> ( col_ref )+ ;
    public final QueryParser.col_ref_list_return col_ref_list() throws RecognitionException {
        QueryParser.col_ref_list_return retval = new QueryParser.col_ref_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN617=null;
        Token COMMA619=null;
        Token RIGHT_PAREN621=null;
        QueryParser.col_ref_return col_ref616 =null;

        QueryParser.col_ref_return col_ref618 =null;

        QueryParser.col_ref_return col_ref620 =null;


        Object LEFT_PAREN617_tree=null;
        Object COMMA619_tree=null;
        Object RIGHT_PAREN621_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:929:14: ( ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) ) -> ( col_ref )+ )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:929:16: ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) )
            {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:929:16: ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) )
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==CUBE||LA181_0==DOLLARVAR||(LA181_0 >= ELSE && LA181_0 <= END)||LA181_0==GROUP||LA181_0==IDENTIFIER||LA181_0==IN||LA181_0==RANK||LA181_0==THEN||LA181_0==WHEN) ) {
                alt181=1;
            }
            else if ( (LA181_0==LEFT_PAREN) ) {
                alt181=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;

            }
            switch (alt181) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:929:18: col_ref
                    {
                    pushFollow(FOLLOW_col_ref_in_col_ref_list6254);
                    col_ref616=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref616.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:929:28: ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    {
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:929:28: ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:929:30: LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN
                    {
                    LEFT_PAREN617=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_col_ref_list6260); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN617);


                    pushFollow(FOLLOW_col_ref_in_col_ref_list6262);
                    col_ref618=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref618.getTree());

                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:929:49: ( COMMA col_ref )*
                    loop180:
                    do {
                        int alt180=2;
                        int LA180_0 = input.LA(1);

                        if ( (LA180_0==COMMA) ) {
                            alt180=1;
                        }


                        switch (alt180) {
                    	case 1 :
                    	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:929:51: COMMA col_ref
                    	    {
                    	    COMMA619=(Token)match(input,COMMA,FOLLOW_COMMA_in_col_ref_list6266); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA619);


                    	    pushFollow(FOLLOW_col_ref_in_col_ref_list6268);
                    	    col_ref620=col_ref();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_col_ref.add(col_ref620.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop180;
                        }
                    } while (true);


                    RIGHT_PAREN621=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_col_ref_list6273); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN621);


                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: col_ref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 930:13: -> ( col_ref )+
            {
                if ( !(stream_col_ref.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_col_ref.hasNext() ) {
                    adaptor.addChild(root_0, stream_col_ref.nextTree());

                }
                stream_col_ref.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref_list"


    public static class nested_filter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_filter"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:933:1: nested_filter : FILTER ^ nested_op_input BY ! cond ;
    public final QueryParser.nested_filter_return nested_filter() throws RecognitionException {
        QueryParser.nested_filter_return retval = new QueryParser.nested_filter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FILTER622=null;
        Token BY624=null;
        QueryParser.nested_op_input_return nested_op_input623 =null;

        QueryParser.cond_return cond625 =null;


        Object FILTER622_tree=null;
        Object BY624_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:933:15: ( FILTER ^ nested_op_input BY ! cond )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:933:17: FILTER ^ nested_op_input BY ! cond
            {
            root_0 = (Object)adaptor.nil();


            FILTER622=(Token)match(input,FILTER,FOLLOW_FILTER_in_nested_filter6303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER622_tree = 
            (Object)adaptor.create(FILTER622)
            ;
            root_0 = (Object)adaptor.becomeRoot(FILTER622_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_filter6306);
            nested_op_input623=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input623.getTree());

            BY624=(Token)match(input,BY,FOLLOW_BY_in_nested_filter6308); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_nested_filter6311);
            cond625=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond625.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_filter"


    public static class nested_sort_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_sort"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:936:1: nested_sort : ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )? ;
    public final QueryParser.nested_sort_return nested_sort() throws RecognitionException {
        QueryParser.nested_sort_return retval = new QueryParser.nested_sort_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ORDER626=null;
        Token BY628=null;
        Token USING630=null;
        QueryParser.nested_op_input_return nested_op_input627 =null;

        QueryParser.order_by_clause_return order_by_clause629 =null;

        QueryParser.func_clause_return func_clause631 =null;


        Object ORDER626_tree=null;
        Object BY628_tree=null;
        Object USING630_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:936:13: ( ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )? )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:936:15: ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            ORDER626=(Token)match(input,ORDER,FOLLOW_ORDER_in_nested_sort6320); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER626_tree = 
            (Object)adaptor.create(ORDER626)
            ;
            root_0 = (Object)adaptor.becomeRoot(ORDER626_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_sort6323);
            nested_op_input627=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input627.getTree());

            BY628=(Token)match(input,BY,FOLLOW_BY_in_nested_sort6325); if (state.failed) return retval;

            pushFollow(FOLLOW_order_by_clause_in_nested_sort6329);
            order_by_clause629=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause629.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:936:59: ( USING ! func_clause )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==USING) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:936:61: USING ! func_clause
                    {
                    USING630=(Token)match(input,USING,FOLLOW_USING_in_nested_sort6333); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_nested_sort6336);
                    func_clause631=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause631.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_sort"


    public static class nested_distinct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_distinct"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:939:1: nested_distinct : DISTINCT ^ nested_op_input ;
    public final QueryParser.nested_distinct_return nested_distinct() throws RecognitionException {
        QueryParser.nested_distinct_return retval = new QueryParser.nested_distinct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DISTINCT632=null;
        QueryParser.nested_op_input_return nested_op_input633 =null;


        Object DISTINCT632_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:939:17: ( DISTINCT ^ nested_op_input )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:939:19: DISTINCT ^ nested_op_input
            {
            root_0 = (Object)adaptor.nil();


            DISTINCT632=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_nested_distinct6348); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT632_tree = 
            (Object)adaptor.create(DISTINCT632)
            ;
            root_0 = (Object)adaptor.becomeRoot(DISTINCT632_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_distinct6351);
            nested_op_input633=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input633.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_distinct"


    public static class nested_limit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_limit"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:942:1: nested_limit : LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr ) ;
    public final QueryParser.nested_limit_return nested_limit() throws RecognitionException {
        QueryParser.nested_limit_return retval = new QueryParser.nested_limit_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LIMIT634=null;
        Token INTEGER636=null;
        QueryParser.nested_op_input_return nested_op_input635 =null;

        QueryParser.expr_return expr637 =null;


        Object LIMIT634_tree=null;
        Object INTEGER636_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:942:14: ( LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:942:16: LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr )
            {
            root_0 = (Object)adaptor.nil();


            LIMIT634=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_nested_limit6360); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT634_tree = 
            (Object)adaptor.create(LIMIT634)
            ;
            root_0 = (Object)adaptor.becomeRoot(LIMIT634_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_limit6363);
            nested_op_input635=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input635.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:942:39: ( ( INTEGER SEMI_COLON )=> INTEGER | expr )
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==INTEGER) ) {
                int LA183_1 = input.LA(2);

                if ( (synpred4_QueryParser()) ) {
                    alt183=1;
                }
                else if ( (true) ) {
                    alt183=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 183, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA183_0==ALL||LA183_0==AND||(LA183_0 >= AS && LA183_0 <= ASC)||LA183_0==BIGDECIMAL||LA183_0==BIGINTEGER||(LA183_0 >= BY && LA183_0 <= COGROUP)||(LA183_0 >= CROSS && LA183_0 <= DATETIME)||LA183_0==DEFINE||LA183_0==DESC||LA183_0==DISTINCT||LA183_0==DOLLARVAR||LA183_0==DOUBLENUMBER||(LA183_0 >= ELSE && LA183_0 <= END)||LA183_0==FALSE||LA183_0==FILTER||(LA183_0 >= FLOATNUMBER && LA183_0 <= GROUP)||(LA183_0 >= IDENTIFIER && LA183_0 <= INPUT)||(LA183_0 >= INTO && LA183_0 <= LEFT_PAREN)||(LA183_0 >= LIMIT && LA183_0 <= LOAD)||LA183_0==LONGINTEGER||(LA183_0 >= MAPREDUCE && LA183_0 <= MINUS)||LA183_0==NULL||(LA183_0 >= OR && LA183_0 <= ORDER)||(LA183_0 >= OUTER && LA183_0 <= PARTITION)||(LA183_0 >= QUOTEDSTRING && LA183_0 <= RIGHT)||(LA183_0 >= ROLLUP && LA183_0 <= SAMPLE)||LA183_0==SHIP||LA183_0==SPLIT||(LA183_0 >= STDERROR && LA183_0 <= TRUE)||(LA183_0 >= UNION && LA183_0 <= USING)||LA183_0==WHEN||(LA183_0 >= BOOL && LA183_0 <= BOOL_COND)||LA183_0==REALIAS) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;

            }
            switch (alt183) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:942:41: ( INTEGER SEMI_COLON )=> INTEGER
                    {
                    INTEGER636=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_nested_limit6375); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER636_tree = 
                    (Object)adaptor.create(INTEGER636)
                    ;
                    adaptor.addChild(root_0, INTEGER636_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:942:75: expr
                    {
                    pushFollow(FOLLOW_expr_in_nested_limit6379);
                    expr637=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr637.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_limit"


    public static class nested_cross_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_cross"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:945:1: nested_cross : CROSS ^ nested_op_input_list ;
    public final QueryParser.nested_cross_return nested_cross() throws RecognitionException {
        QueryParser.nested_cross_return retval = new QueryParser.nested_cross_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CROSS638=null;
        QueryParser.nested_op_input_list_return nested_op_input_list639 =null;


        Object CROSS638_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:945:14: ( CROSS ^ nested_op_input_list )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:945:16: CROSS ^ nested_op_input_list
            {
            root_0 = (Object)adaptor.nil();


            CROSS638=(Token)match(input,CROSS,FOLLOW_CROSS_in_nested_cross6390); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS638_tree = 
            (Object)adaptor.create(CROSS638)
            ;
            root_0 = (Object)adaptor.becomeRoot(CROSS638_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_list_in_nested_cross6393);
            nested_op_input_list639=nested_op_input_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input_list639.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_cross"


    public static class nested_foreach_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_foreach"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:948:1: nested_foreach : FOREACH nested_op_input GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( FOREACH nested_op_input ^( GENERATE ( flatten_generated_item )+ ) ) ;
    public final QueryParser.nested_foreach_return nested_foreach() throws RecognitionException {
        QueryParser.nested_foreach_return retval = new QueryParser.nested_foreach_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FOREACH640=null;
        Token GENERATE642=null;
        Token COMMA644=null;
        QueryParser.nested_op_input_return nested_op_input641 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item643 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item645 =null;


        Object FOREACH640_tree=null;
        Object GENERATE642_tree=null;
        Object COMMA644_tree=null;
        RewriteRuleTokenStream stream_FOREACH=new RewriteRuleTokenStream(adaptor,"token FOREACH");
        RewriteRuleTokenStream stream_GENERATE=new RewriteRuleTokenStream(adaptor,"token GENERATE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_flatten_generated_item=new RewriteRuleSubtreeStream(adaptor,"rule flatten_generated_item");
        RewriteRuleSubtreeStream stream_nested_op_input=new RewriteRuleSubtreeStream(adaptor,"rule nested_op_input");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:948:15: ( FOREACH nested_op_input GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( FOREACH nested_op_input ^( GENERATE ( flatten_generated_item )+ ) ) )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:948:17: FOREACH nested_op_input GENERATE flatten_generated_item ( COMMA flatten_generated_item )*
            {
            FOREACH640=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_nested_foreach6401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOREACH.add(FOREACH640);


            pushFollow(FOLLOW_nested_op_input_in_nested_foreach6403);
            nested_op_input641=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input641.getTree());

            GENERATE642=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_nested_foreach6405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GENERATE.add(GENERATE642);


            pushFollow(FOLLOW_flatten_generated_item_in_nested_foreach6407);
            flatten_generated_item643=flatten_generated_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item643.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:948:73: ( COMMA flatten_generated_item )*
            loop184:
            do {
                int alt184=2;
                int LA184_0 = input.LA(1);

                if ( (LA184_0==COMMA) ) {
                    alt184=1;
                }


                switch (alt184) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:948:75: COMMA flatten_generated_item
            	    {
            	    COMMA644=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_foreach6411); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA644);


            	    pushFollow(FOLLOW_flatten_generated_item_in_nested_foreach6413);
            	    flatten_generated_item645=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item645.getTree());

            	    }
            	    break;

            	default :
            	    break loop184;
                }
            } while (true);


            // AST REWRITE
            // elements: FOREACH, flatten_generated_item, nested_op_input, GENERATE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 949:5: -> ^( FOREACH nested_op_input ^( GENERATE ( flatten_generated_item )+ ) )
            {
                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:949:8: ^( FOREACH nested_op_input ^( GENERATE ( flatten_generated_item )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_FOREACH.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_nested_op_input.nextTree());

                // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:949:35: ^( GENERATE ( flatten_generated_item )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                stream_GENERATE.nextNode()
                , root_2);

                if ( !(stream_flatten_generated_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_flatten_generated_item.hasNext() ) {
                    adaptor.addChild(root_2, stream_flatten_generated_item.nextTree());

                }
                stream_flatten_generated_item.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_foreach"


    public static class nested_op_input_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:952:1: nested_op_input : ( col_ref | nested_proj );
    public final QueryParser.nested_op_input_return nested_op_input() throws RecognitionException {
        QueryParser.nested_op_input_return retval = new QueryParser.nested_op_input_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.col_ref_return col_ref646 =null;

        QueryParser.nested_proj_return nested_proj647 =null;



        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:952:17: ( col_ref | nested_proj )
            int alt185=2;
            switch ( input.LA(1) ) {
            case DOLLARVAR:
            case GROUP:
                {
                int LA185_1 = input.LA(2);

                if ( (LA185_1==ALL||LA185_1==AND||(LA185_1 >= AS && LA185_1 <= ASC)||LA185_1==BIGDECIMAL||LA185_1==BIGINTEGER||(LA185_1 >= BY && LA185_1 <= COGROUP)||(LA185_1 >= COMMA && LA185_1 <= DATETIME)||LA185_1==DEFINE||LA185_1==DESC||LA185_1==DISTINCT||LA185_1==DOLLARVAR||LA185_1==DOUBLENUMBER||(LA185_1 >= ELSE && LA185_1 <= END)||LA185_1==FALSE||LA185_1==FILTER||(LA185_1 >= FLOATNUMBER && LA185_1 <= GROUP)||(LA185_1 >= IDENTIFIER && LA185_1 <= INPUT)||(LA185_1 >= INTEGER && LA185_1 <= LEFT_PAREN)||(LA185_1 >= LIMIT && LA185_1 <= LOAD)||LA185_1==LONGINTEGER||(LA185_1 >= MAPREDUCE && LA185_1 <= MINUS)||LA185_1==NULL||(LA185_1 >= OR && LA185_1 <= ORDER)||(LA185_1 >= OUTER && LA185_1 <= PARTITION)||(LA185_1 >= QUOTEDSTRING && LA185_1 <= RIGHT)||(LA185_1 >= ROLLUP && LA185_1 <= SHIP)||LA185_1==SPLIT||(LA185_1 >= STDERROR && LA185_1 <= TRUE)||(LA185_1 >= UNION && LA185_1 <= USING)||LA185_1==WHEN||(LA185_1 >= BOOL && LA185_1 <= BOOL_COND)||LA185_1==REALIAS) ) {
                    alt185=1;
                }
                else if ( (LA185_1==PERIOD) ) {
                    alt185=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 185, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER:
                {
                int LA185_2 = input.LA(2);

                if ( (LA185_2==ALL||LA185_2==AND||(LA185_2 >= AS && LA185_2 <= ASC)||LA185_2==BIGDECIMAL||LA185_2==BIGINTEGER||(LA185_2 >= BY && LA185_2 <= COGROUP)||(LA185_2 >= COMMA && LA185_2 <= DATETIME)||LA185_2==DEFINE||LA185_2==DESC||LA185_2==DISTINCT||LA185_2==DOLLARVAR||LA185_2==DOUBLENUMBER||(LA185_2 >= ELSE && LA185_2 <= END)||LA185_2==FALSE||LA185_2==FILTER||(LA185_2 >= FLOATNUMBER && LA185_2 <= GROUP)||(LA185_2 >= IDENTIFIER && LA185_2 <= INPUT)||(LA185_2 >= INTEGER && LA185_2 <= LEFT_PAREN)||(LA185_2 >= LIMIT && LA185_2 <= LOAD)||LA185_2==LONGINTEGER||(LA185_2 >= MAPREDUCE && LA185_2 <= MINUS)||LA185_2==NULL||(LA185_2 >= OR && LA185_2 <= ORDER)||(LA185_2 >= OUTER && LA185_2 <= PARTITION)||(LA185_2 >= QUOTEDSTRING && LA185_2 <= RIGHT)||(LA185_2 >= ROLLUP && LA185_2 <= SHIP)||LA185_2==SPLIT||(LA185_2 >= STDERROR && LA185_2 <= TRUE)||(LA185_2 >= UNION && LA185_2 <= USING)||LA185_2==WHEN||(LA185_2 >= BOOL && LA185_2 <= BOOL_COND)||LA185_2==REALIAS) ) {
                    alt185=1;
                }
                else if ( (LA185_2==PERIOD) ) {
                    alt185=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 185, 2, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
            case ELSE:
            case END:
            case IN:
            case RANK:
            case THEN:
            case WHEN:
                {
                int LA185_3 = input.LA(2);

                if ( (LA185_3==ALL||LA185_3==AND||(LA185_3 >= AS && LA185_3 <= ASC)||LA185_3==BIGDECIMAL||LA185_3==BIGINTEGER||(LA185_3 >= BY && LA185_3 <= COGROUP)||(LA185_3 >= COMMA && LA185_3 <= DATETIME)||LA185_3==DEFINE||LA185_3==DESC||LA185_3==DISTINCT||LA185_3==DOLLARVAR||LA185_3==DOUBLENUMBER||(LA185_3 >= ELSE && LA185_3 <= END)||LA185_3==FALSE||LA185_3==FILTER||(LA185_3 >= FLOATNUMBER && LA185_3 <= GROUP)||(LA185_3 >= IDENTIFIER && LA185_3 <= INPUT)||(LA185_3 >= INTEGER && LA185_3 <= LEFT_PAREN)||(LA185_3 >= LIMIT && LA185_3 <= LOAD)||LA185_3==LONGINTEGER||(LA185_3 >= MAPREDUCE && LA185_3 <= MINUS)||LA185_3==NULL||(LA185_3 >= OR && LA185_3 <= ORDER)||(LA185_3 >= OUTER && LA185_3 <= PARTITION)||(LA185_3 >= QUOTEDSTRING && LA185_3 <= RIGHT)||(LA185_3 >= ROLLUP && LA185_3 <= SHIP)||LA185_3==SPLIT||(LA185_3 >= STDERROR && LA185_3 <= TRUE)||(LA185_3 >= UNION && LA185_3 <= USING)||LA185_3==WHEN||(LA185_3 >= BOOL && LA185_3 <= BOOL_COND)||LA185_3==REALIAS) ) {
                    alt185=1;
                }
                else if ( (LA185_3==PERIOD) ) {
                    alt185=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 185, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;

            }

            switch (alt185) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:952:19: col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_nested_op_input6448);
                    col_ref646=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref646.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:952:29: nested_proj
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_proj_in_nested_op_input6452);
                    nested_proj647=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_proj647.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input"


    public static class nested_op_input_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input_list"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:955:1: nested_op_input_list : nested_op_input ( COMMA nested_op_input )* -> ( nested_op_input )+ ;
    public final QueryParser.nested_op_input_list_return nested_op_input_list() throws RecognitionException {
        QueryParser.nested_op_input_list_return retval = new QueryParser.nested_op_input_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA649=null;
        QueryParser.nested_op_input_return nested_op_input648 =null;

        QueryParser.nested_op_input_return nested_op_input650 =null;


        Object COMMA649_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_nested_op_input=new RewriteRuleSubtreeStream(adaptor,"rule nested_op_input");
        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:955:22: ( nested_op_input ( COMMA nested_op_input )* -> ( nested_op_input )+ )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:955:24: nested_op_input ( COMMA nested_op_input )*
            {
            pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list6461);
            nested_op_input648=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input648.getTree());

            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:955:40: ( COMMA nested_op_input )*
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==COMMA) ) {
                    alt186=1;
                }


                switch (alt186) {
            	case 1 :
            	    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:955:42: COMMA nested_op_input
            	    {
            	    COMMA649=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_op_input_list6465); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA649);


            	    pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list6467);
            	    nested_op_input650=nested_op_input();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input650.getTree());

            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);


            // AST REWRITE
            // elements: nested_op_input
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 956:9: -> ( nested_op_input )+
            {
                if ( !(stream_nested_op_input.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nested_op_input.hasNext() ) {
                    adaptor.addChild(root_0, stream_nested_op_input.nextTree());

                }
                stream_nested_op_input.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input_list"


    public static class eid_without_columns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eid_without_columns"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:962:1: eid_without_columns : ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | ROLLUP | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | AND | OR | GENERATE | ASC | DESC | BOOL | BIGINTEGER | BIGDECIMAL | DATETIME | CHARARRAY | BYTEARRAY | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | REALIAS | BOOL_COND );
    public final QueryParser.eid_without_columns_return eid_without_columns() throws RecognitionException {
        QueryParser.eid_without_columns_return retval = new QueryParser.eid_without_columns_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IMPORT652=null;
        Token RETURNS653=null;
        Token DEFINE654=null;
        Token LOAD655=null;
        Token FILTER656=null;
        Token FOREACH657=null;
        Token ROLLUP658=null;
        Token ORDER659=null;
        Token DISTINCT660=null;
        Token COGROUP661=null;
        Token JOIN662=null;
        Token CROSS663=null;
        Token UNION664=null;
        Token SPLIT665=null;
        Token INTO666=null;
        Token IF667=null;
        Token ALL668=null;
        Token AS669=null;
        Token BY670=null;
        Token USING671=null;
        Token INNER672=null;
        Token OUTER673=null;
        Token PARALLEL674=null;
        Token PARTITION675=null;
        Token AND676=null;
        Token OR677=null;
        Token GENERATE678=null;
        Token ASC679=null;
        Token DESC680=null;
        Token BOOL681=null;
        Token BIGINTEGER682=null;
        Token BIGDECIMAL683=null;
        Token DATETIME684=null;
        Token CHARARRAY685=null;
        Token BYTEARRAY686=null;
        Token IS687=null;
        Token STREAM688=null;
        Token THROUGH689=null;
        Token STORE690=null;
        Token MAPREDUCE691=null;
        Token SHIP692=null;
        Token CACHE693=null;
        Token INPUT694=null;
        Token OUTPUT695=null;
        Token STDERROR696=null;
        Token STDIN697=null;
        Token STDOUT698=null;
        Token LIMIT699=null;
        Token SAMPLE700=null;
        Token LEFT701=null;
        Token RIGHT702=null;
        Token FULL703=null;
        Token REALIAS704=null;
        Token BOOL_COND705=null;
        QueryParser.rel_str_op_return rel_str_op651 =null;


        Object IMPORT652_tree=null;
        Object RETURNS653_tree=null;
        Object DEFINE654_tree=null;
        Object LOAD655_tree=null;
        Object FILTER656_tree=null;
        Object FOREACH657_tree=null;
        Object ROLLUP658_tree=null;
        Object ORDER659_tree=null;
        Object DISTINCT660_tree=null;
        Object COGROUP661_tree=null;
        Object JOIN662_tree=null;
        Object CROSS663_tree=null;
        Object UNION664_tree=null;
        Object SPLIT665_tree=null;
        Object INTO666_tree=null;
        Object IF667_tree=null;
        Object ALL668_tree=null;
        Object AS669_tree=null;
        Object BY670_tree=null;
        Object USING671_tree=null;
        Object INNER672_tree=null;
        Object OUTER673_tree=null;
        Object PARALLEL674_tree=null;
        Object PARTITION675_tree=null;
        Object AND676_tree=null;
        Object OR677_tree=null;
        Object GENERATE678_tree=null;
        Object ASC679_tree=null;
        Object DESC680_tree=null;
        Object BOOL681_tree=null;
        Object BIGINTEGER682_tree=null;
        Object BIGDECIMAL683_tree=null;
        Object DATETIME684_tree=null;
        Object CHARARRAY685_tree=null;
        Object BYTEARRAY686_tree=null;
        Object IS687_tree=null;
        Object STREAM688_tree=null;
        Object THROUGH689_tree=null;
        Object STORE690_tree=null;
        Object MAPREDUCE691_tree=null;
        Object SHIP692_tree=null;
        Object CACHE693_tree=null;
        Object INPUT694_tree=null;
        Object OUTPUT695_tree=null;
        Object STDERROR696_tree=null;
        Object STDIN697_tree=null;
        Object STDOUT698_tree=null;
        Object LIMIT699_tree=null;
        Object SAMPLE700_tree=null;
        Object LEFT701_tree=null;
        Object RIGHT702_tree=null;
        Object FULL703_tree=null;
        Object REALIAS704_tree=null;
        Object BOOL_COND705_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:962:21: ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | ROLLUP | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | AND | OR | GENERATE | ASC | DESC | BOOL | BIGINTEGER | BIGDECIMAL | DATETIME | CHARARRAY | BYTEARRAY | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | REALIAS | BOOL_COND )
            int alt187=55;
            switch ( input.LA(1) ) {
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt187=1;
                }
                break;
            case IMPORT:
                {
                alt187=2;
                }
                break;
            case RETURNS:
                {
                alt187=3;
                }
                break;
            case DEFINE:
                {
                alt187=4;
                }
                break;
            case LOAD:
                {
                alt187=5;
                }
                break;
            case FILTER:
                {
                alt187=6;
                }
                break;
            case FOREACH:
                {
                alt187=7;
                }
                break;
            case ROLLUP:
                {
                alt187=8;
                }
                break;
            case ORDER:
                {
                alt187=9;
                }
                break;
            case DISTINCT:
                {
                alt187=10;
                }
                break;
            case COGROUP:
                {
                alt187=11;
                }
                break;
            case JOIN:
                {
                alt187=12;
                }
                break;
            case CROSS:
                {
                alt187=13;
                }
                break;
            case UNION:
                {
                alt187=14;
                }
                break;
            case SPLIT:
                {
                alt187=15;
                }
                break;
            case INTO:
                {
                alt187=16;
                }
                break;
            case IF:
                {
                alt187=17;
                }
                break;
            case ALL:
                {
                alt187=18;
                }
                break;
            case AS:
                {
                alt187=19;
                }
                break;
            case BY:
                {
                alt187=20;
                }
                break;
            case USING:
                {
                alt187=21;
                }
                break;
            case INNER:
                {
                alt187=22;
                }
                break;
            case OUTER:
                {
                alt187=23;
                }
                break;
            case PARALLEL:
                {
                alt187=24;
                }
                break;
            case PARTITION:
                {
                alt187=25;
                }
                break;
            case AND:
                {
                alt187=26;
                }
                break;
            case OR:
                {
                alt187=27;
                }
                break;
            case GENERATE:
                {
                alt187=28;
                }
                break;
            case ASC:
                {
                alt187=29;
                }
                break;
            case DESC:
                {
                alt187=30;
                }
                break;
            case BOOL:
                {
                alt187=31;
                }
                break;
            case BIGINTEGER:
                {
                alt187=32;
                }
                break;
            case BIGDECIMAL:
                {
                alt187=33;
                }
                break;
            case DATETIME:
                {
                alt187=34;
                }
                break;
            case CHARARRAY:
                {
                alt187=35;
                }
                break;
            case BYTEARRAY:
                {
                alt187=36;
                }
                break;
            case IS:
                {
                alt187=37;
                }
                break;
            case STREAM:
                {
                alt187=38;
                }
                break;
            case THROUGH:
                {
                alt187=39;
                }
                break;
            case STORE:
                {
                alt187=40;
                }
                break;
            case MAPREDUCE:
                {
                alt187=41;
                }
                break;
            case SHIP:
                {
                alt187=42;
                }
                break;
            case CACHE:
                {
                alt187=43;
                }
                break;
            case INPUT:
                {
                alt187=44;
                }
                break;
            case OUTPUT:
                {
                alt187=45;
                }
                break;
            case STDERROR:
                {
                alt187=46;
                }
                break;
            case STDIN:
                {
                alt187=47;
                }
                break;
            case STDOUT:
                {
                alt187=48;
                }
                break;
            case LIMIT:
                {
                alt187=49;
                }
                break;
            case SAMPLE:
                {
                alt187=50;
                }
                break;
            case LEFT:
                {
                alt187=51;
                }
                break;
            case RIGHT:
                {
                alt187=52;
                }
                break;
            case FULL:
                {
                alt187=53;
                }
                break;
            case REALIAS:
                {
                alt187=54;
                }
                break;
            case BOOL_COND:
                {
                alt187=55;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;

            }

            switch (alt187) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:962:23: rel_str_op
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_str_op_in_eid_without_columns6495);
                    rel_str_op651=rel_str_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_str_op651.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:963:7: IMPORT
                    {
                    root_0 = (Object)adaptor.nil();


                    IMPORT652=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_eid_without_columns6503); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IMPORT652_tree = 
                    (Object)adaptor.create(IMPORT652)
                    ;
                    adaptor.addChild(root_0, IMPORT652_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:964:7: RETURNS
                    {
                    root_0 = (Object)adaptor.nil();


                    RETURNS653=(Token)match(input,RETURNS,FOLLOW_RETURNS_in_eid_without_columns6511); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNS653_tree = 
                    (Object)adaptor.create(RETURNS653)
                    ;
                    adaptor.addChild(root_0, RETURNS653_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:965:7: DEFINE
                    {
                    root_0 = (Object)adaptor.nil();


                    DEFINE654=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_eid_without_columns6519); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE654_tree = 
                    (Object)adaptor.create(DEFINE654)
                    ;
                    adaptor.addChild(root_0, DEFINE654_tree);
                    }

                    }
                    break;
                case 5 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:966:7: LOAD
                    {
                    root_0 = (Object)adaptor.nil();


                    LOAD655=(Token)match(input,LOAD,FOLLOW_LOAD_in_eid_without_columns6527); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOAD655_tree = 
                    (Object)adaptor.create(LOAD655)
                    ;
                    adaptor.addChild(root_0, LOAD655_tree);
                    }

                    }
                    break;
                case 6 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:967:7: FILTER
                    {
                    root_0 = (Object)adaptor.nil();


                    FILTER656=(Token)match(input,FILTER,FOLLOW_FILTER_in_eid_without_columns6535); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FILTER656_tree = 
                    (Object)adaptor.create(FILTER656)
                    ;
                    adaptor.addChild(root_0, FILTER656_tree);
                    }

                    }
                    break;
                case 7 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:968:7: FOREACH
                    {
                    root_0 = (Object)adaptor.nil();


                    FOREACH657=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_eid_without_columns6543); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH657_tree = 
                    (Object)adaptor.create(FOREACH657)
                    ;
                    adaptor.addChild(root_0, FOREACH657_tree);
                    }

                    }
                    break;
                case 8 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:969:7: ROLLUP
                    {
                    root_0 = (Object)adaptor.nil();


                    ROLLUP658=(Token)match(input,ROLLUP,FOLLOW_ROLLUP_in_eid_without_columns6551); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROLLUP658_tree = 
                    (Object)adaptor.create(ROLLUP658)
                    ;
                    adaptor.addChild(root_0, ROLLUP658_tree);
                    }

                    }
                    break;
                case 9 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:970:7: ORDER
                    {
                    root_0 = (Object)adaptor.nil();


                    ORDER659=(Token)match(input,ORDER,FOLLOW_ORDER_in_eid_without_columns6559); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ORDER659_tree = 
                    (Object)adaptor.create(ORDER659)
                    ;
                    adaptor.addChild(root_0, ORDER659_tree);
                    }

                    }
                    break;
                case 10 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:971:7: DISTINCT
                    {
                    root_0 = (Object)adaptor.nil();


                    DISTINCT660=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_eid_without_columns6567); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT660_tree = 
                    (Object)adaptor.create(DISTINCT660)
                    ;
                    adaptor.addChild(root_0, DISTINCT660_tree);
                    }

                    }
                    break;
                case 11 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:972:7: COGROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    COGROUP661=(Token)match(input,COGROUP,FOLLOW_COGROUP_in_eid_without_columns6575); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COGROUP661_tree = 
                    (Object)adaptor.create(COGROUP661)
                    ;
                    adaptor.addChild(root_0, COGROUP661_tree);
                    }

                    }
                    break;
                case 12 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:973:7: JOIN
                    {
                    root_0 = (Object)adaptor.nil();


                    JOIN662=(Token)match(input,JOIN,FOLLOW_JOIN_in_eid_without_columns6583); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN662_tree = 
                    (Object)adaptor.create(JOIN662)
                    ;
                    adaptor.addChild(root_0, JOIN662_tree);
                    }

                    }
                    break;
                case 13 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:974:7: CROSS
                    {
                    root_0 = (Object)adaptor.nil();


                    CROSS663=(Token)match(input,CROSS,FOLLOW_CROSS_in_eid_without_columns6591); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CROSS663_tree = 
                    (Object)adaptor.create(CROSS663)
                    ;
                    adaptor.addChild(root_0, CROSS663_tree);
                    }

                    }
                    break;
                case 14 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:975:7: UNION
                    {
                    root_0 = (Object)adaptor.nil();


                    UNION664=(Token)match(input,UNION,FOLLOW_UNION_in_eid_without_columns6599); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNION664_tree = 
                    (Object)adaptor.create(UNION664)
                    ;
                    adaptor.addChild(root_0, UNION664_tree);
                    }

                    }
                    break;
                case 15 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:976:7: SPLIT
                    {
                    root_0 = (Object)adaptor.nil();


                    SPLIT665=(Token)match(input,SPLIT,FOLLOW_SPLIT_in_eid_without_columns6607); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SPLIT665_tree = 
                    (Object)adaptor.create(SPLIT665)
                    ;
                    adaptor.addChild(root_0, SPLIT665_tree);
                    }

                    }
                    break;
                case 16 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:977:7: INTO
                    {
                    root_0 = (Object)adaptor.nil();


                    INTO666=(Token)match(input,INTO,FOLLOW_INTO_in_eid_without_columns6615); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO666_tree = 
                    (Object)adaptor.create(INTO666)
                    ;
                    adaptor.addChild(root_0, INTO666_tree);
                    }

                    }
                    break;
                case 17 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:978:7: IF
                    {
                    root_0 = (Object)adaptor.nil();


                    IF667=(Token)match(input,IF,FOLLOW_IF_in_eid_without_columns6623); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF667_tree = 
                    (Object)adaptor.create(IF667)
                    ;
                    adaptor.addChild(root_0, IF667_tree);
                    }

                    }
                    break;
                case 18 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:979:7: ALL
                    {
                    root_0 = (Object)adaptor.nil();


                    ALL668=(Token)match(input,ALL,FOLLOW_ALL_in_eid_without_columns6631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL668_tree = 
                    (Object)adaptor.create(ALL668)
                    ;
                    adaptor.addChild(root_0, ALL668_tree);
                    }

                    }
                    break;
                case 19 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:980:7: AS
                    {
                    root_0 = (Object)adaptor.nil();


                    AS669=(Token)match(input,AS,FOLLOW_AS_in_eid_without_columns6639); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS669_tree = 
                    (Object)adaptor.create(AS669)
                    ;
                    adaptor.addChild(root_0, AS669_tree);
                    }

                    }
                    break;
                case 20 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:981:7: BY
                    {
                    root_0 = (Object)adaptor.nil();


                    BY670=(Token)match(input,BY,FOLLOW_BY_in_eid_without_columns6647); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY670_tree = 
                    (Object)adaptor.create(BY670)
                    ;
                    adaptor.addChild(root_0, BY670_tree);
                    }

                    }
                    break;
                case 21 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:982:7: USING
                    {
                    root_0 = (Object)adaptor.nil();


                    USING671=(Token)match(input,USING,FOLLOW_USING_in_eid_without_columns6655); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING671_tree = 
                    (Object)adaptor.create(USING671)
                    ;
                    adaptor.addChild(root_0, USING671_tree);
                    }

                    }
                    break;
                case 22 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:983:7: INNER
                    {
                    root_0 = (Object)adaptor.nil();


                    INNER672=(Token)match(input,INNER,FOLLOW_INNER_in_eid_without_columns6663); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INNER672_tree = 
                    (Object)adaptor.create(INNER672)
                    ;
                    adaptor.addChild(root_0, INNER672_tree);
                    }

                    }
                    break;
                case 23 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:984:7: OUTER
                    {
                    root_0 = (Object)adaptor.nil();


                    OUTER673=(Token)match(input,OUTER,FOLLOW_OUTER_in_eid_without_columns6671); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER673_tree = 
                    (Object)adaptor.create(OUTER673)
                    ;
                    adaptor.addChild(root_0, OUTER673_tree);
                    }

                    }
                    break;
                case 24 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:985:7: PARALLEL
                    {
                    root_0 = (Object)adaptor.nil();


                    PARALLEL674=(Token)match(input,PARALLEL,FOLLOW_PARALLEL_in_eid_without_columns6679); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARALLEL674_tree = 
                    (Object)adaptor.create(PARALLEL674)
                    ;
                    adaptor.addChild(root_0, PARALLEL674_tree);
                    }

                    }
                    break;
                case 25 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:986:7: PARTITION
                    {
                    root_0 = (Object)adaptor.nil();


                    PARTITION675=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_eid_without_columns6687); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION675_tree = 
                    (Object)adaptor.create(PARTITION675)
                    ;
                    adaptor.addChild(root_0, PARTITION675_tree);
                    }

                    }
                    break;
                case 26 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:987:7: AND
                    {
                    root_0 = (Object)adaptor.nil();


                    AND676=(Token)match(input,AND,FOLLOW_AND_in_eid_without_columns6695); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND676_tree = 
                    (Object)adaptor.create(AND676)
                    ;
                    adaptor.addChild(root_0, AND676_tree);
                    }

                    }
                    break;
                case 27 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:988:7: OR
                    {
                    root_0 = (Object)adaptor.nil();


                    OR677=(Token)match(input,OR,FOLLOW_OR_in_eid_without_columns6703); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR677_tree = 
                    (Object)adaptor.create(OR677)
                    ;
                    adaptor.addChild(root_0, OR677_tree);
                    }

                    }
                    break;
                case 28 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:989:7: GENERATE
                    {
                    root_0 = (Object)adaptor.nil();


                    GENERATE678=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_eid_without_columns6711); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GENERATE678_tree = 
                    (Object)adaptor.create(GENERATE678)
                    ;
                    adaptor.addChild(root_0, GENERATE678_tree);
                    }

                    }
                    break;
                case 29 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:990:7: ASC
                    {
                    root_0 = (Object)adaptor.nil();


                    ASC679=(Token)match(input,ASC,FOLLOW_ASC_in_eid_without_columns6719); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASC679_tree = 
                    (Object)adaptor.create(ASC679)
                    ;
                    adaptor.addChild(root_0, ASC679_tree);
                    }

                    }
                    break;
                case 30 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:991:7: DESC
                    {
                    root_0 = (Object)adaptor.nil();


                    DESC680=(Token)match(input,DESC,FOLLOW_DESC_in_eid_without_columns6727); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESC680_tree = 
                    (Object)adaptor.create(DESC680)
                    ;
                    adaptor.addChild(root_0, DESC680_tree);
                    }

                    }
                    break;
                case 31 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:992:7: BOOL
                    {
                    root_0 = (Object)adaptor.nil();


                    BOOL681=(Token)match(input,BOOL,FOLLOW_BOOL_in_eid_without_columns6735); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL681_tree = 
                    (Object)adaptor.create(BOOL681)
                    ;
                    adaptor.addChild(root_0, BOOL681_tree);
                    }

                    }
                    break;
                case 32 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:993:7: BIGINTEGER
                    {
                    root_0 = (Object)adaptor.nil();


                    BIGINTEGER682=(Token)match(input,BIGINTEGER,FOLLOW_BIGINTEGER_in_eid_without_columns6743); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIGINTEGER682_tree = 
                    (Object)adaptor.create(BIGINTEGER682)
                    ;
                    adaptor.addChild(root_0, BIGINTEGER682_tree);
                    }

                    }
                    break;
                case 33 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:994:7: BIGDECIMAL
                    {
                    root_0 = (Object)adaptor.nil();


                    BIGDECIMAL683=(Token)match(input,BIGDECIMAL,FOLLOW_BIGDECIMAL_in_eid_without_columns6751); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIGDECIMAL683_tree = 
                    (Object)adaptor.create(BIGDECIMAL683)
                    ;
                    adaptor.addChild(root_0, BIGDECIMAL683_tree);
                    }

                    }
                    break;
                case 34 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:995:7: DATETIME
                    {
                    root_0 = (Object)adaptor.nil();


                    DATETIME684=(Token)match(input,DATETIME,FOLLOW_DATETIME_in_eid_without_columns6759); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DATETIME684_tree = 
                    (Object)adaptor.create(DATETIME684)
                    ;
                    adaptor.addChild(root_0, DATETIME684_tree);
                    }

                    }
                    break;
                case 35 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:996:7: CHARARRAY
                    {
                    root_0 = (Object)adaptor.nil();


                    CHARARRAY685=(Token)match(input,CHARARRAY,FOLLOW_CHARARRAY_in_eid_without_columns6767); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARARRAY685_tree = 
                    (Object)adaptor.create(CHARARRAY685)
                    ;
                    adaptor.addChild(root_0, CHARARRAY685_tree);
                    }

                    }
                    break;
                case 36 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:997:7: BYTEARRAY
                    {
                    root_0 = (Object)adaptor.nil();


                    BYTEARRAY686=(Token)match(input,BYTEARRAY,FOLLOW_BYTEARRAY_in_eid_without_columns6775); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BYTEARRAY686_tree = 
                    (Object)adaptor.create(BYTEARRAY686)
                    ;
                    adaptor.addChild(root_0, BYTEARRAY686_tree);
                    }

                    }
                    break;
                case 37 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:998:7: IS
                    {
                    root_0 = (Object)adaptor.nil();


                    IS687=(Token)match(input,IS,FOLLOW_IS_in_eid_without_columns6783); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS687_tree = 
                    (Object)adaptor.create(IS687)
                    ;
                    adaptor.addChild(root_0, IS687_tree);
                    }

                    }
                    break;
                case 38 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:999:7: STREAM
                    {
                    root_0 = (Object)adaptor.nil();


                    STREAM688=(Token)match(input,STREAM,FOLLOW_STREAM_in_eid_without_columns6791); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STREAM688_tree = 
                    (Object)adaptor.create(STREAM688)
                    ;
                    adaptor.addChild(root_0, STREAM688_tree);
                    }

                    }
                    break;
                case 39 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1000:7: THROUGH
                    {
                    root_0 = (Object)adaptor.nil();


                    THROUGH689=(Token)match(input,THROUGH,FOLLOW_THROUGH_in_eid_without_columns6799); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THROUGH689_tree = 
                    (Object)adaptor.create(THROUGH689)
                    ;
                    adaptor.addChild(root_0, THROUGH689_tree);
                    }

                    }
                    break;
                case 40 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1001:7: STORE
                    {
                    root_0 = (Object)adaptor.nil();


                    STORE690=(Token)match(input,STORE,FOLLOW_STORE_in_eid_without_columns6807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STORE690_tree = 
                    (Object)adaptor.create(STORE690)
                    ;
                    adaptor.addChild(root_0, STORE690_tree);
                    }

                    }
                    break;
                case 41 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1002:7: MAPREDUCE
                    {
                    root_0 = (Object)adaptor.nil();


                    MAPREDUCE691=(Token)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_eid_without_columns6815); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAPREDUCE691_tree = 
                    (Object)adaptor.create(MAPREDUCE691)
                    ;
                    adaptor.addChild(root_0, MAPREDUCE691_tree);
                    }

                    }
                    break;
                case 42 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1003:7: SHIP
                    {
                    root_0 = (Object)adaptor.nil();


                    SHIP692=(Token)match(input,SHIP,FOLLOW_SHIP_in_eid_without_columns6823); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIP692_tree = 
                    (Object)adaptor.create(SHIP692)
                    ;
                    adaptor.addChild(root_0, SHIP692_tree);
                    }

                    }
                    break;
                case 43 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1004:7: CACHE
                    {
                    root_0 = (Object)adaptor.nil();


                    CACHE693=(Token)match(input,CACHE,FOLLOW_CACHE_in_eid_without_columns6831); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CACHE693_tree = 
                    (Object)adaptor.create(CACHE693)
                    ;
                    adaptor.addChild(root_0, CACHE693_tree);
                    }

                    }
                    break;
                case 44 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1005:7: INPUT
                    {
                    root_0 = (Object)adaptor.nil();


                    INPUT694=(Token)match(input,INPUT,FOLLOW_INPUT_in_eid_without_columns6839); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INPUT694_tree = 
                    (Object)adaptor.create(INPUT694)
                    ;
                    adaptor.addChild(root_0, INPUT694_tree);
                    }

                    }
                    break;
                case 45 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1006:7: OUTPUT
                    {
                    root_0 = (Object)adaptor.nil();


                    OUTPUT695=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_eid_without_columns6847); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTPUT695_tree = 
                    (Object)adaptor.create(OUTPUT695)
                    ;
                    adaptor.addChild(root_0, OUTPUT695_tree);
                    }

                    }
                    break;
                case 46 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1007:7: STDERROR
                    {
                    root_0 = (Object)adaptor.nil();


                    STDERROR696=(Token)match(input,STDERROR,FOLLOW_STDERROR_in_eid_without_columns6855); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDERROR696_tree = 
                    (Object)adaptor.create(STDERROR696)
                    ;
                    adaptor.addChild(root_0, STDERROR696_tree);
                    }

                    }
                    break;
                case 47 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1008:7: STDIN
                    {
                    root_0 = (Object)adaptor.nil();


                    STDIN697=(Token)match(input,STDIN,FOLLOW_STDIN_in_eid_without_columns6863); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN697_tree = 
                    (Object)adaptor.create(STDIN697)
                    ;
                    adaptor.addChild(root_0, STDIN697_tree);
                    }

                    }
                    break;
                case 48 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1009:7: STDOUT
                    {
                    root_0 = (Object)adaptor.nil();


                    STDOUT698=(Token)match(input,STDOUT,FOLLOW_STDOUT_in_eid_without_columns6871); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT698_tree = 
                    (Object)adaptor.create(STDOUT698)
                    ;
                    adaptor.addChild(root_0, STDOUT698_tree);
                    }

                    }
                    break;
                case 49 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1010:7: LIMIT
                    {
                    root_0 = (Object)adaptor.nil();


                    LIMIT699=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_eid_without_columns6879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIMIT699_tree = 
                    (Object)adaptor.create(LIMIT699)
                    ;
                    adaptor.addChild(root_0, LIMIT699_tree);
                    }

                    }
                    break;
                case 50 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1011:7: SAMPLE
                    {
                    root_0 = (Object)adaptor.nil();


                    SAMPLE700=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_eid_without_columns6887); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAMPLE700_tree = 
                    (Object)adaptor.create(SAMPLE700)
                    ;
                    adaptor.addChild(root_0, SAMPLE700_tree);
                    }

                    }
                    break;
                case 51 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1012:7: LEFT
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT701=(Token)match(input,LEFT,FOLLOW_LEFT_in_eid_without_columns6895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT701_tree = 
                    (Object)adaptor.create(LEFT701)
                    ;
                    adaptor.addChild(root_0, LEFT701_tree);
                    }

                    }
                    break;
                case 52 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1013:7: RIGHT
                    {
                    root_0 = (Object)adaptor.nil();


                    RIGHT702=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_eid_without_columns6903); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT702_tree = 
                    (Object)adaptor.create(RIGHT702)
                    ;
                    adaptor.addChild(root_0, RIGHT702_tree);
                    }

                    }
                    break;
                case 53 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1014:7: FULL
                    {
                    root_0 = (Object)adaptor.nil();


                    FULL703=(Token)match(input,FULL,FOLLOW_FULL_in_eid_without_columns6911); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL703_tree = 
                    (Object)adaptor.create(FULL703)
                    ;
                    adaptor.addChild(root_0, FULL703_tree);
                    }

                    }
                    break;
                case 54 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1015:7: REALIAS
                    {
                    root_0 = (Object)adaptor.nil();


                    REALIAS704=(Token)match(input,REALIAS,FOLLOW_REALIAS_in_eid_without_columns6919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REALIAS704_tree = 
                    (Object)adaptor.create(REALIAS704)
                    ;
                    adaptor.addChild(root_0, REALIAS704_tree);
                    }

                    }
                    break;
                case 55 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1016:7: BOOL_COND
                    {
                    root_0 = (Object)adaptor.nil();


                    BOOL_COND705=(Token)match(input,BOOL_COND,FOLLOW_BOOL_COND_in_eid_without_columns6927); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL_COND705_tree = 
                    (Object)adaptor.create(BOOL_COND705)
                    ;
                    adaptor.addChild(root_0, BOOL_COND705_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eid_without_columns"


    public static class eid_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eid"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1019:1: eid : ( eid_without_columns | IDENTIFIER | GROUP | CUBE | TRUE | FALSE | INT | LONG | FLOAT | DOUBLE | NULL | NOT | FLATTEN | BAG | TUPLE | MAP );
    public final QueryParser.eid_return eid() throws RecognitionException {
        QueryParser.eid_return retval = new QueryParser.eid_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IDENTIFIER707=null;
        Token GROUP708=null;
        Token CUBE709=null;
        Token TRUE710=null;
        Token FALSE711=null;
        Token INT712=null;
        Token LONG713=null;
        Token FLOAT714=null;
        Token DOUBLE715=null;
        Token NULL716=null;
        Token NOT717=null;
        Token FLATTEN718=null;
        Token BAG719=null;
        Token TUPLE720=null;
        Token MAP721=null;
        QueryParser.eid_without_columns_return eid_without_columns706 =null;


        Object IDENTIFIER707_tree=null;
        Object GROUP708_tree=null;
        Object CUBE709_tree=null;
        Object TRUE710_tree=null;
        Object FALSE711_tree=null;
        Object INT712_tree=null;
        Object LONG713_tree=null;
        Object FLOAT714_tree=null;
        Object DOUBLE715_tree=null;
        Object NULL716_tree=null;
        Object NOT717_tree=null;
        Object FLATTEN718_tree=null;
        Object BAG719_tree=null;
        Object TUPLE720_tree=null;
        Object MAP721_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1019:5: ( eid_without_columns | IDENTIFIER | GROUP | CUBE | TRUE | FALSE | INT | LONG | FLOAT | DOUBLE | NULL | NOT | FLATTEN | BAG | TUPLE | MAP )
            int alt188=16;
            switch ( input.LA(1) ) {
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BIGDECIMAL:
            case BIGINTEGER:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case FILTER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LIMIT:
            case LOAD:
            case MAPREDUCE:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt188=1;
                }
                break;
            case IDENTIFIER:
                {
                alt188=2;
                }
                break;
            case GROUP:
                {
                alt188=3;
                }
                break;
            case CUBE:
                {
                alt188=4;
                }
                break;
            case TRUE:
                {
                alt188=5;
                }
                break;
            case FALSE:
                {
                alt188=6;
                }
                break;
            case INT:
                {
                alt188=7;
                }
                break;
            case LONG:
                {
                alt188=8;
                }
                break;
            case FLOAT:
                {
                alt188=9;
                }
                break;
            case DOUBLE:
                {
                alt188=10;
                }
                break;
            case NULL:
                {
                alt188=11;
                }
                break;
            case NOT:
                {
                alt188=12;
                }
                break;
            case FLATTEN:
                {
                alt188=13;
                }
                break;
            case BAG:
                {
                alt188=14;
                }
                break;
            case TUPLE:
                {
                alt188=15;
                }
                break;
            case MAP:
                {
                alt188=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;

            }

            switch (alt188) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1019:7: eid_without_columns
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_eid_without_columns_in_eid6936);
                    eid_without_columns706=eid_without_columns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid_without_columns706.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1020:7: IDENTIFIER
                    {
                    root_0 = (Object)adaptor.nil();


                    IDENTIFIER707=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_eid6944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER707_tree = 
                    (Object)adaptor.create(IDENTIFIER707)
                    ;
                    adaptor.addChild(root_0, IDENTIFIER707_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1021:7: GROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    GROUP708=(Token)match(input,GROUP,FOLLOW_GROUP_in_eid6952); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP708_tree = 
                    (Object)adaptor.create(GROUP708)
                    ;
                    adaptor.addChild(root_0, GROUP708_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1022:7: CUBE
                    {
                    root_0 = (Object)adaptor.nil();


                    CUBE709=(Token)match(input,CUBE,FOLLOW_CUBE_in_eid6960); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CUBE709_tree = 
                    (Object)adaptor.create(CUBE709)
                    ;
                    adaptor.addChild(root_0, CUBE709_tree);
                    }

                    }
                    break;
                case 5 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1023:7: TRUE
                    {
                    root_0 = (Object)adaptor.nil();


                    TRUE710=(Token)match(input,TRUE,FOLLOW_TRUE_in_eid6968); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE710_tree = 
                    (Object)adaptor.create(TRUE710)
                    ;
                    adaptor.addChild(root_0, TRUE710_tree);
                    }

                    }
                    break;
                case 6 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1024:7: FALSE
                    {
                    root_0 = (Object)adaptor.nil();


                    FALSE711=(Token)match(input,FALSE,FOLLOW_FALSE_in_eid6976); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE711_tree = 
                    (Object)adaptor.create(FALSE711)
                    ;
                    adaptor.addChild(root_0, FALSE711_tree);
                    }

                    }
                    break;
                case 7 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1025:7: INT
                    {
                    root_0 = (Object)adaptor.nil();


                    INT712=(Token)match(input,INT,FOLLOW_INT_in_eid6984); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT712_tree = 
                    (Object)adaptor.create(INT712)
                    ;
                    adaptor.addChild(root_0, INT712_tree);
                    }

                    }
                    break;
                case 8 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1026:7: LONG
                    {
                    root_0 = (Object)adaptor.nil();


                    LONG713=(Token)match(input,LONG,FOLLOW_LONG_in_eid6992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONG713_tree = 
                    (Object)adaptor.create(LONG713)
                    ;
                    adaptor.addChild(root_0, LONG713_tree);
                    }

                    }
                    break;
                case 9 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1027:7: FLOAT
                    {
                    root_0 = (Object)adaptor.nil();


                    FLOAT714=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_eid7000); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT714_tree = 
                    (Object)adaptor.create(FLOAT714)
                    ;
                    adaptor.addChild(root_0, FLOAT714_tree);
                    }

                    }
                    break;
                case 10 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1028:7: DOUBLE
                    {
                    root_0 = (Object)adaptor.nil();


                    DOUBLE715=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_eid7008); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE715_tree = 
                    (Object)adaptor.create(DOUBLE715)
                    ;
                    adaptor.addChild(root_0, DOUBLE715_tree);
                    }

                    }
                    break;
                case 11 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1029:7: NULL
                    {
                    root_0 = (Object)adaptor.nil();


                    NULL716=(Token)match(input,NULL,FOLLOW_NULL_in_eid7016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL716_tree = 
                    (Object)adaptor.create(NULL716)
                    ;
                    adaptor.addChild(root_0, NULL716_tree);
                    }

                    }
                    break;
                case 12 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1030:7: NOT
                    {
                    root_0 = (Object)adaptor.nil();


                    NOT717=(Token)match(input,NOT,FOLLOW_NOT_in_eid7024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT717_tree = 
                    (Object)adaptor.create(NOT717)
                    ;
                    adaptor.addChild(root_0, NOT717_tree);
                    }

                    }
                    break;
                case 13 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1031:7: FLATTEN
                    {
                    root_0 = (Object)adaptor.nil();


                    FLATTEN718=(Token)match(input,FLATTEN,FOLLOW_FLATTEN_in_eid7032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLATTEN718_tree = 
                    (Object)adaptor.create(FLATTEN718)
                    ;
                    adaptor.addChild(root_0, FLATTEN718_tree);
                    }

                    }
                    break;
                case 14 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1032:7: BAG
                    {
                    root_0 = (Object)adaptor.nil();


                    BAG719=(Token)match(input,BAG,FOLLOW_BAG_in_eid7040); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAG719_tree = 
                    (Object)adaptor.create(BAG719)
                    ;
                    adaptor.addChild(root_0, BAG719_tree);
                    }

                    }
                    break;
                case 15 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1033:7: TUPLE
                    {
                    root_0 = (Object)adaptor.nil();


                    TUPLE720=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_eid7048); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE720_tree = 
                    (Object)adaptor.create(TUPLE720)
                    ;
                    adaptor.addChild(root_0, TUPLE720_tree);
                    }

                    }
                    break;
                case 16 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1034:7: MAP
                    {
                    root_0 = (Object)adaptor.nil();


                    MAP721=(Token)match(input,MAP,FOLLOW_MAP_in_eid7056); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAP721_tree = 
                    (Object)adaptor.create(MAP721)
                    ;
                    adaptor.addChild(root_0, MAP721_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eid"


    public static class rel_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1038:1: rel_op : ( rel_str_op | NUM_OP_EQ | NUM_OP_NE | NUM_OP_GT | NUM_OP_GTE | NUM_OP_LT | NUM_OP_LTE );
    public final QueryParser.rel_op_return rel_op() throws RecognitionException {
        QueryParser.rel_op_return retval = new QueryParser.rel_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NUM_OP_EQ723=null;
        Token NUM_OP_NE724=null;
        Token NUM_OP_GT725=null;
        Token NUM_OP_GTE726=null;
        Token NUM_OP_LT727=null;
        Token NUM_OP_LTE728=null;
        QueryParser.rel_str_op_return rel_str_op722 =null;


        Object NUM_OP_EQ723_tree=null;
        Object NUM_OP_NE724_tree=null;
        Object NUM_OP_GT725_tree=null;
        Object NUM_OP_GTE726_tree=null;
        Object NUM_OP_LT727_tree=null;
        Object NUM_OP_LTE728_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1038:8: ( rel_str_op | NUM_OP_EQ | NUM_OP_NE | NUM_OP_GT | NUM_OP_GTE | NUM_OP_LT | NUM_OP_LTE )
            int alt189=7;
            switch ( input.LA(1) ) {
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt189=1;
                }
                break;
            case NUM_OP_EQ:
                {
                alt189=2;
                }
                break;
            case NUM_OP_NE:
                {
                alt189=3;
                }
                break;
            case NUM_OP_GT:
                {
                alt189=4;
                }
                break;
            case NUM_OP_GTE:
                {
                alt189=5;
                }
                break;
            case NUM_OP_LT:
                {
                alt189=6;
                }
                break;
            case NUM_OP_LTE:
                {
                alt189=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;

            }

            switch (alt189) {
                case 1 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1038:10: rel_str_op
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_str_op_in_rel_op7066);
                    rel_str_op722=rel_str_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_str_op722.getTree());

                    }
                    break;
                case 2 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1039:10: NUM_OP_EQ
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_EQ723=(Token)match(input,NUM_OP_EQ,FOLLOW_NUM_OP_EQ_in_rel_op7077); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_EQ723_tree = 
                    (Object)adaptor.create(NUM_OP_EQ723)
                    ;
                    adaptor.addChild(root_0, NUM_OP_EQ723_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1040:10: NUM_OP_NE
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_NE724=(Token)match(input,NUM_OP_NE,FOLLOW_NUM_OP_NE_in_rel_op7088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_NE724_tree = 
                    (Object)adaptor.create(NUM_OP_NE724)
                    ;
                    adaptor.addChild(root_0, NUM_OP_NE724_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1041:10: NUM_OP_GT
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_GT725=(Token)match(input,NUM_OP_GT,FOLLOW_NUM_OP_GT_in_rel_op7099); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_GT725_tree = 
                    (Object)adaptor.create(NUM_OP_GT725)
                    ;
                    adaptor.addChild(root_0, NUM_OP_GT725_tree);
                    }

                    }
                    break;
                case 5 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1042:10: NUM_OP_GTE
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_GTE726=(Token)match(input,NUM_OP_GTE,FOLLOW_NUM_OP_GTE_in_rel_op7110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_GTE726_tree = 
                    (Object)adaptor.create(NUM_OP_GTE726)
                    ;
                    adaptor.addChild(root_0, NUM_OP_GTE726_tree);
                    }

                    }
                    break;
                case 6 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1043:10: NUM_OP_LT
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_LT727=(Token)match(input,NUM_OP_LT,FOLLOW_NUM_OP_LT_in_rel_op7121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_LT727_tree = 
                    (Object)adaptor.create(NUM_OP_LT727)
                    ;
                    adaptor.addChild(root_0, NUM_OP_LT727_tree);
                    }

                    }
                    break;
                case 7 :
                    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1044:10: NUM_OP_LTE
                    {
                    root_0 = (Object)adaptor.nil();


                    NUM_OP_LTE728=(Token)match(input,NUM_OP_LTE,FOLLOW_NUM_OP_LTE_in_rel_op7132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_LTE728_tree = 
                    (Object)adaptor.create(NUM_OP_LTE728)
                    ;
                    adaptor.addChild(root_0, NUM_OP_LTE728_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op"


    public static class rel_str_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_str_op"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1047:1: rel_str_op : ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES );
    public final QueryParser.rel_str_op_return rel_str_op() throws RecognitionException {
        QueryParser.rel_str_op_return retval = new QueryParser.rel_str_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set729=null;

        Object set729_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1047:12: ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set729=(Token)input.LT(1);

            if ( (input.LA(1) >= STR_OP_EQ && input.LA(1) <= STR_OP_NE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set729)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_str_op"


    public static class reserved_identifier_whitelist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reserved_identifier_whitelist"
    // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1056:1: reserved_identifier_whitelist : ( RANK | CUBE | IN | WHEN | THEN | ELSE | END );
    public final QueryParser.reserved_identifier_whitelist_return reserved_identifier_whitelist() throws RecognitionException {
        QueryParser.reserved_identifier_whitelist_return retval = new QueryParser.reserved_identifier_whitelist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set730=null;

        Object set730_tree=null;

        try {
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:1056:31: ( RANK | CUBE | IN | WHEN | THEN | ELSE | END )
            // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set730=(Token)input.LT(1);

            if ( input.LA(1)==CUBE||(input.LA(1) >= ELSE && input.LA(1) <= END)||input.LA(1)==IN||input.LA(1)==RANK||input.LA(1)==THEN||input.LA(1)==WHEN ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set730)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "reserved_identifier_whitelist"

    // $ANTLR start synpred1_QueryParser
    public final void synpred1_QueryParser_fragment() throws RecognitionException {
        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:20: ( WHEN )
        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:754:21: WHEN
        {
        match(input,WHEN,FOLLOW_WHEN_in_synpred1_QueryParser4353); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_QueryParser

    // $ANTLR start synpred2_QueryParser
    public final void synpred2_QueryParser_fragment() throws RecognitionException {
        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:829:14: ( implicit_map_type RIGHT_PAREN cast_expr )
        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:829:16: implicit_map_type RIGHT_PAREN cast_expr
        {
        pushFollow(FOLLOW_implicit_map_type_in_synpred2_QueryParser4779);
        implicit_map_type();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred2_QueryParser4781); if (state.failed) return ;

        pushFollow(FOLLOW_cast_expr_in_synpred2_QueryParser4783);
        cast_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_QueryParser

    // $ANTLR start synpred3_QueryParser
    public final void synpred3_QueryParser_fragment() throws RecognitionException {
        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:909:18: ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)
        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:909:20: identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?
        {
        pushFollow(FOLLOW_identifier_plus_in_synpred3_QueryParser5980);
        identifier_plus();

        state._fsp--;
        if (state.failed) return ;

        match(input,EQUAL,FOLLOW_EQUAL_in_synpred3_QueryParser5982); if (state.failed) return ;

        pushFollow(FOLLOW_col_ref_in_synpred3_QueryParser5984);
        col_ref();

        state._fsp--;
        if (state.failed) return ;

        match(input,PERIOD,FOLLOW_PERIOD_in_synpred3_QueryParser5986); if (state.failed) return ;

        pushFollow(FOLLOW_col_ref_list_in_synpred3_QueryParser5988);
        col_ref_list();

        state._fsp--;
        if (state.failed) return ;

        if ( !(( input.LA( 1 ) == SEMI_COLON )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred3_QueryParser", " input.LA( 1 ) == SEMI_COLON ");
        }

        }

    }
    // $ANTLR end synpred3_QueryParser

    // $ANTLR start synpred4_QueryParser
    public final void synpred4_QueryParser_fragment() throws RecognitionException {
        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:942:41: ( INTEGER SEMI_COLON )
        // /home/ubuntu/spork/src/org/apache/pig/parser/QueryParser.g:942:42: INTEGER SEMI_COLON
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred4_QueryParser6368); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred4_QueryParser6370); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_QueryParser

    // Delegated rules

    public final boolean synpred3_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA53 dfa53 = new DFA53(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA178 dfa178 = new DFA178(this);
    static final String DFA53_eotS =
        "\u0090\uffff";
    static final String DFA53_eofS =
        "\u0090\uffff";
    static final String DFA53_minS =
        "\1\4\106\10\1\4\2\uffff\106\10";
    static final String DFA53_maxS =
        "\1\u00ab\106\157\1\u00ab\2\uffff\106\157";
    static final String DFA53_acceptS =
        "\110\uffff\1\1\1\2\106\uffff";
    static final String DFA53_specialS =
        "\u0090\uffff}>";
    static final String[] DFA53_transitionS = {
            "\1\22\1\uffff\1\32\1\uffff\1\23\1\35\1\104\1\41\1\uffff\1\40"+
            "\2\uffff\1\24\1\44\1\53\1\uffff\1\43\1\13\2\uffff\1\15\1\72"+
            "\1\42\1\uffff\1\4\1\uffff\1\36\1\uffff\1\12\3\uffff\1\100\6"+
            "\uffff\1\74\1\uffff\1\6\1\103\1\77\2\uffff\1\7\1\65\1\34\1\71"+
            "\1\uffff\1\70\1\21\1\2\1\uffff\1\26\1\54\1\75\1\uffff\1\20\1"+
            "\uffff\1\45\1\14\1\63\4\uffff\1\61\1\5\1\76\1\uffff\1\106\1"+
            "\51\3\uffff\1\102\1\101\7\uffff\1\33\1\11\1\uffff\1\27\1\55"+
            "\1\30\1\31\7\uffff\1\3\1\64\3\uffff\1\10\1\62\1\uffff\1\52\2"+
            "\uffff\1\17\1\uffff\1\56\1\57\1\60\1\50\1\46\7\1\1\uffff\1\47"+
            "\1\73\1\105\1\16\1\25\10\uffff\1\37\1\67\32\uffff\1\66",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\133\1\uffff\1\143\1\uffff\1\134\1\146\1\u008d\1\152\1\uffff"+
            "\1\151\2\uffff\1\135\1\155\1\164\1\uffff\1\154\1\124\2\uffff"+
            "\1\126\1\u0083\1\153\1\uffff\1\115\1\uffff\1\147\1\uffff\1\123"+
            "\3\uffff\1\u0089\6\uffff\1\u0085\1\uffff\1\117\1\u008c\1\u0088"+
            "\2\uffff\1\120\1\176\1\145\1\u0082\1\uffff\1\u0081\1\132\1\113"+
            "\1\uffff\1\137\1\165\1\u0086\1\uffff\1\131\1\uffff\1\156\1\125"+
            "\1\174\4\uffff\1\172\1\116\1\u0087\1\uffff\1\u008f\1\162\3\uffff"+
            "\1\u008b\1\u008a\7\uffff\1\144\1\122\1\uffff\1\140\1\166\1\141"+
            "\1\142\7\uffff\1\114\1\175\3\uffff\1\121\1\173\1\uffff\1\163"+
            "\2\uffff\1\130\1\uffff\1\167\1\170\1\171\1\161\1\157\7\112\1"+
            "\uffff\1\160\1\u0084\1\u008e\1\127\1\136\10\uffff\1\150\1\u0080"+
            "\32\uffff\1\177",
            "",
            "",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110",
            "\1\110\16\uffff\1\110\12\uffff\1\107\7\uffff\1\110\33\uffff"+
            "\1\111\2\uffff\1\110\25\uffff\1\110\2\uffff\1\107\11\uffff\1"+
            "\110\2\uffff\1\110"
    };

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "402:1: func_clause : ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) );";
        }
    }
    static final String DFA138_eotS =
        "\22\uffff";
    static final String DFA138_eofS =
        "\5\uffff\2\15\10\uffff\3\15";
    static final String DFA138_minS =
        "\1\4\4\uffff\2\6\5\uffff\1\4\2\uffff\3\6";
    static final String DFA138_maxS =
        "\1\u00ab\4\uffff\2\u0088\5\uffff\1\u00ab\2\uffff\3\u0088";
    static final String DFA138_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\2\uffff\1\7\1\10\1\11\1\12\1\13\1\uffff"+
        "\1\5\1\6\3\uffff";
    static final String DFA138_specialS =
        "\22\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\3\7\1\10\2\7\2\uffff\1\7\1\6\1\7\1\uffff\1\7\1\uffff\1\7\1"+
            "\uffff\1\7\2\uffff\1\3\1\uffff\1\1\1\uffff\2\6\2\uffff\1\1\1"+
            "\uffff\1\7\3\uffff\1\1\3\7\1\3\1\uffff\1\5\2\7\1\6\2\7\1\uffff"+
            "\1\1\1\7\1\4\3\7\1\13\1\12\1\11\1\uffff\2\7\1\uffff\1\1\1\uffff"+
            "\1\7\1\2\3\uffff\1\1\7\uffff\2\7\1\uffff\4\7\5\uffff\1\1\1\6"+
            "\2\7\3\uffff\2\7\1\uffff\1\7\2\uffff\1\7\1\uffff\14\7\1\6\1"+
            "\7\1\1\1\uffff\2\7\1\uffff\1\6\6\uffff\2\7\32\uffff\1\7",
            "",
            "",
            "",
            "",
            "\1\15\1\uffff\1\15\15\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\3\15\3\uffff\4\15\2\uffff\1\15\4\uffff"+
            "\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15",
            "\1\15\1\uffff\1\15\15\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\3\15\3\uffff\4\15\2\uffff\1\15\4\uffff"+
            "\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "\1\16\1\uffff\1\16\1\uffff\4\16\1\uffff\1\16\2\uffff\3\16\1"+
            "\uffff\2\16\2\uffff\1\16\1\21\1\16\1\uffff\1\16\1\uffff\1\16"+
            "\1\uffff\1\16\2\uffff\1\15\1\16\2\uffff\2\15\2\uffff\1\16\1"+
            "\uffff\3\16\2\uffff\3\16\1\17\1\uffff\1\20\2\16\1\15\3\16\1"+
            "\uffff\1\16\1\uffff\3\16\2\uffff\1\15\1\uffff\3\16\1\uffff\2"+
            "\16\3\uffff\2\16\7\uffff\2\16\1\uffff\4\16\6\uffff\1\15\2\16"+
            "\3\uffff\2\16\1\uffff\1\16\2\uffff\1\16\1\uffff\14\16\1\15\5"+
            "\16\1\uffff\1\15\6\uffff\2\16\32\uffff\1\16",
            "",
            "",
            "\1\15\1\uffff\1\15\15\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\3\15\3\uffff\4\15\2\uffff\1\15\4\uffff"+
            "\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15",
            "\1\15\1\uffff\1\15\15\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\3\15\3\uffff\4\15\2\uffff\1\15\4\uffff"+
            "\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15",
            "\1\15\1\uffff\1\15\15\uffff\2\15\11\uffff\1\15\1\16\4\uffff"+
            "\2\15\12\uffff\1\15\6\uffff\2\15\5\uffff\1\15\1\uffff\1\15\2"+
            "\uffff\1\16\7\uffff\1\15\4\uffff\6\15\1\uffff\1\15\2\uffff\1"+
            "\15\1\uffff\3\15\1\14\3\15\3\uffff\4\15\2\uffff\1\15\4\uffff"+
            "\1\15\5\uffff\10\15\4\uffff\1\15\1\uffff\1\15"
    };

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "678:1: cast_expr : ( scalar | MINUS cast_expr -> ^( NEG cast_expr ) | col_ref_without_identifier ( projection )* | invoker_func ( projection )* | identifier_plus ( projection )* | identifier_plus ( func_name_suffix )? LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL identifier_plus ( func_name_suffix )? ( real_arg )* ) ( projection )* | func_name_without_columns LEFT_PAREN ( real_arg ( COMMA real_arg )* )? RIGHT_PAREN ( projection )* -> ^( FUNC_EVAL func_name_without_columns ( real_arg )* ) ( projection )* | CASE ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN expr THEN expr ( WHEN expr THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_EXPR ( expr )+ ) ( projection )* ) | paren_expr | curly_expr | bracket_expr );";
        }
    }
    static final String DFA137_eotS =
        "\104\uffff";
    static final String DFA137_eofS =
        "\104\uffff";
    static final String DFA137_minS =
        "\1\4\1\0\102\uffff";
    static final String DFA137_maxS =
        "\1\u00ab\1\0\102\uffff";
    static final String DFA137_acceptS =
        "\2\uffff\1\2\100\uffff\1\1";
    static final String DFA137_specialS =
        "\1\uffff\1\0\102\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\2\1\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\6\2\2\uffff\3\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\5\2\1\uffff\6\2\1\uffff\11\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\2\2\3\uffff\1\2\7\uffff\2\2\1\uffff\4\2\5\uffff\4\2\3\uffff"+
            "\2\2\1\uffff\1\2\2\uffff\1\2\1\uffff\17\2\1\uffff\2\2\1\uffff"+
            "\1\1\6\uffff\2\2\32\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "754:18: ( ( WHEN )=> WHEN cond THEN expr ( WHEN cond THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_COND ^( WHEN ( cond )+ ) ^( THEN ( expr )+ ) ) ( projection )* | expr WHEN expr THEN expr ( WHEN expr THEN expr )* ( ELSE expr )? END ( projection )* -> ^( CASE_EXPR ( expr )+ ) ( projection )* )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA137_1 = input.LA(1);

                         
                        int index137_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_QueryParser()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index137_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA143_eotS =
        "\113\uffff";
    static final String DFA143_eofS =
        "\113\uffff";
    static final String DFA143_minS =
        "\1\4\1\0\111\uffff";
    static final String DFA143_maxS =
        "\1\u00ab\1\0\111\uffff";
    static final String DFA143_acceptS =
        "\2\uffff\1\2\107\uffff\1\1";
    static final String DFA143_specialS =
        "\1\uffff\1\0\111\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\7\2\2\uffff"+
            "\3\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\6\2\2\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\1\uffff\15\2\1\1\2"+
            "\2\1\uffff\7\2\2\uffff\2\2\7\uffff\2\2\1\uffff\4\2\5\uffff\4"+
            "\2\2\uffff\3\2\1\uffff\1\2\2\uffff\24\2\1\uffff\1\2\6\uffff"+
            "\2\2\32\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "822:1: try_implicit_map_cast : ( ( implicit_map_type RIGHT_PAREN cast_expr )=> implicit_map_type RIGHT_PAREN cast_expr -> ^( CAST_EXPR implicit_map_type cast_expr ) | after_left_paren );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_1 = input.LA(1);

                         
                        int index143_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index143_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA178_eotS =
        "\66\uffff";
    static final String DFA178_eofS =
        "\66\uffff";
    static final String DFA178_minS =
        "\1\31\2\51\1\4\3\41\1\uffff\7\31\1\4\1\uffff\3\0\1\31\3\0\1\31\2"+
        "\0\1\uffff\6\27\1\31\3\0\1\31\3\0\6\27\6\0";
    static final String DFA178_maxS =
        "\1\u0088\2\51\1\u00ab\3\164\1\uffff\7\u0088\1\u00ab\1\uffff\3\0"+
        "\1\u0088\3\0\1\u0088\2\0\1\uffff\6\154\1\u0088\3\0\1\u0088\3\0\6"+
        "\154\6\0";
    static final String DFA178_acceptS =
        "\7\uffff\1\2\10\uffff\1\3\12\uffff\1\1\32\uffff";
    static final String DFA178_specialS =
        "\21\uffff\1\11\1\14\1\12\1\uffff\1\0\1\13\1\1\1\uffff\1\23\1\2\10"+
        "\uffff\1\6\1\7\1\10\1\uffff\1\20\1\21\1\22\6\uffff\1\5\1\4\1\3\1"+
        "\17\1\16\1\15}>";
    static final String[] DFA178_transitionS = {
            "\1\2\15\uffff\2\2\16\uffff\1\1\2\uffff\1\2\54\uffff\1\2\31\uffff"+
            "\1\2\6\uffff\1\2",
            "\1\3",
            "\1\3",
            "\1\7\1\uffff\1\7\1\uffff\2\7\1\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\6\7\2\uffff\1\14\1\6\1\7\1\uffff\1\7\1\uffff\1\7\1\uffff\1"+
            "\13\2\uffff\1\4\1\uffff\1\7\1\uffff\2\6\2\uffff\1\7\1\uffff"+
            "\1\10\3\uffff\1\7\1\11\2\7\1\4\1\uffff\1\5\2\7\1\6\2\7\1\uffff"+
            "\11\7\1\uffff\1\15\1\7\1\uffff\1\7\1\uffff\2\7\3\uffff\1\7\7"+
            "\uffff\1\7\1\12\1\uffff\4\7\5\uffff\1\7\1\6\2\7\3\uffff\2\7"+
            "\1\uffff\1\7\2\uffff\1\7\1\uffff\14\7\1\6\2\7\1\uffff\2\7\1"+
            "\uffff\1\6\6\uffff\2\7\32\uffff\1\7",
            "\1\7\54\uffff\1\7\22\uffff\1\7\1\16\2\7\12\uffff\1\7\4\uffff"+
            "\1\7",
            "\2\7\43\uffff\1\7\7\uffff\1\7\22\uffff\1\7\1\17\2\7\12\uffff"+
            "\1\7\4\uffff\1\7",
            "\2\7\43\uffff\1\7\7\uffff\1\7\22\uffff\1\7\1\17\2\7\12\uffff"+
            "\1\7\4\uffff\1\7",
            "",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\4\uffff\1\20\31"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\4\uffff\1\20\31"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\4\uffff\1\20\31"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\4\uffff\1\20\31"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\4\uffff\1\20\31"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\20\10\uffff\1\7\1\20\3\uffff\2\20\14\uffff\1\20\1\uffff"+
            "\1\20\2\uffff\1\20\13\uffff\1\7\33\uffff\1\7\4\uffff\1\20\31"+
            "\uffff\1\20\6\uffff\1\20",
            "\1\23\11\uffff\1\21\3\uffff\2\23\14\uffff\1\21\1\uffff\1\22"+
            "\2\uffff\1\23\13\uffff\1\24\40\uffff\1\23\31\uffff\1\23\6\uffff"+
            "\1\23",
            "\1\7\1\uffff\1\7\1\uffff\4\7\1\uffff\1\7\2\uffff\3\7\1\uffff"+
            "\2\7\2\uffff\1\7\1\27\1\7\1\uffff\1\7\1\uffff\1\7\1\uffff\1"+
            "\7\2\uffff\1\31\1\7\2\uffff\2\32\2\uffff\1\7\1\uffff\3\7\2\uffff"+
            "\3\7\1\25\1\uffff\1\26\2\7\1\32\3\7\1\uffff\1\7\1\uffff\3\7"+
            "\2\uffff\1\30\1\uffff\3\7\1\uffff\2\7\3\uffff\2\7\7\uffff\2"+
            "\7\1\uffff\4\7\6\uffff\1\32\2\7\3\uffff\2\7\1\uffff\1\7\2\uffff"+
            "\1\7\1\uffff\14\7\1\32\5\7\1\uffff\1\32\6\uffff\2\7\32\uffff"+
            "\1\7",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\36\11\uffff\1\34\3\uffff\2\36\14\uffff\1\34\1\uffff\1\35"+
            "\2\uffff\1\36\54\uffff\1\36\31\uffff\1\36\6\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\41\11\uffff\1\37\3\uffff\2\41\14\uffff\1\37\1\uffff\1\40"+
            "\2\uffff\1\41\54\uffff\1\41\31\uffff\1\41\6\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\42\124\uffff\1\43",
            "\1\42\124\uffff\1\44",
            "\1\42\124\uffff\1\45",
            "\1\46\124\uffff\1\47",
            "\1\46\124\uffff\1\50",
            "\1\46\124\uffff\1\51",
            "\1\54\11\uffff\1\52\3\uffff\2\54\14\uffff\1\52\1\uffff\1\53"+
            "\2\uffff\1\54\54\uffff\1\54\31\uffff\1\54\6\uffff\1\54",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\57\11\uffff\1\55\3\uffff\2\57\14\uffff\1\55\1\uffff\1\56"+
            "\2\uffff\1\57\54\uffff\1\57\31\uffff\1\57\6\uffff\1\57",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\42\124\uffff\1\60",
            "\1\42\124\uffff\1\61",
            "\1\42\124\uffff\1\62",
            "\1\46\124\uffff\1\63",
            "\1\46\124\uffff\1\64",
            "\1\46\124\uffff\1\65",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_specialS);
    static final short[][] DFA178_transition;

    static {
        int numStates = DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_transitionS[i]);
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "909:1: nested_command : ( ( identifier_plus EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier_plus EQUAL nested_proj ) -> ^( NESTED_CMD identifier_plus nested_proj ) | identifier_plus EQUAL expr -> ^( NESTED_CMD_ASSI identifier_plus expr ) | identifier_plus EQUAL nested_op -> ^( NESTED_CMD identifier_plus nested_op ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA178_21 = input.LA(1);

                         
                        int index178_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_21);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA178_23 = input.LA(1);

                         
                        int index178_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_23);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA178_26 = input.LA(1);

                         
                        int index178_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_26);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA178_50 = input.LA(1);

                         
                        int index178_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_50);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA178_49 = input.LA(1);

                         
                        int index178_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_49);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA178_48 = input.LA(1);

                         
                        int index178_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_48);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA178_35 = input.LA(1);

                         
                        int index178_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_35);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA178_36 = input.LA(1);

                         
                        int index178_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_36);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA178_37 = input.LA(1);

                         
                        int index178_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_37);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA178_17 = input.LA(1);

                         
                        int index178_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_17);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA178_19 = input.LA(1);

                         
                        int index178_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_19);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA178_22 = input.LA(1);

                         
                        int index178_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_22);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA178_18 = input.LA(1);

                         
                        int index178_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_18);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA178_53 = input.LA(1);

                         
                        int index178_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_53);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA178_52 = input.LA(1);

                         
                        int index178_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_52);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA178_51 = input.LA(1);

                         
                        int index178_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_51);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA178_39 = input.LA(1);

                         
                        int index178_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_39);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA178_40 = input.LA(1);

                         
                        int index178_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_40);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA178_41 = input.LA(1);

                         
                        int index178_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_41);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA178_25 = input.LA(1);

                         
                        int index178_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_QueryParser()) ) {s = 27;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index178_25);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 178, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_statement_in_query398 = new BitSet(new long[]{0x06A4318113240000L,0x0308C08008002344L,0x0000000000000122L});
    public static final BitSet FOLLOW_EOF_in_query401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_statement_in_statement438 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_clause_in_statement455 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_clause_in_statement472 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_clause_in_statement489 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_realias_clause_in_statement506 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_cache_clause_in_statement523 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_statement_in_statement573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_nested_op_clause582 = new BitSet(new long[]{0x0020200113200000L,0x0300408008002304L,0x0000000000000020L});
    public static final BitSet FOLLOW_op_clause_in_nested_op_clause585 = new BitSet(new long[]{0x0000000000000000L,0x0000100080000000L});
    public static final BitSet FOLLOW_parallel_clause_in_nested_op_clause587 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_nested_op_clause590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_nested_op_clause612 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_FOREACH_in_nested_op_clause614 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_nested_op_clause616 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_foreach_plan_complex_in_nested_op_clause620 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_foreach_plan_simple_in_nested_op_clause626 = new BitSet(new long[]{0x0000000000000000L,0x0000100080000000L});
    public static final BitSet FOLLOW_parallel_clause_in_nested_op_clause628 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_nested_op_clause635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAT_ARROW_in_general_statement683 = new BitSet(new long[]{0x0020200113200000L,0x0300408008002344L,0x0000000000000020L});
    public static final BitSet FOLLOW_op_clause_in_general_statement689 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_clause_in_general_statement698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_general_statement744 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_EQUAL_in_general_statement746 = new BitSet(new long[]{0x0020200113200000L,0x0300408008002344L,0x0000000000000020L});
    public static final BitSet FOLLOW_op_clause_in_general_statement755 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_clause_in_general_statement764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAT_ARROW_in_foreach_statement799 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_statement801 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_foreach_statement803 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_foreach_plan_complex_in_foreach_statement807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_plan_simple_in_foreach_statement813 = new BitSet(new long[]{0x0000000000000000L,0x0000800080000000L});
    public static final BitSet FOLLOW_parallel_clause_in_foreach_statement815 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_foreach_statement818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_foreach_statement878 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_EQUAL_in_foreach_statement880 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_statement885 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_foreach_statement887 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_foreach_plan_complex_in_foreach_statement891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_plan_simple_in_foreach_statement897 = new BitSet(new long[]{0x0000000000000000L,0x0000800080000000L});
    public static final BitSet FOLLOW_parallel_clause_in_foreach_statement899 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_foreach_statement902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_foreach_plan_complex947 = new BitSet(new long[]{0x0490018002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_nested_blk_in_foreach_plan_complex949 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_foreach_plan_complex951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_foreach_plan_simple970 = new BitSet(new long[]{0xDFBE69E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_flatten_generated_item_in_foreach_plan_simple972 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COMMA_in_foreach_plan_simple976 = new BitSet(new long[]{0xDFBE69E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_flatten_generated_item_in_foreach_plan_simple978 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_macro_content1009 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_macro_content_in_macro_content1013 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_macro_content1017 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_macro_content1029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CACHE_in_rel_cache_clause1038 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_rel_cache_clause1040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_macro_param_clause1061 = new BitSet(new long[]{0x0480018002000000L,0x0000108000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_identifier_plus_in_macro_param_clause1065 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_macro_param_clause1068 = new BitSet(new long[]{0x0480018002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_identifier_plus_in_macro_param_clause1070 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_macro_param_clause1077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_macro_return_clause1103 = new BitSet(new long[]{0x0480018002000000L,0x0000008000000000L,0x0000000000000182L});
    public static final BitSet FOLLOW_identifier_plus_in_macro_return_clause1107 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COMMA_in_macro_return_clause1110 = new BitSet(new long[]{0x0480018002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_identifier_plus_in_macro_return_clause1112 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_VOID_in_macro_return_clause1119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_content_in_macro_body_clause1146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_param_clause_in_macro_clause1164 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_macro_return_clause_in_macro_clause1166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_macro_body_clause_in_macro_clause1168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_inline_return_clause1197 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_EQUAL_in_inline_return_clause1199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_inline_return_clause1212 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COMMA_in_inline_return_clause1215 = new BitSet(new long[]{0x0480018002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_identifier_plus_in_inline_return_clause1217 = new BitSet(new long[]{0x0000020000800000L});
    public static final BitSet FOLLOW_EQUAL_in_inline_return_clause1221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_inline_param_clause1309 = new BitSet(new long[]{0x4080002800005000L,0x0000104000000000L});
    public static final BitSet FOLLOW_parameter_in_inline_param_clause1313 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_inline_param_clause1316 = new BitSet(new long[]{0x4080002800005000L,0x0000004000000000L});
    public static final BitSet FOLLOW_parameter_in_inline_param_clause1318 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_inline_param_clause1325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_return_clause_in_inline_clause1347 = new BitSet(new long[]{0x0480018002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_identifier_plus_in_inline_clause1349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_inline_param_clause_in_inline_clause1351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_implicit_tuple_type1423 = new BitSet(new long[]{0x248081900612AC00L,0x0000108000001470L,0x0000000000000112L});
    public static final BitSet FOLLOW_field_def_list_in_implicit_tuple_type1425 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_implicit_tuple_type1428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_explicit_tuple_type1448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_implicit_tuple_type_in_explicit_tuple_type1451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_explicit_tuple_type_cast1460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_explicit_tuple_type_cast1462 = new BitSet(new long[]{0x200080100412AC00L,0x0000100000001400L,0x0000000000000010L});
    public static final BitSet FOLLOW_explicit_type_cast_in_explicit_tuple_type_cast1466 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_explicit_tuple_type_cast1470 = new BitSet(new long[]{0x200080100412AC00L,0x0000000000001400L,0x0000000000000010L});
    public static final BitSet FOLLOW_explicit_type_cast_in_explicit_tuple_type_cast1472 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_explicit_tuple_type_cast1480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_tuple_type_in_tuple_type1504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_tuple_type_in_tuple_type1508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_implicit_bag_type1517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NULL_in_implicit_bag_type1519 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_COLON_in_implicit_bag_type1521 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000040L,0x0000000000000010L});
    public static final BitSet FOLLOW_tuple_type_in_implicit_bag_type1523 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_implicit_bag_type1526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_implicit_bag_type1559 = new BitSet(new long[]{0x0480018002000000L,0x0000088000000040L,0x0000000000000112L});
    public static final BitSet FOLLOW_identifier_plus_in_implicit_bag_type1565 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_COLON_in_implicit_bag_type1567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000000010L});
    public static final BitSet FOLLOW_tuple_type_in_implicit_bag_type1572 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_implicit_bag_type1577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_explicit_bag_type1600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_implicit_bag_type_in_explicit_bag_type1603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_explicit_bag_type_cast1612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_explicit_bag_type_cast1614 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_explicit_tuple_type_cast_in_explicit_bag_type_cast1616 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_explicit_bag_type_cast1619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_implicit_map_type1639 = new BitSet(new long[]{0x200080100412AC00L,0x0000040000001470L,0x0000000000000010L});
    public static final BitSet FOLLOW_type_in_implicit_map_type1641 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_implicit_map_type1644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_explicit_map_type1664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_implicit_map_type_in_explicit_map_type1667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_map_type_in_map_type1676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_map_type_in_map_type1680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_explicit_type1689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_tuple_type_in_explicit_type1693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_bag_type_in_explicit_type1697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_map_type_in_explicit_type1701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_tuple_type_in_implicit_type1710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_bag_type_in_implicit_type1714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_map_type_in_implicit_type1718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_type_in_type1727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_type_in_type1731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_explicit_type_cast1740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_map_type_in_explicit_type_cast1744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_tuple_type_cast_in_explicit_type_cast1748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_bag_type_cast_in_explicit_type_cast1752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_import_clause1763 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_import_clause1766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_define_clause1775 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_define_clause1778 = new BitSet(new long[]{0xBBBCEC1157372F50L,0xFFE96301EC06374EL,0x000008000001807DL});
    public static final BitSet FOLLOW_cmd_in_define_clause1782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_clause_in_define_clause1786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_clause_in_define_clause1790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_realias_clause1800 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_EQUAL_in_realias_clause1802 = new BitSet(new long[]{0x0480018002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_identifier_plus_in_realias_clause1804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_parallel_clause1823 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_INTEGER_in_parallel_clause1826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_clause_in_op_clause1835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_clause_in_op_clause1849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_op_clause1863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cube_clause_in_op_clause1877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_store_clause_in_op_clause1891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_clause_in_op_clause1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_clause_in_op_clause1919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limit_clause_in_op_clause1933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sample_clause_in_op_clause1947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_clause_in_op_clause1961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_clause_in_op_clause1975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cross_clause_in_op_clause1989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_op_clause2003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_clause_in_op_clause2017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_clause_in_op_clause2031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mr_clause_in_op_clause2045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIP_in_ship_clause2054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_ship_clause2057 = new BitSet(new long[]{0x0000000000000000L,0x0000104000000000L});
    public static final BitSet FOLLOW_path_list_in_ship_clause2060 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_ship_clause2063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list2073 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COMMA_in_path_list2077 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list2079 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_CACHE_in_cache_clause2096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cache_clause2099 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_path_list_in_cache_clause2102 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cache_clause2104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_input_clause2114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_input_clause2117 = new BitSet(new long[]{0x0000000000000000L,0x00C0004000000000L});
    public static final BitSet FOLLOW_stream_cmd_list_in_input_clause2120 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_input_clause2122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_output_clause2132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_output_clause2135 = new BitSet(new long[]{0x0000000000000000L,0x00C0004000000000L});
    public static final BitSet FOLLOW_stream_cmd_list_in_output_clause2138 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_output_clause2140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_error_clause2150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_error_clause2153 = new BitSet(new long[]{0x0000000000000000L,0x0000104000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_error_clause2158 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000100L});
    public static final BitSet FOLLOW_LIMIT_in_error_clause2162 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_INTEGER_in_error_clause2165 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_error_clause2173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_load_clause2183 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_load_clause2186 = new BitSet(new long[]{0x0000000000000102L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_USING_in_load_clause2190 = new BitSet(new long[]{0xBBBCE81157372F50L,0xFFE96301EC06370EL,0x000008000001807DL});
    public static final BitSet FOLLOW_func_clause_in_load_clause2193 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_as_clause_in_load_clause2198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_clause2208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_clause2245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_func_clause2247 = new BitSet(new long[]{0x0000000000000000L,0x0000104000010000L});
    public static final BitSet FOLLOW_func_args_in_func_clause2249 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_func_clause2252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eid_without_columns_in_func_name_without_columns2286 = new BitSet(new long[]{0x0000000400000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_set_in_func_name_without_columns2290 = new BitSet(new long[]{0xBBBCE81157372F50L,0xFFE96301EC06370EL,0x000008000001807DL});
    public static final BitSet FOLLOW_eid_in_func_name_without_columns2300 = new BitSet(new long[]{0x0000000400000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_eid_in_func_name2312 = new BitSet(new long[]{0x0000000400000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_set_in_func_name2316 = new BitSet(new long[]{0xBBBCE81157372F50L,0xFFE96301EC06370EL,0x000008000001807DL});
    public static final BitSet FOLLOW_eid_in_func_name2326 = new BitSet(new long[]{0x0000000400000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_func_args_string_in_func_args2351 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COMMA_in_func_args2355 = new BitSet(new long[]{0x0000000000000000L,0x0000004000010000L});
    public static final BitSet FOLLOW_func_args_string_in_func_args2357 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_set_in_group_clause2383 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_group_item_list_in_group_clause2394 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_USING_in_group_clause2398 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_group_clause2401 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_partition_clause_in_group_clause2406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_item_in_group_item_list2416 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COMMA_in_group_item_list2420 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_group_item_in_group_item_list2422 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_rel_in_group_item2454 = new BitSet(new long[]{0x0000000000010010L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_join_group_by_clause_in_group_item2458 = new BitSet(new long[]{0x0800000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_ALL_in_group_item2462 = new BitSet(new long[]{0x0800000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_ANY_in_group_item2466 = new BitSet(new long[]{0x0800000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_identifier_plus2490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reserved_identifier_whitelist_in_identifier_plus2494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_explicit_field_def2508 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_COLON_in_explicit_field_def2512 = new BitSet(new long[]{0x200080100412AC00L,0x0000000000001470L,0x0000000000000010L});
    public static final BitSet FOLLOW_type_in_explicit_field_def2514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_type_in_explicit_field_def2553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_field_def_in_field_def2572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_type_in_field_def2586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_field_def_list2605 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COMMA_in_field_def_list2609 = new BitSet(new long[]{0x248081900612AC00L,0x0000008000001470L,0x0000000000000112L});
    public static final BitSet FOLLOW_field_def_in_field_def_list2612 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_AS_in_as_clause2627 = new BitSet(new long[]{0x248081900612AC00L,0x0000008000001440L,0x0000000000000112L});
    public static final BitSet FOLLOW_explicit_field_def_in_as_clause2632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_as_clause2638 = new BitSet(new long[]{0x248081900612AC00L,0x0000108000001470L,0x0000000000000112L});
    public static final BitSet FOLLOW_field_def_list_in_as_clause2641 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_as_clause2644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_cmd_in_stream_cmd_list2660 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COMMA_in_stream_cmd_list2664 = new BitSet(new long[]{0x0000000000000000L,0x00C0004000000000L});
    public static final BitSet FOLLOW_stream_cmd_in_stream_cmd_list2666 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_set_in_stream_cmd2683 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_USING_in_stream_cmd2700 = new BitSet(new long[]{0xBBBCE81157372F50L,0xFFE96301EC06370EL,0x000008000001807DL});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd2703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_cmd2715 = new BitSet(new long[]{0x1000000000040002L,0x0021000040000000L});
    public static final BitSet FOLLOW_ship_clause_in_cmd2720 = new BitSet(new long[]{0x1000000000040002L,0x0021000040000000L});
    public static final BitSet FOLLOW_cache_clause_in_cmd2724 = new BitSet(new long[]{0x1000000000040002L,0x0021000040000000L});
    public static final BitSet FOLLOW_input_clause_in_cmd2728 = new BitSet(new long[]{0x1000000000040002L,0x0021000040000000L});
    public static final BitSet FOLLOW_output_clause_in_cmd2732 = new BitSet(new long[]{0x1000000000040002L,0x0021000040000000L});
    public static final BitSet FOLLOW_error_clause_in_cmd2736 = new BitSet(new long[]{0x1000000000040002L,0x0021000040000000L});
    public static final BitSet FOLLOW_identifier_plus_in_rel2748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_previous_rel_in_rel2752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_clause_in_rel2756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARROBA_in_previous_rel2765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_store_clause2774 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_store_clause2777 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_INTO_in_store_clause2779 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_store_clause2782 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_USING_in_store_clause2786 = new BitSet(new long[]{0xBBBCE81157372F50L,0xFFE96301EC06370EL,0x000008000001807DL});
    public static final BitSet FOLLOW_func_clause_in_store_clause2789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_filter_clause2801 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_filter_clause2804 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_BY_in_filter_clause2806 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC066B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_cond_in_filter_clause2809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_stream_clause2818 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_stream_clause2821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_THROUGH_in_stream_clause2823 = new BitSet(new long[]{0x0480058002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_stream_clause2828 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_identifier_plus_in_stream_clause2832 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_as_clause_in_stream_clause2836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_mr_clause2846 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_mr_clause2849 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_mr_clause2853 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_path_list_in_mr_clause2856 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_mr_clause2858 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_store_clause_in_mr_clause2864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_load_clause_in_mr_clause2866 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_mr_clause2868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_split_clause2878 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_split_clause2881 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_INTO_in_split_clause2883 = new BitSet(new long[]{0x0480018002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_split_branch_in_split_clause2886 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_split_branches_in_split_clause2888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_split_branch2897 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_IF_in_split_branch2899 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC066B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_cond_in_split_branch2901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_split_otherwise2922 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_OTHERWISE_in_split_otherwise2924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_split_branches2934 = new BitSet(new long[]{0x0480018002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_split_branch_in_split_branches2937 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_split_branches_in_split_branches2939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_split_branches2959 = new BitSet(new long[]{0x0480018002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_split_otherwise_in_split_branches2962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_limit_clause2971 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_limit_clause2974 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_limit_clause2976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_sample_clause2985 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_sample_clause2988 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_sample_clause2990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RANK_in_rank_clause2999 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_rank_clause3002 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_rank_by_statement_in_rank_clause3006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_rank_by_statement3018 = new BitSet(new long[]{0x04A001C802000000L,0x0010008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_rank_by_clause_in_rank_by_statement3021 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_DENSE_in_rank_by_statement3023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_rank_by_clause3033 = new BitSet(new long[]{0x0000000040000202L});
    public static final BitSet FOLLOW_rank_list_in_rank_by_clause3063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_col_in_rank_list3072 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COMMA_in_rank_list3076 = new BitSet(new long[]{0x04A001C802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_rank_col_in_rank_list3078 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_col_range_in_rank_col3104 = new BitSet(new long[]{0x0000000040000202L});
    public static final BitSet FOLLOW_col_ref_in_rank_col3128 = new BitSet(new long[]{0x0000000040000202L});
    public static final BitSet FOLLOW_ORDER_in_order_clause3148 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_order_clause3151 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_BY_in_order_clause3153 = new BitSet(new long[]{0x04A001C802000000L,0x0010008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_order_by_clause_in_order_clause3156 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_USING_in_order_clause3160 = new BitSet(new long[]{0xBBBCE81157372F50L,0xFFE96301EC06370EL,0x000008000001807DL});
    public static final BitSet FOLLOW_func_clause_in_order_clause3163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_order_by_clause3175 = new BitSet(new long[]{0x0000000040000202L});
    public static final BitSet FOLLOW_order_col_list_in_order_by_clause3206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_col_in_order_col_list3215 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COMMA_in_order_col_list3219 = new BitSet(new long[]{0x04A001C802000000L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_order_col_in_order_col_list3221 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_col_range_in_order_col3252 = new BitSet(new long[]{0x0000000040000202L});
    public static final BitSet FOLLOW_col_ref_in_order_col3275 = new BitSet(new long[]{0x0000000040000202L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_order_col3300 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_col_ref_in_order_col3303 = new BitSet(new long[]{0x0000000040000200L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_order_col3316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_distinct_clause3326 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_distinct_clause3329 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_partition_clause_in_distinct_clause3331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_partition_clause3341 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_BY_in_partition_clause3344 = new BitSet(new long[]{0xBBBCE81157372F50L,0xFFE96301EC06370EL,0x000008000001807DL});
    public static final BitSet FOLLOW_func_name_in_partition_clause3347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_in_rel_list3356 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COMMA_in_rel_list3360 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_rel_list3362 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_CROSS_in_cross_clause3379 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_list_in_cross_clause3382 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_partition_clause_in_cross_clause3384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_join_clause3395 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_join_sub_clause_in_join_clause3398 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_USING_in_join_clause3402 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_join_type_in_join_clause3405 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_partition_clause_in_join_clause3410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_join_type3420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause3429 = new BitSet(new long[]{0x0008000000800000L,0x0000020000000008L});
    public static final BitSet FOLLOW_set_in_join_sub_clause3435 = new BitSet(new long[]{0x0000000000800000L,0x0000000020000000L});
    public static final BitSet FOLLOW_OUTER_in_join_sub_clause3449 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COMMA_in_join_sub_clause3452 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause3455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_join_sub_clause3465 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause3468 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_rel_in_join_item3484 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_join_group_by_clause_in_join_item3486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_join_group_by_clause3545 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_join_group_by_clause3548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_union_clause3557 = new BitSet(new long[]{0x0480018002000080L,0x0000008002000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_ONSCHEMA_in_union_clause3560 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_list_in_union_clause3563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CUBE_in_cube_clause3572 = new BitSet(new long[]{0x0480018002000080L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_rel_in_cube_clause3574 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_BY_in_cube_clause3576 = new BitSet(new long[]{0x0000000002000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_cube_rollup_list_in_cube_clause3578 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COMMA_in_cube_clause3582 = new BitSet(new long[]{0x0000000002000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_cube_rollup_list_in_cube_clause3584 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_set_in_cube_rollup_list3615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cube_rollup_list3626 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_cube_rollup_list3629 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_cube_rollup_list3633 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_cube_rollup_list3636 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cube_rollup_list3641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_flatten_clause3651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_clause3654 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_flatten_clause3657 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_clause3659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_generate_as_clause3672 = new BitSet(new long[]{0x248081900612AC00L,0x0000008000001440L,0x0000000000000112L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_generate_as_clause3679 = new BitSet(new long[]{0x248081900612AC00L,0x0000008000001470L,0x0000000000000112L});
    public static final BitSet FOLLOW_field_def_list_in_generate_as_clause3682 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_generate_as_clause3684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_field_def_in_generate_as_clause3691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flatten_clause_in_flatten_generated_item3702 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_generate_as_clause_in_flatten_generated_item3704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_real_arg_in_flatten_generated_item3732 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_generate_as_clause_in_flatten_generated_item3734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_real_arg3749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_real_arg3762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_real_arg3775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_cond_in_cond3784 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_OR_in_cond3789 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC066B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_and_cond_in_cond3792 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_not_cond_in_and_cond3804 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AND_in_and_cond3808 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC066B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_not_cond_in_and_cond3811 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_NOT_in_not_cond3823 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_unary_cond_in_not_cond3827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_unary_cond3857 = new BitSet(new long[]{0x0400000000000002L,0xFC00000001F80002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IS_in_unary_cond3871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_NOT_in_unary_cond3873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NULL_in_unary_cond3876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_unary_cond3906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_cond3908 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_unary_cond3912 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_unary_cond3916 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_unary_cond3918 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_cond3925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_in_unary_cond3952 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_unary_cond3958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_expr_in_expr4007 = new BitSet(new long[]{0x0000000000000002L,0x0000000800004000L});
    public static final BitSet FOLLOW_set_in_expr4011 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_multi_expr_in_expr4022 = new BitSet(new long[]{0x0000000000000002L,0x0000000800004000L});
    public static final BitSet FOLLOW_cast_expr_in_multi_expr4034 = new BitSet(new long[]{0x0000000200000002L,0x0010000200000000L});
    public static final BitSet FOLLOW_set_in_multi_expr4038 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_cast_expr_in_multi_expr4053 = new BitSet(new long[]{0x0000000200000002L,0x0010000200000000L});
    public static final BitSet FOLLOW_set_in_func_name_suffix4067 = new BitSet(new long[]{0xBBBCE81157372F50L,0xFFE96301EC06370EL,0x000008000001807DL});
    public static final BitSet FOLLOW_eid_in_func_name_suffix4077 = new BitSet(new long[]{0x0000000400000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_scalar_in_cast_expr4112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_cast_expr4126 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_cast_expr_in_cast_expr4128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_without_identifier_in_cast_expr4185 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4187 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_invoker_func_in_cast_expr4202 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4204 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_identifier_plus_in_cast_expr4219 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4221 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_identifier_plus_in_cast_expr4236 = new BitSet(new long[]{0x0000000400000000L,0x0000000400000040L});
    public static final BitSet FOLLOW_func_name_suffix_in_cast_expr4238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cast_expr4241 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF973C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_cast_expr4245 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_cast_expr4249 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_cast_expr4251 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cast_expr4259 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4261 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_func_name_without_columns_in_cast_expr4295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cast_expr4297 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF973C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_cast_expr4301 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_cast_expr4305 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_cast_expr4307 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cast_expr4315 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4317 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_CASE_in_cast_expr4348 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_WHEN_in_cast_expr4357 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC066B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_cond_in_cast_expr4359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_in_cast_expr4361 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_cast_expr4363 = new BitSet(new long[]{0x0000018000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_WHEN_in_cast_expr4367 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC066B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_cond_in_cast_expr4369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_in_cast_expr4371 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_cast_expr4373 = new BitSet(new long[]{0x0000018000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ELSE_in_cast_expr4380 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_cast_expr4382 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_END_in_cast_expr4387 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4389 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_expr_in_cast_expr4436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_WHEN_in_cast_expr4438 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_cast_expr4440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_in_cast_expr4442 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_cast_expr4444 = new BitSet(new long[]{0x0000018000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_WHEN_in_cast_expr4448 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_cast_expr4450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_in_cast_expr4452 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_cast_expr4454 = new BitSet(new long[]{0x0000018000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ELSE_in_cast_expr4461 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_cast_expr4463 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_END_in_cast_expr4468 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_cast_expr4470 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_paren_expr_in_cast_expr4518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_curly_expr_in_cast_expr4532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_expr_in_cast_expr4546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INVOKE_in_invoker_func4560 = new BitSet(new long[]{0x0000000000000020L,0x0000000000000040L});
    public static final BitSet FOLLOW_AMPERSAND_in_invoker_func4564 = new BitSet(new long[]{0x0480018002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_invoker_func4568 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_invoker_func4570 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_invoker_func4574 = new BitSet(new long[]{0x0480018002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_identifier_plus_in_invoker_func4582 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_PERIOD_in_invoker_func4584 = new BitSet(new long[]{0x0480018002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_identifier_plus_in_invoker_func4593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_invoker_func4597 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF973C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_invoker_func4601 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_invoker_func4605 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_invoker_func4607 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_invoker_func4615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_paren_expr4682 = new BitSet(new long[]{0xFFBEA9F9573FAF50L,0xFFF973C1EC067F7FL,0x000008000001817FL});
    public static final BitSet FOLLOW_try_implicit_map_cast_in_paren_expr4685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_map_type_in_try_implicit_map_cast4788 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_try_implicit_map_cast4790 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_cast_expr_in_try_implicit_map_cast4792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_after_left_paren_in_try_implicit_map_cast4819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_type_cast_in_after_left_paren4828 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren4830 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_cast_expr_in_after_left_paren4832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren4883 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_after_left_paren4885 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_STAR_in_after_left_paren4918 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_after_left_paren4922 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_after_left_paren4924 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren4929 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_after_left_paren4931 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_col_range_in_after_left_paren4971 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_after_left_paren4975 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_after_left_paren4977 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren4982 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_after_left_paren4984 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_cond_in_after_left_paren5096 = new BitSet(new long[]{0x0000000000800000L,0x0000102000000000L});
    public static final BitSet FOLLOW_COMMA_in_after_left_paren5123 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_after_left_paren5125 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5130 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_after_left_paren5132 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QMARK_in_after_left_paren5215 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_after_left_paren5221 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_COLON_in_after_left_paren5223 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_after_left_paren5229 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_after_left_paren5231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_curly_expr5260 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_curly_expr5262 = new BitSet(new long[]{0x0000000000800000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_curly_expr5266 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_curly_expr5268 = new BitSet(new long[]{0x0000000000800000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_curly_expr5273 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_curly_expr5275 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_curly_expr5307 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_curly_expr5309 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_curly_expr5311 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_bracket_expr5332 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_bracket_expr5334 = new BitSet(new long[]{0x0000000000800000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_bracket_expr5338 = new BitSet(new long[]{0xDFBE29E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_real_arg_in_bracket_expr5340 = new BitSet(new long[]{0x0000000000800000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_bracket_expr5345 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_bracket_expr5347 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_bracket_expr5381 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_keyvalue_in_bracket_expr5383 = new BitSet(new long[]{0x0000000000800000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_bracket_expr5387 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_keyvalue_in_bracket_expr5389 = new BitSet(new long[]{0x0000000000800000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_bracket_expr5394 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_bracket_expr5396 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_bracket_expr5428 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_bracket_expr5430 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_projection_in_bracket_expr5432 = new BitSet(new long[]{0x0000000000000002L,0x0000001400000000L});
    public static final BitSet FOLLOW_PERIOD_in_projection5453 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_col_ref_in_projection5457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_projection5461 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_col_ref_in_projection5463 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_projection5467 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_col_ref_in_projection5469 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_projection5474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_projection5502 = new BitSet(new long[]{0x0000000000000000L,0x0000004000040000L});
    public static final BitSet FOLLOW_set_in_projection5505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_without_identifier_in_col_ref5538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_col_ref5542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_col_range5555 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range5557 = new BitSet(new long[]{0x04A0018802000002L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_col_ref_in_col_range5563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range5594 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_col_ref_in_col_range5596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_keyvalue5701 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_POUND_in_keyvalue5703 = new BitSet(new long[]{0x4002082000000000L,0x0000004000040870L,0x0000000000000008L});
    public static final BitSet FOLLOW_literal_in_keyvalue5705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_literal_map5726 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_keyvalue_in_literal_map5728 = new BitSet(new long[]{0x0000000000800000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_literal_map5732 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_keyvalue_in_literal_map5734 = new BitSet(new long[]{0x0000000000800000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_literal_map5739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_literal_map5766 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_literal_map5768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_literal_bag5786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_literal_tuple_in_literal_bag5788 = new BitSet(new long[]{0x0000000000800000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_literal_bag5792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_literal_tuple_in_literal_bag5794 = new BitSet(new long[]{0x0000000000800000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_literal_bag5799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_literal_bag5826 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_literal_bag5828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_literal_tuple5845 = new BitSet(new long[]{0x4002082000000000L,0x0000004000040870L,0x0000000000000008L});
    public static final BitSet FOLLOW_literal_in_literal_tuple5847 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_literal_tuple5851 = new BitSet(new long[]{0x4002082000000000L,0x0000004000040870L,0x0000000000000008L});
    public static final BitSet FOLLOW_literal_in_literal_tuple5853 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_literal_tuple5858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_literal_tuple5887 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_literal_tuple5889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scalar_in_literal5906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_map_in_literal5910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_bag_in_literal5914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_tuple_in_literal5918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_command_in_nested_blk5931 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_nested_blk5933 = new BitSet(new long[]{0x0490018002000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_GENERATE_in_nested_blk5938 = new BitSet(new long[]{0xDFBE69E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_flatten_generated_item_in_nested_blk5940 = new BitSet(new long[]{0x0000000000800000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_nested_blk5944 = new BitSet(new long[]{0xDFBE69E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_flatten_generated_item_in_nested_blk5946 = new BitSet(new long[]{0x0000000000800000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_nested_blk5951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_nested_command5998 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command6000 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_nested_proj_in_nested_command6002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_nested_command6049 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command6051 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_expr_in_nested_command6053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_nested_command6098 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command6100 = new BitSet(new long[]{0x0004200101000000L,0x0000000008000100L});
    public static final BitSet FOLLOW_nested_op_in_nested_command6102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_filter_in_nested_op6137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_sort_in_nested_op6151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_distinct_in_nested_op6165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_limit_in_nested_op6179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_cross_in_nested_op6193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_foreach_in_nested_op6207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj6216 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_PERIOD_in_nested_proj6218 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_col_ref_list_in_nested_proj6220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list6254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_col_ref_list6260 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list6262 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_col_ref_list6266 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list6268 = new BitSet(new long[]{0x0000000000800000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_col_ref_list6273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_nested_filter6303 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_filter6306 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_BY_in_nested_filter6308 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC066B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_cond_in_nested_filter6311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_nested_sort6320 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_sort6323 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_BY_in_nested_sort6325 = new BitSet(new long[]{0x04A001C802000000L,0x0010008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_order_by_clause_in_nested_sort6329 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_USING_in_nested_sort6333 = new BitSet(new long[]{0xBBBCE81157372F50L,0xFFE96301EC06370EL,0x000008000001807DL});
    public static final BitSet FOLLOW_func_clause_in_nested_sort6336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_nested_distinct6348 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_distinct6351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_nested_limit6360 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_limit6363 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_INTEGER_in_nested_limit6375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_nested_limit6379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_nested_cross6390 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_nested_op_input_list_in_nested_cross6393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_nested_foreach6401 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_foreach6403 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_GENERATE_in_nested_foreach6405 = new BitSet(new long[]{0xDFBE69E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_flatten_generated_item_in_nested_foreach6407 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COMMA_in_nested_foreach6411 = new BitSet(new long[]{0xDFBE69E9573F2B50L,0xFFF963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_flatten_generated_item_in_nested_foreach6413 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_col_ref_in_nested_op_input6448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op_input6452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list6461 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COMMA_in_nested_op_input_list6465 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list6467 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_rel_str_op_in_eid_without_columns6495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_eid_without_columns6503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_eid_without_columns6511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_eid_without_columns6519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_eid_without_columns6527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_eid_without_columns6535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_eid_without_columns6543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROLLUP_in_eid_without_columns6551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_eid_without_columns6559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_eid_without_columns6567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COGROUP_in_eid_without_columns6575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_eid_without_columns6583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_eid_without_columns6591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_eid_without_columns6599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_eid_without_columns6607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_in_eid_without_columns6615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_eid_without_columns6623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_eid_without_columns6631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_eid_without_columns6639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_eid_without_columns6647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_eid_without_columns6655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INNER_in_eid_without_columns6663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_eid_without_columns6671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_eid_without_columns6679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_eid_without_columns6687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_eid_without_columns6695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_eid_without_columns6703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_eid_without_columns6711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASC_in_eid_without_columns6719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_eid_without_columns6727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_eid_without_columns6735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIGINTEGER_in_eid_without_columns6743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIGDECIMAL_in_eid_without_columns6751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATETIME_in_eid_without_columns6759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARARRAY_in_eid_without_columns6767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTEARRAY_in_eid_without_columns6775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_eid_without_columns6783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_eid_without_columns6791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROUGH_in_eid_without_columns6799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_eid_without_columns6807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_eid_without_columns6815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIP_in_eid_without_columns6823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CACHE_in_eid_without_columns6831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_eid_without_columns6839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_eid_without_columns6847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_eid_without_columns6855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDIN_in_eid_without_columns6863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDOUT_in_eid_without_columns6871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_eid_without_columns6879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_eid_without_columns6887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_eid_without_columns6895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_eid_without_columns6903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_eid_without_columns6911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REALIAS_in_eid_without_columns6919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_COND_in_eid_without_columns6927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eid_without_columns_in_eid6936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_eid6944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_eid6952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CUBE_in_eid6960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_eid6968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_eid6976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_eid6984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_eid6992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_eid7000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_eid7008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_eid7016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_eid7024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_eid7032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_eid7040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_eid7048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_eid7056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_str_op_in_rel_op7066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_EQ_in_rel_op7077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_NE_in_rel_op7088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_GT_in_rel_op7099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_GTE_in_rel_op7110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_LT_in_rel_op7121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_LTE_in_rel_op7132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_synpred1_QueryParser4353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_map_type_in_synpred2_QueryParser4779 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred2_QueryParser4781 = new BitSet(new long[]{0xDFBE29A9573F2B50L,0xFFE963C1EC046B7FL,0x000008000001816FL});
    public static final BitSet FOLLOW_cast_expr_in_synpred2_QueryParser4783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_plus_in_synpred3_QueryParser5980 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred3_QueryParser5982 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_col_ref_in_synpred3_QueryParser5984 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_PERIOD_in_synpred3_QueryParser5986 = new BitSet(new long[]{0x04A0018802000000L,0x0000008000000040L,0x0000000000000102L});
    public static final BitSet FOLLOW_col_ref_list_in_synpred3_QueryParser5988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred4_QueryParser6368 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred4_QueryParser6370 = new BitSet(new long[]{0x0000000000000002L});

}